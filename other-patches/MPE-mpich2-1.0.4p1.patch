diff -ur mpich2-1.0.4p1/src/mpe2/src/wrappers/src/log_mpi_core.c mpich2-1.0.4p1-patched/src/mpe2/src/wrappers/src/log_mpi_core.c
--- mpich2-1.0.4p1/src/mpe2/src/wrappers/src/log_mpi_core.c	2006-04-23 08:22:43.000000000 +0200
+++ mpich2-1.0.4p1-patched/src/mpe2/src/wrappers/src/log_mpi_core.c	2006-09-29 09:25:31.000000000 +0200
@@ -5,6 +5,7 @@
 #ifdef MPI_BUILD_PROFILING
 #undef MPI_BUILD_PROFILING
 #endif
+
 #include "mpe_wrappers_conf.h"
 #include "mpi.h"
 #include "mpe_log.h"
@@ -105,6 +106,7 @@
     int  kind_mask;    /* Indicates kind of state (message, environment) */
     char *name;        /* Pointer to name */
     char *color;       /* Color */
+    char *format;     /* Info format */
 } MPE_State;
 
 typedef struct {
@@ -114,6 +116,7 @@
     int  kind_mask;    /* Indicates kind of state (message, environment) */
     char *name;        /* Pointer to name */
     char *color;       /* Color */
+    char *format;     /* Info format */
 } MPE_Event;
 
 /* Kind_mask values */
@@ -384,29 +387,35 @@
 extern               const CLOG_CommIDs_t  *CLOG_CommIDs4Self;
 extern MPEU_DLL_SPEC const CLOG_CommIDs_t  *CLOG_CommIDs4World;
 
-/*
-   All following macros have "comm" as argument, but none of them except
-   MPE_LOG_STATE_BEGIN needs comm argument.  Instead all of them need
-   commIDs as an argument.  "comm" are used in all macros to indicate
-   the macro body needs reference of comm, i.e commIDs.  The goal is that
-   the functions that invoke these macros will look clearer and more consistent.
-*/
-#define MPE_LOG_STATE_BEGIN(comm,name) \
+#define MPE_LOG_STATE_BEGIN_EXTENDED(comm,name, bytebuf) \
     if (is_mpilog_on && is_mpelog_on) { \
         state = &states[name]; \
         if (state->is_active) { \
             commIDs = CLOG_CommSet_get_IDs( CLOG_CommSet, comm ); \
-            MPE_Log_commIDs_event( commIDs, 0, state->start_evtID, NULL ); \
+            MPE_Log_commIDs_event( commIDs, 0, state->start_evtID, bytebuf ); \
             is_mylog_on = 1; \
         } \
     }
 /*    if (is_mpilog_on && is_mpelog_on && state->is_active) { \ */
-#define MPE_LOG_STATE_END(comm) \
+#define MPE_LOG_STATE_END_EXTENDED(comm, bytebuf) \
     if (is_mylog_on) { \
-        MPE_Log_commIDs_event( commIDs, 0, state->final_evtID, NULL ); \
+        MPE_Log_commIDs_event( commIDs, 0, state->final_evtID, bytebuf ); \
         state->n_calls += 2; \
     }
 
+/*
+   All following macros have "comm" as argument, but none of them except
+   MPE_LOG_STATE_BEGIN needs comm argument.  Instead all of them need
+   commIDs as an argument.  "comm" are used in all macros to indicate
+   the macro body needs reference of comm, i.e commIDs.  The goal is that
+   the functions that invoke these macros will look clearer and more consistent.
+*/
+#define MPE_LOG_STATE_BEGIN(comm,name) \
+    MPE_LOG_STATE_BEGIN_EXTENDED(comm,name,NULL)
+/*    if (is_mpilog_on && is_mpelog_on && state->is_active) { \ */
+#define MPE_LOG_STATE_END(comm) \
+    MPE_LOG_STATE_END_EXTENDED(comm, NULL)
+
 /*    if (is_mpilog_on && is_mpelog_on) { \ */
 #define MPE_LOG_SOLO_EVENT(commIDs,name) \
     if (is_mylog_on) { \
@@ -2837,7 +2846,7 @@
                                           state->start_evtID,
                                           state->final_evtID, 
                                           state->name, state->color,
-                                          NULL );
+                                          state->format );
             }
         }
         for ( idx = 0; idx < MPE_MAX_KNOWN_EVENTS; idx++ ) {
@@ -2846,7 +2855,7 @@
                 MPE_Describe_known_event( CLOG_CommIDs4World, 0,
                                           event->eventID,
                                           event->name, event->color,
-                                          NULL );
+                                          event->format );
             }
         }
     }
@@ -2935,6 +2944,7 @@
         event->name         = NULL;
         event->kind_mask    = 0;
         event->color        = "white";
+        event->format      = NULL;
     }
 
     /* Initialize all internal states */
@@ -2948,6 +2958,7 @@
         state->name         = NULL;
         state->kind_mask    = 0;
         state->color        = "white";
+        event->format      = NULL;
     }
 
     /* Should check environment and command-line for changes to allow_mask */
diff -ur mpich2-1.0.4p1/src/mpe2/src/wrappers/src/log_mpi_io.c mpich2-1.0.4p1-patched/src/mpe2/src/wrappers/src/log_mpi_io.c
--- mpich2-1.0.4p1/src/mpe2/src/wrappers/src/log_mpi_io.c	2006-02-15 00:10:16.000000000 +0100
+++ mpich2-1.0.4p1-patched/src/mpe2/src/wrappers/src/log_mpi_io.c	2006-09-29 09:47:16.000000000 +0200
@@ -8,7 +8,6 @@
 
     Also set MPE_MAX_KNOWN_STATES to 180
 */
-
 #define MPE_FILE_OPEN_ID 128
 #define MPE_FILE_CLOSE_ID 129
 #define MPE_FILE_DELETE_ID 130
@@ -66,6 +65,125 @@
 #define  MPIO_Request  MPI_Request
 #endif
 
+#define PVFS2_REQUEST_ID
+
+#ifdef PVFS2_REQUEST_ID
+#include <unistd.h>
+#include <stdio.h>
+
+#define PVFS2_MAX_HINT 100
+
+static int pvfs2_increment_id = 0;
+static char hostname[PVFS2_MAX_HINT] = "\0";
+
+#define MPE_LOG_STATE_END_BYTEBUF(comm) \
+    MPE_LOG_STATE_END_EXTENDED(comm, bytebuf)
+
+#define MPE_LOG_STATE_BEGIN_BYTEBUF(comm,name) \
+    MPE_LOG_STATE_BEGIN_EXTENDED(comm, name, bytebuf)
+
+#define CREATE_BYTEBUF \
+        MPE_LOG_BYTES bytebuf; \
+        /*buffer for logging of CallID*/ \
+        int bytebuf_pos = 0; /* position pointer for buffer */ \
+        int rank; \
+        PMPI_Comm_rank(MPI_COMM_WORLD, &rank); \
+        MPE_Log_pack( bytebuf, &bytebuf_pos, 'd', 1, & rank ); \
+        MPE_Log_pack( bytebuf, &bytebuf_pos, 'd', 1, & pvfs2_increment_id );
+
+#define CREATE_BYTEBUF_COMM \
+        MPE_LOG_BYTES bytebuf; \
+        /*buffer for logging of CallID*/ \
+        int bytebuf_pos = 0; /* position pointer for buffer */ \
+        int rank; \
+        PMPI_Comm_rank(comm, &rank); \
+        MPE_Log_pack( bytebuf, &bytebuf_pos, 'd', 1, & rank ); \
+        MPE_Log_pack( bytebuf, &bytebuf_pos, 'd', 1, & pvfs2_increment_id );
+
+#define ADD_FORMAT state->format="rank=%d,cid=%d";
+
+static int pvfs2_set_request_ID (MPI_Comm  comm, MPI_Info  * info, const char * io_type, int * added_info){
+  char value[PVFS2_MAX_HINT];
+  int rank;
+  
+  if( hostname[0] == 0 )
+  {
+    int ret;
+    ret = gethostname(hostname, PVFS2_MAX_HINT);
+    if(ret < 0)
+    {
+        fprintf(stderr, "gethostname could not determine hostname ! "
+            "Request ID can not transfer hostname to server \n");
+        hostname[0] = 0;
+    }
+  }
+  
+  if( comm != 0 )
+  {
+    PMPI_Comm_rank(comm, &rank);
+    snprintf(value, PVFS2_MAX_HINT, "host:%s,comm:%d,rank:%d,id:%d,op:%s", 
+             hostname, comm, rank, pvfs2_increment_id++,io_type);
+  }
+  else
+  {
+    PMPI_Comm_rank(MPI_COMM_WORLD, &rank);
+    snprintf(value, PVFS2_MAX_HINT, "host:%s,comm:%d,rank:%d,id:%d,op:%s", 
+             hostname,MPI_COMM_WORLD,rank,pvfs2_increment_id++,io_type);
+  }
+  
+  if (* info == MPI_INFO_NULL)
+  {
+    /*
+     * Create new info object ! This object has to be freed later with wipe_request_id
+     */
+    *added_info = 1;
+    MPI_Info_create(info);
+  }
+  else
+  {
+    *added_info = 0;
+  }
+  MPI_Info_set(*info, "REQUEST_ID", value);
+  
+  return 0;
+}
+
+
+static int pvfs2_set_request_ID_single_shot(MPI_File fh, MPI_Comm  comm, const char * io_type){
+  int added_info;
+  MPI_Info info = MPI_INFO_NULL;
+  pvfs2_set_request_ID(comm, & info, io_type, & added_info);
+  PMPI_File_set_info(fh, info);
+  MPI_Info_free(& info);
+  return 0;
+}
+
+
+static int pvfs2_wipe_request_ID (MPI_Info  * info, int added_info){
+  if( added_info)
+  {
+    MPI_Info_free(info);
+  }
+  return 0;
+}
+
+#define pvfs2_set_request_ID_wrapper(comm, info, io_type, added_info) \
+  pvfs2_set_request_ID(comm, info, io_type, added_info)
+#define pvfs2_wipe_request_ID_wrapper(info, added_info) \
+  pvfs2_wipe_request_ID(info, added_info)
+#define pvfs2_set_request_ID_single_shot_wrapper(fh, comm, io_type) \
+  pvfs2_set_request_ID_single_shot(fh, comm, io_type)
+
+#else
+  #define pvfs2_set_request_ID_wrapper(comm, info, io_type, added_info) 
+  #define pvfs2_wipe_request_ID_wrapper(info, added_info) 
+  #define pvfs2_set_request_ID_single_shot_wrapper(fh, comm, io_type) 
+
+  #define CREATE_BYTEBUF 
+  #define CREATE_BYTEBUF_COMM 
+  #define ADD_FORMAT
+#endif
+
 
 void MPE_Init_mpi_io( void )
 {
@@ -75,31 +193,37 @@
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_open";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_CLOSE_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_close";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_DELETE_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_delete";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_SET_SIZE_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_set_size";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_PREALLOCATE_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_preallocate";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_GET_SIZE_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_get_size";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_GET_GROUP_ID];
   state->kind_mask = MPE_KIND_FILE;
@@ -135,176 +259,211 @@
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_at";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_AT_ALL_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_at_all";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_AT_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_at";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_AT_ALL_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_at_all";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_IREAD_AT_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_iread_at";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_IWRITE_AT_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_iwrite_at";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_ALL_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_all";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_ALL_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_all";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_IREAD_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_iread";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_IWRITE_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_iwrite";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_SEEK_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_seek";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_GET_POSITION_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_get_position";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_GET_BYTE_OFFSET_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_get_byte_offset";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_SHARED_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_shared";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_SHARED_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_shared";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_IREAD_SHARED_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_iread_shared";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_IWRITE_SHARED_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_iwrite_shared";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_ORDERED_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_ordered";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_ORDERED_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_ordered";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_SEEK_SHARED_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_seek_shared";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_GET_POSITION_SHARED_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_get_position_shared";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_AT_ALL_BEGIN_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_at_all_begin";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_AT_ALL_END_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_at_all_end";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_AT_ALL_BEGIN_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_at_all_begin";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_AT_ALL_END_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_at_all_end";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_ALL_BEGIN_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_all_begin";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_ALL_END_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_all_end";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_ALL_BEGIN_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_all_begin";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_ALL_END_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_all_end";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_ORDERED_BEGIN_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_ordered_begin";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_READ_ORDERED_END_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_read_ordered_end";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_ORDERED_BEGIN_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_ordered_begin";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_WRITE_ORDERED_END_ID];
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_write_ordered_end";
   state->color = "brown:gray2";
+  ADD_FORMAT
   
   state = &states[MPE_FILE_GET_TYPE_EXTENT_ID];
   state->kind_mask = MPE_KIND_FILE;
@@ -330,30 +489,36 @@
   state->kind_mask = MPE_KIND_FILE;
   state->name = "MPI_File_sync";
   state->color = "brown:gray2";
+  ADD_FORMAT
 }
 
 
 int MPI_File_open( MPI_Comm  comm,char * filename,int  amode,MPI_Info  info,MPI_File * fh  )
 {
   int returnVal;
-
+  int added_info;
+  CREATE_BYTEBUF_COMM
+  pvfs2_set_request_ID_wrapper (comm, & info, "open", & added_info);
+  
 /*
     MPI_File_open - prototyping replacement for MPI_File_open
     Log the beginning and ending of the time spent in MPI_File_open calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_OPEN_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_OPEN_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
 #endif
   returnVal = PMPI_File_open( comm, filename, amode, info, fh );
+  pvfs2_wipe_request_ID_wrapper(& info, added_info);
+  
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -362,24 +527,29 @@
 int MPI_File_close( MPI_File * fh  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  /* Not really necessary right now, but maybe in the future, pvfs2 close is 
+  empty right now */
+  pvfs2_set_request_ID_single_shot_wrapper (*fh, 0, "close");
+  
 /*
     MPI_File_close - prototyping replacement for MPI_File_close
     Log the beginning and ending of the time spent in MPI_File_close calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_CLOSE_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_CLOSE_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
 #endif
   returnVal = PMPI_File_close( fh );
+
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -388,24 +558,28 @@
 int MPI_File_delete( char * filename,MPI_Info  info  )
 {
   int returnVal;
-
+  int added_info;
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_wrapper (0, & info, "delete", & added_info);
+  
 /*
     MPI_File_delete - prototyping replacement for MPI_File_delete
     Log the beginning and ending of the time spent in MPI_File_delete calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_DELETE_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_DELETE_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
 #endif
   returnVal = PMPI_File_delete( filename, info );
+  pvfs2_wipe_request_ID_wrapper(& info, added_info);
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -414,14 +588,16 @@
 int MPI_File_set_size( MPI_File  fh,MPI_Offset  size  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "set_size");
+  
 /*
     MPI_File_set_size - prototyping replacement for MPI_File_set_size
     Log the beginning and ending of the time spent in MPI_File_set_size calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_SET_SIZE_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_SET_SIZE_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -431,7 +607,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -440,14 +616,15 @@
 int MPI_File_preallocate( MPI_File  fh,MPI_Offset  size  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "preallocate");
 /*
     MPI_File_preallocate - prototyping replacement for MPI_File_preallocate
     Log the beginning and ending of the time spent in MPI_File_preallocate calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_PREALLOCATE_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_PREALLOCATE_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -457,7 +634,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -466,14 +643,15 @@
 int MPI_File_get_size( MPI_File  fh,MPI_Offset * size  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "get_size");
 /*
     MPI_File_get_size - prototyping replacement for MPI_File_get_size
     Log the beginning and ending of the time spent in MPI_File_get_size calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_GET_SIZE_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_GET_SIZE_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -483,7 +661,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -648,14 +826,16 @@
 int MPI_File_read_at( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_at");
+  
 /*
     MPI_File_read_at - prototyping replacement for MPI_File_read_at
     Log the beginning and ending of the time spent in MPI_File_read_at calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_AT_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_AT_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -665,7 +845,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -674,14 +854,16 @@
 int MPI_File_read_at_all( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_at_all");
+  
 /*
     MPI_File_read_at_all - prototyping replacement for MPI_File_read_at_all
     Log the beginning and ending of the time spent in MPI_File_read_at_all calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_AT_ALL_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_AT_ALL_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -691,7 +873,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -700,14 +882,16 @@
 int MPI_File_write_at( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_at");
+  
 /*
     MPI_File_write_at - prototyping replacement for MPI_File_write_at
     Log the beginning and ending of the time spent in MPI_File_write_at calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_AT_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_AT_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -717,7 +901,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -726,14 +910,15 @@
 int MPI_File_write_at_all( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_at_all");
 /*
     MPI_File_write_at_all - prototyping replacement for MPI_File_write_at_all
     Log the beginning and ending of the time spent in MPI_File_write_at_all calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_AT_ALL_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_AT_ALL_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -743,7 +928,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -752,14 +937,16 @@
 int MPI_File_iread_at( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "iread_at");
+  
 /*
     MPI_File_iread_at - prototyping replacement for MPI_File_iread_at
     Log the beginning and ending of the time spent in MPI_File_iread_at calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_IREAD_AT_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_IREAD_AT_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -769,7 +956,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -778,14 +965,15 @@
 int MPI_File_iwrite_at( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "iwrite_at");
 /*
     MPI_File_iwrite_at - prototyping replacement for MPI_File_iwrite_at
     Log the beginning and ending of the time spent in MPI_File_iwrite_at calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_IWRITE_AT_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_IWRITE_AT_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -795,7 +983,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -804,14 +992,15 @@
 int MPI_File_read( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read");
 /*
     MPI_File_read - prototyping replacement for MPI_File_read
     Log the beginning and ending of the time spent in MPI_File_read calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -821,7 +1010,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -830,14 +1019,15 @@
 int MPI_File_read_all( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_all");  
 /*
     MPI_File_read_all - prototyping replacement for MPI_File_read_all
     Log the beginning and ending of the time spent in MPI_File_read_all calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_ALL_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_ALL_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -847,7 +1037,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -856,14 +1046,16 @@
 int MPI_File_write( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write");
+  
 /*
     MPI_File_write - prototyping replacement for MPI_File_write
     Log the beginning and ending of the time spent in MPI_File_write calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -873,7 +1065,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -882,14 +1074,16 @@
 int MPI_File_write_all( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_all");
+  
 /*
     MPI_File_write_all - prototyping replacement for MPI_File_write_all
     Log the beginning and ending of the time spent in MPI_File_write_all calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_ALL_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_ALL_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -899,7 +1093,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -908,14 +1102,15 @@
 int MPI_File_iread( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "iread");
 /*
     MPI_File_iread - prototyping replacement for MPI_File_iread
     Log the beginning and ending of the time spent in MPI_File_iread calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_IREAD_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_IREAD_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -925,7 +1120,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -934,14 +1129,15 @@
 int MPI_File_iwrite( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "iwrite");
 /*
     MPI_File_iwrite - prototyping replacement for MPI_File_iwrite
     Log the beginning and ending of the time spent in MPI_File_iwrite calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_IWRITE_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_IWRITE_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -951,7 +1147,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -960,14 +1156,19 @@
 int MPI_File_seek( MPI_File  fh,MPI_Offset  offset,int  whence  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  /*
+   * Not needed for pvfs2 right now, but added 
+   */
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "seek");
+  
 /*
     MPI_File_seek - prototyping replacement for MPI_File_seek
     Log the beginning and ending of the time spent in MPI_File_seek calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_SEEK_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_SEEK_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -977,7 +1178,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1038,14 +1239,15 @@
 int MPI_File_read_shared( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_shared");
 /*
     MPI_File_read_shared - prototyping replacement for MPI_File_read_shared
     Log the beginning and ending of the time spent in MPI_File_read_shared calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_SHARED_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_SHARED_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1055,7 +1257,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1064,14 +1266,16 @@
 int MPI_File_write_shared( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_shared");
+  
 /*
     MPI_File_write_shared - prototyping replacement for MPI_File_write_shared
     Log the beginning and ending of the time spent in MPI_File_write_shared calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_SHARED_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_SHARED_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1081,7 +1285,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1090,14 +1294,16 @@
 int MPI_File_iread_shared( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "iread_shared");
+  
 /*
     MPI_File_iread_shared - prototyping replacement for MPI_File_iread_shared
     Log the beginning and ending of the time spent in MPI_File_iread_shared calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_IREAD_SHARED_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_IREAD_SHARED_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1107,7 +1313,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1116,14 +1322,16 @@
 int MPI_File_iwrite_shared( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "iwrite_shared");
+  
 /*
     MPI_File_iwrite_shared - prototyping replacement for MPI_File_iwrite_shared
     Log the beginning and ending of the time spent in MPI_File_iwrite_shared calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_IWRITE_SHARED_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_IWRITE_SHARED_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1133,7 +1341,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1142,14 +1350,16 @@
 int MPI_File_read_ordered( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_ordered");
+  
 /*
     MPI_File_read_ordered - prototyping replacement for MPI_File_read_ordered
     Log the beginning and ending of the time spent in MPI_File_read_ordered calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_ORDERED_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_ORDERED_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1159,7 +1369,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1168,14 +1378,15 @@
 int MPI_File_write_ordered( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_ordered");
 /*
     MPI_File_write_ordered - prototyping replacement for MPI_File_write_ordered
     Log the beginning and ending of the time spent in MPI_File_write_ordered calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_ORDERED_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_ORDERED_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1185,7 +1396,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1194,14 +1405,19 @@
 int MPI_File_seek_shared( MPI_File  fh,MPI_Offset  offset,int  whence  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  /*
+   * Not needed right now in pvfs2
+   */
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "seek_shared");
+  
 /*
     MPI_File_seek_shared - prototyping replacement for MPI_File_seek_shared
     Log the beginning and ending of the time spent in MPI_File_seek_shared calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_SEEK_SHARED_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_SEEK_SHARED_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1211,7 +1427,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1220,14 +1436,19 @@
 int MPI_File_get_position_shared( MPI_File  fh,MPI_Offset * offset  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+   /*
+    * Not needed right now in pvfs2
+    */
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "get_position_shared");
+  
 /*
     MPI_File_get_position_shared - prototyping replacement for MPI_File_get_position_shared
     Log the beginning and ending of the time spent in MPI_File_get_position_shared calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_GET_POSITION_SHARED_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_GET_POSITION_SHARED_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1237,7 +1458,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1246,14 +1467,16 @@
 int MPI_File_read_at_all_begin( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_at_all_begin");
+  
 /*
     MPI_File_read_at_all_begin - prototyping replacement for MPI_File_read_at_all_begin
     Log the beginning and ending of the time spent in MPI_File_read_at_all_begin calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_AT_ALL_BEGIN_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_AT_ALL_BEGIN_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1263,7 +1486,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1272,14 +1495,16 @@
 int MPI_File_read_at_all_end( MPI_File  fh,void * buf,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_at_all_end");
+  
 /*
     MPI_File_read_at_all_end - prototyping replacement for MPI_File_read_at_all_end
     Log the beginning and ending of the time spent in MPI_File_read_at_all_end calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_AT_ALL_END_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_AT_ALL_END_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1289,7 +1514,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1298,14 +1523,16 @@
 int MPI_File_write_at_all_begin( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_at_all_begin");
+  
 /*
     MPI_File_write_at_all_begin - prototyping replacement for MPI_File_write_at_all_begin
     Log the beginning and ending of the time spent in MPI_File_write_at_all_begin calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_AT_ALL_BEGIN_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_AT_ALL_BEGIN_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1315,7 +1542,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1324,14 +1551,16 @@
 int MPI_File_write_at_all_end( MPI_File  fh,void * buf,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_at_all_end");
+  
 /*
     MPI_File_write_at_all_end - prototyping replacement for MPI_File_write_at_all_end
     Log the beginning and ending of the time spent in MPI_File_write_at_all_end calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_AT_ALL_END_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_AT_ALL_END_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1341,7 +1570,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1350,14 +1579,16 @@
 int MPI_File_read_all_begin( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_all_begin");
+  
 /*
     MPI_File_read_all_begin - prototyping replacement for MPI_File_read_all_begin
     Log the beginning and ending of the time spent in MPI_File_read_all_begin calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_ALL_BEGIN_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_ALL_BEGIN_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1367,7 +1598,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1376,14 +1607,16 @@
 int MPI_File_read_all_end( MPI_File  fh,void * buf,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_all_end");
+  
 /*
     MPI_File_read_all_end - prototyping replacement for MPI_File_read_all_end
     Log the beginning and ending of the time spent in MPI_File_read_all_end calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_ALL_END_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_ALL_END_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1393,7 +1626,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1402,6 +1635,8 @@
 int MPI_File_write_all_begin( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_all_begin");
 
 /*
     MPI_File_write_all_begin - prototyping replacement for MPI_File_write_all_begin
@@ -1409,7 +1644,7 @@
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_ALL_BEGIN_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_ALL_BEGIN_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1419,7 +1654,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1428,14 +1663,16 @@
 int MPI_File_write_all_end( MPI_File  fh,void * buf,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_all_end");
+  
 /*
     MPI_File_write_all_end - prototyping replacement for MPI_File_write_all_end
     Log the beginning and ending of the time spent in MPI_File_write_all_end calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_ALL_END_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_ALL_END_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1445,7 +1682,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1454,14 +1691,16 @@
 int MPI_File_read_ordered_begin( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_ordered_begin");
+  
 /*
     MPI_File_read_ordered_begin - prototyping replacement for MPI_File_read_ordered_begin
     Log the beginning and ending of the time spent in MPI_File_read_ordered_begin calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_ORDERED_BEGIN_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_ORDERED_BEGIN_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1471,7 +1710,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1480,14 +1719,16 @@
 int MPI_File_read_ordered_end( MPI_File  fh,void * buf,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "read_ordered_end");
+  
 /*
     MPI_File_read_ordered_end - prototyping replacement for MPI_File_read_ordered_end
     Log the beginning and ending of the time spent in MPI_File_read_ordered_end calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_READ_ORDERED_END_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_READ_ORDERED_END_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1497,7 +1738,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1506,14 +1747,15 @@
 int MPI_File_write_ordered_begin( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_ordered_begin");
 /*
     MPI_File_write_ordered_begin - prototyping replacement for MPI_File_write_ordered_begin
     Log the beginning and ending of the time spent in MPI_File_write_ordered_begin calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_ORDERED_BEGIN_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_ORDERED_BEGIN_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1523,7 +1765,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1532,14 +1774,15 @@
 int MPI_File_write_ordered_end( MPI_File  fh,void * buf,MPI_Status * status  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "write_ordered_end");
 /*
     MPI_File_write_ordered_end - prototyping replacement for MPI_File_write_ordered_end
     Log the beginning and ending of the time spent in MPI_File_write_ordered_end calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_WRITE_ORDERED_END_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_WRITE_ORDERED_END_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1549,7 +1792,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
@@ -1636,14 +1879,16 @@
 int MPI_File_sync( MPI_File  fh  )
 {
   int returnVal;
-
+  CREATE_BYTEBUF
+  pvfs2_set_request_ID_single_shot_wrapper (fh, 0, "sync");
+  
 /*
     MPI_File_sync - prototyping replacement for MPI_File_sync
     Log the beginning and ending of the time spent in MPI_File_sync calls.
 */
   MPE_LOG_STATE_DECL
 
-  MPE_LOG_STATE_BEGIN(MPE_COMM_NULL, MPE_FILE_SYNC_ID)
+  MPE_LOG_STATE_BEGIN_BYTEBUF(MPE_COMM_NULL, MPE_FILE_SYNC_ID)
   
 #if defined( MAKE_SAFE_PMPI_CALL )
     MPE_LOG_OFF
@@ -1653,7 +1898,7 @@
     MPE_LOG_ON
 #endif
 
-  MPE_LOG_STATE_END(MPE_COMM_NULL)
+  MPE_LOG_STATE_END_BYTEBUF(MPE_COMM_NULL)
 
 
   return returnVal;
