dnl **************************************************************
dnl PVFS2 AUTOCONF SCRIPT
dnl
dnl Process this file with autoconf to produce a configure script.
dnl You may need to use autoheader as well if changing any DEFINEs

dnl sanity checks, output header, location of scripts used here
AC_INIT(include/pvfs2-types.h)
AC_CONFIG_HEADER(pvfs2-config.h)
AC_CONFIG_AUX_DIR(maint/config)

dnl PVFS2 versioning information
PVFS2_MAJOR=0
PVFS2_MINOR=0
PVFS2_SUB=9
PVFS2_PRE="pre1"

AM_INIT_AUTOMAKE(pvfs2, $PVFS2_MAJOR.$PVFS2_MINOR.$PVFS2_SUB$PVFS2_PRE)

PVFS2_VERSION=$PVFS2_MAJOR.$PVFS2_MINOR.$PVFS2_SUB$PVFS2_PRE
AC_SUBST(PVFS2_VERSION)
AC_DEFINE_UNQUOTED(PVFS2_VERSION_MAJOR, $PVFS2_MAJOR, major version number)
AC_DEFINE_UNQUOTED(PVFS2_VERSION_MINOR, $PVFS2_MINOR, minor version number)
AC_DEFINE_UNQUOTED(PVFS2_VERSION_SUB, $PVFS2_SUB, sub version number)

dnl Checks for host type
dnl Ensures we can compile on this OS
AC_CANONICAL_HOST

dnl NOTE: removing the linux-gnu host check for now; we may want to put it back
dnl before releaseing any code, though...  -Phil
dnl 
dnl AC_MSG_CHECKING(whether we know how to compile for this OS)
dnl if test x$host_os != xlinux-gnu; then AC_MSG_ERROR($host_os not supported.)
dnl else AC_MSG_RESULT(yes)
dnl fi

dnl NOTE: for now, if we're running on linux-gnu and we find
dnl glibc version 2.3.2, we assume the aio callbacks work.
dnl this should really check for 2.3.2 or later -- probably in
dnl more portable format as well.
MISC_TROVE_FLAGS=""
if test x$host_os = xlinux-gnu; then
    AC_MSG_CHECKING(glibc version for working aio callbacks)
    libc=`echo /lib/libc.so.* | sed 1q`
    if test x$libc != x ; then
	if test -x $libc ; then
	    vers=`$libc 2> /dev/null | sed 's/.*version \(.*\),.*/\1/; q'`
            if test x$vers = x; then
               vers=`strings /lib/libc.so.* | grep GLIBC | tail -n 2 | grep -v PRIVATE | cut -b 7-`
            fi
            majorminor=`echo $vers | cut -b 1-3`
            sub=`echo $vers | cut -b 5`
            if test x$majorminor = x2.3; then
                if test $sub -gt 1; then
		    MISC_TROVE_FLAGS="-D__PVFS2_TROVE_AIO_THREADED__"
                fi
	    fi
        else
            vers=`strings /lib/libc.so.* | grep GLIBC | tail -n 2 | grep -v PRIVATE | cut -b 7-`
            majorminor=`echo $vers | cut -b 1-3`
            sub=`echo $vers | cut -b 5`
            if test x$majorminor = x2.3; then
                if test $sub -gt 1; then
		    MISC_TROVE_FLAGS="-D__PVFS2_TROVE_AIO_THREADED__"
                fi
	    fi
	fi
    fi
fi
if test x$MISC_TROVE_FLAGS = x ; then
    AC_MSG_RESULT(no)
else
    AC_MSG_RESULT(yes)
fi
AC_SUBST(MISC_TROVE_FLAGS)

dnl Check byte ordering
AC_C_BIGENDIAN

dnl Check size of pointer type; needed by id-generator
AC_CHECK_SIZEOF(void *)

dnl Options for debugging
dnl This particular one enables tracing of memory allocation and
dnl    freeing with the mtrace tool
AC_ARG_WITH(mtrace,
[  --with-mtrace           Use mtrace for detecting memory leaks (must setenv MALLOC_TRACE to output file name).],
CFLAGS="$CFLAGS -include mcheck.h"
AC_DEFINE(WITH_MTRACE, 1, Define if mtrace memory leak detection was enabled)
)

dnl This particular one enables berkeley db to emit detected errors
AC_ARG_WITH(berkdb-debug,
[  --with-berkdb-debug     Use berkeley db error reporting if detected).],
AC_DEFINE(BERKDB_ERROR_REPORTING, 1, Define if berkeley db error reporting was enabled)
)

dnl
dnl Enables the kernel module to build if the appropriate
dnl linux-2.6.x path is specified
dnl
AC_ARG_WITH(kernel,
[  --with-kernel=src_path  Build pvfs2 kernel module against specified src (2.6.x only).], LINUX_KERNEL_SRC="$withval",LINUX_KERNEL_SRC="")

BUILD_TOP_LEVEL=`pwd`
SRC_TOP_LEVEL=$srcdir
AC_SUBST(SRC_TOP_LEVEL)
AC_SUBST(BUILD_TOP_LEVEL)
AC_SUBST(LINUX_KERNEL_SRC)

dnl More options
AC_ARG_ENABLE(fast,
[  --enable-fast           Disable optional debugging, enable optimizations.],
CFLAGS="$CFLAGS -DNDEBUG -O3 -DGOSSIP_DISABLE_DEBUG",
CFLAGS="$CFLAGS -g"
)

AC_ARG_ENABLE(profiling,
[  --enable-profiling      Enable profiling (using gprof).                     *** not yet working ***],
CFLAGS="$CFLAGS -pg -fprofile-arcs",
)

AC_ARG_ENABLE(coverage,
[  --enable-coverage       Enable coverage analysis (disables optimizations).  *** not yet working ***],
CFLAGS="$CFLAGS -fprofile-arcs -ftest-coverage -O0",
)

AC_ARG_ENABLE(strict,
[  --enable-strict         Turn on strict debugging with gcc],
CFLAGS="$CFLAGS -Wall -O2 -Wstrict-prototypes -Wmissing-prototypes -Wundef -Wpointer-arith -Wbad-function-cast")

dnl Check if user actually wants to see all our build output (compiles, links, etc.).
AC_ARG_ENABLE(verbose-build,
[  --enable-verbose-build  Enables full output during build process (compiles, etc.).],
,
QUIET_COMPILE=1)

dnl a mechanism to turn off perf counters
AC_ARG_ENABLE(perf-counters,
[  --disable-perf-counters Disables pvfs2-server performance counters],
[if test x$enableval = xno; then
    CFLAGS="$CFLAGS -D__PVFS2_DISABLE_PERF_COUNTERS__"
fi]
,)

dnl a mechanism to turn off disk I/O for testing/debugging
AC_ARG_ENABLE(disk-io,
[  --disable-disk-io       Disables pvfs2-server disk I/O (for testing)],
[if test x$enableval = xno; then
    CFLAGS="$CFLAGS -D__PVFS2_DISABLE_DISK_IO__"
fi]
,)

dnl enables a hack to print back traces out of segfault signal handler
AC_ARG_ENABLE(segv-backtrace,
[  --enable-segv-backtrace Enables back traces in segfault signal handler],
CFLAGS="$CFLAGS -D__PVFS2_SEGV_BACKTRACE__"
,)


AC_SUBST(QUIET_COMPILE)

dnl Check for utilities that we need during the build process
AC_PROG_INSTALL
AC_PROG_CC
AC_PROG_CPP
AC_CHECK_PROG(HAVE_PERL, perl, yes, no)
AC_CHECK_PROG(HAVE_FIND, find, yes, no)
AC_CHECK_PROG(HAVE_BISON, bison, yes, no)
AC_CHECK_PROG(HAVE_FLEX, flex, yes, no)

dnl See if CC is a GNU compiler.  This may require a real test in future
dnl versions of autoconf.  In 2.13 it is a side-effect of AC_PROG_CC.
GNUC=
if test x$GCC = xyes ; then
    GNUC=1
fi
AC_SUBST(GNUC)

AC_ARG_WITH(efence,
[  --with-efence           Use electric fence for malloc debugging.],
AC_CHECK_LIB(efence,malloc)
)

dnl
dnl make sure that required db development package is installed
dnl and valid; path can be specified at configure time
dnl

AC_ARG_WITH(db,
	[  --with-db=<dir>         Location of installed DB package (default=/usr)],
	LDFLAGS="${LDFLAGS} -L$withval/lib" CFLAGS="${CFLAGS} -I$withval/include")

AC_MSG_CHECKING("for db library")
oldlibs=$LIBS
for lib in db4  db3  db  notfound; do
	LIBS="${oldlibs} -l$lib"
	AC_TRY_LINK(
		[#include <db.h>],
		[DB *dbp; db_create(&dbp, NULL, 0);],
		[break])
done
if test x$lib == xnotfound ; then
	AC_MSG_ERROR(could not find DB libraries)
else
	AC_MSG_RESULT($lib)
fi

dnl See if we have a new enough version of Berkeley DB; needed for
dnl    compilation of trove-dbpf component
dnl AC_MSG_CHECKING(whether version of Berkeley DB is new enough)
dnl	AC_TRY_COMPILE([
dnl	#include <db.h>
dnl	], [
dnl	#if DB_VERSION_MAJOR < 4
dnl		#error "DB_VERSION_MAJOR < 4; need newer Berkeley DB implementation"
dnl	#endif
dnl	], AC_MSG_RESULT(yes),
dnl	AC_MSG_RESULT(no)
dnl		AC_MSG_ERROR(Need newer (4.x.x or later) version of Berkeley DB.
dnl try: http://www.sleepycat.com/download/index.shtml
dnl or: /parl/pcarns/rpms/db4-4.0.14-1mdk.src.rpm (to build rpm))
dnl	)

dnl Test to check for unknown third parameter to DB stat (four parameters total)
AC_MSG_CHECKING(for four-parameter DB stat)
AC_TRY_COMPILE([
#include <db.h>
], [
int ret;
DB *db;
u_int32_t flags;

ret = db->stat(db, NULL, NULL, flags);
], AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_UNKNOWN_PARAMETER_TO_DB_STAT, 1,
Define if DB stat function takes extra parameter),
AC_MSG_RESULT(no))

dnl Test to check for txnid parameter to DB open (DB4.1+)
AC_MSG_CHECKING(for txnid parameter to DB open function)
AC_TRY_COMPILE([
#include <db.h>
], [
int ret;
DB *db;
DB_TXN *txnid;
char *file;
char *database;
DBTYPE type;
u_int32_t flags;
int mode;

ret = db->open(db, txnid, file, database, type, flags, mode);
], AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_TXNID_PARAMETER_TO_DB_OPEN, 1,
Define if DB open function takes a txnid parameter),
AC_MSG_RESULT(no))

dnl configure options for GM install path
AC_ARG_WITH(gm,[  --with-gm=<dir>         Location of the GM installation (default=/opt/gm)],
    GM_HOME="$withval",GM_HOME="/opt/gm")

AC_SUBST(GM_HOME)

dnl look for GM headers
CPPFLAGS_OLD="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I ${GM_HOME}/include -I ${GM_HOME}/include/gm"
AC_CHECK_HEADER(gm.h,
	AC_DEFINE(HAVE_GM, 1, Define if GM is present)
	BUILD_GM="1"
	)
CPPFLAGS="$CPPFLAGS_OLD"

AC_SUBST(BUILD_GM)

dnl configure options for IB install path
AC_ARG_WITH(ib,[  --with-ib=<dir>         Location of the IB installation (default=/usr/mellanox)],
    IB_HOME="$withval",IB_HOME="/usr/mellanox")
CPPFLAGS_OLD="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I ${IB_HOME}/include"
AC_CHECK_HEADER(vapi.h,
	AC_DEFINE(HAVE_IB, 1, Define if IB is present)
	BUILD_IB=1)
CPPFLAGS="$CPPFLAGS_OLD"
AC_SUBST(IB_HOME)
AC_SUBST(BUILD_IB)

AC_ARG_WITH(mpi, 
[  --with-mpi=<dir>        Location of the MPI installation],
    if test x$withval = xyes; then
	AC_MSG_ERROR(--with-mpi must be given a pathname)
    else
	MPICC="${withval}/bin/mpicc"
	BUILD_MPI="1"
    fi
)

MPI_GNUC=
if test x$BUILD_MPI = x1; then
    AC_MSG_CHECKING(whether the mpicc compiler works)
    saveCC="$CC"
    CC="$MPICC"
    AC_TRY_COMPILE([#include <mpi.h>], [int ret = MPI_Init(0, (void*)0)],
	AC_MSG_RESULT(yes),
	AC_MSG_RESULT(no)
	AC_MSG_ERROR($CC doesn't appear to be a valid MPI compiler)
    )
    dnl See if mpicc is a GNU compiler.
    AC_MSG_CHECKING(whether mpicc is a GNU compiler)
    AC_TRY_COMPILE([
    #ifndef __GNUC__
	   choke me
    #endif
    ], [],
	AC_MSG_RESULT(yes)
	MPI_GNUC=1
	,
	AC_MSG_RESULT(no)
    )
    CC="$saveCC"
    AC_SUBST(MPICC)
    AC_SUBST(BUILD_MPI)
fi
AC_SUBST(MPI_GNUC)

dnl if we use functions that might not be on every platform, add them here
dnl the prototypes for some functions are exposed only after defining something
dnl for example, strnlen needs _GNU_SOURCE defined 

AC_CHECK_FUNCS(strnlen, 
	AC_DEFINE(_GNU_SOURCE)
	AC_DEFINE(HAVE_STRNLEN)
)
dnl for regular functions, add them to the CHECK_FUNCS
AC_CHECK_FUNCS(strtoull)
AC_CHECK_FUNCS(strstr)

dnl check for getmntent(), special test
AC_FUNC_GETMNTENT

dnl if we use headers that might not be on every platform, add them here
AC_CHECK_HEADERS(malloc.h)
AC_CHECK_HEADERS(mntent.h)

dnl this is a special case, used to key off options controlling gossip
dnl   backtrace capability
AC_CHECK_HEADERS(execinfo.h,
LDFLAGS="$LDFLAGS -rdynamic"
CFLAGS="$CFLAGS -DGOSSIP_ENABLE_BACKTRACE"
)

dnl --
dnl Check for SDL
AC_MSG_CHECKING([for SDL])
SDL_CONFIG=`which sdl-config 2> /dev/null`
if ! test -z $SDL_CONFIG && test -x $SDL_CONFIG; then
   AC_MSG_RESULT(yes)
   SDL_VERSION=`sdl-config --version`
   VISCFLAGS=`sdl-config --cflags`
   VISCLIBS=`sdl-config --libs`

   dnl We also need SDL ttf support
   dnl only define BUILD_VIS if we have all required parts
   AC_CHECK_HEADERS(SDL_ttf.h,
       [BUILD_VIS="1"
        CPPFLAGS="$CPPFLAGS $VISCFLAGS"],
        [AC_CHECK_HEADERS(SDL/SDL_ttf.h,
            [BUILD_VIS="1"
            CPPFLAGS="$CPPFLAGS $VISCFLAGS"],)],
)

   AC_SUBST(BUILD_VIS)
   AC_SUBST(VISCFLAGS)
   AC_SUBST(VISLIBS)
else
   AC_MSG_RESULT(no)
fi

dnl create any missing subdirectories that wouldn't be created
dnl by AC_OUTPUT below (which won't create intermediate dirs).
for d in src/apps src/io src/common src/client src/kernel test/common \
	test/io test/client doc test/correctness/pts test/kernel ; do
	install -d $d;
done

dnl output final version of top level makefile and subdirectory
dnl    makefile includes
AC_OUTPUT(Makefile
module.mk
src/apps/admin/module.mk
src/apps/vis/module.mk
src/io/trove/module.mk
src/io/trove/trove-handle-mgmt/module.mk
src/io/trove/trove-dbpf/module.mk
src/common/misc/module.mk
src/common/quickhash/module.mk
src/common/quicklist/module.mk
src/common/dotconf/module.mk
src/common/id-generator/module.mk
src/common/gossip/module.mk
src/common/gen-locks/module.mk
src/common/llist/module.mk
src/common/statecomp/module.mk
src/io/bmi/module.mk
src/io/bmi/bmi_tcp/module.mk
src/io/bmi/bmi_gm/module.mk
src/io/bmi/bmi_ib/module.mk
src/io/description/module.mk
src/io/flow/module.mk
src/io/flow/flowproto-bmi-trove/module.mk
src/io/flow/flowproto-template/module.mk
src/io/flow/flowproto-dump-offsets/module.mk
src/io/flow/flowproto-bmi-cache/module.mk
src/io/buffer/module.mk
src/io/job/module.mk
src/io/dev/module.mk
src/proto/module.mk
src/server/module.mk
src/server/request-scheduler/module.mk
src/client/sysint/module.mk
src/proto/contig/module.mk
src/kernel/linux-2.6/module.mk
src/kernel/linux-2.6/Makefile
test/io/trove/module.mk
test/io/buffer/module.mk
test/common/quicklist/module.mk
test/common/id-generator/module.mk
test/common/gossip/module.mk
test/common/gen-locks/module.mk
test/common/misc/module.mk
test/io/bmi/module.mk
test/io/description/module.mk
test/io/flow/module.mk
test/io/job/module.mk
test/io/dev/module.mk
test/client/sysint/module.mk
test/client/mpi-io/module.mk
test/proto/module.mk
test/server/module.mk
test/server/request-scheduler/module.mk
test/correctness/pts/module.mk
test/common/pav/configfile.sample
test/kernel/linux-2.6/module.mk
doc/coding/module.mk
doc/design/module.mk
doc/random/module.mk
doc/module.mk
maint/mpi-depend.sh
examples/pvfs2-server.rc
)

