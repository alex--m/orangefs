dnl **************************************************************
dnl PVFS2 AUTOCONF SCRIPT
dnl
dnl Process this file with autoconf to produce a configure script.
dnl You may need to use autoheader as well if changing any DEFINEs

dnl sanity checks, output header, location of scripts used here
AC_INIT(include/pvfs2-types.h)
AC_CONFIG_HEADER(pvfs2-config.h)
AC_CONFIG_AUX_DIR(maint/config)

dnl Checks for host type
dnl Ensures we can compile on this OS
AC_CANONICAL_HOST
AC_MSG_CHECKING(whether we know how to compile for this OS)
if test x$host_os != xlinux-gnu; then AC_MSG_ERROR($host_os not supported.)
else AC_MSG_RESULT(yes)
fi

dnl Options for debugging
dnl This particular one enables tracing of memory allocation and
dnl    freeing with the mtrace tool
AC_ARG_WITH(mtrace,
[  --with-mtrace                  Use mtrace for detecting memory leaks (must setenv MALLOC_TRACE to output file name).],
CFLAGS="$CFLAGS -imcheck.h"
AC_DEFINE(WITH_MTRACE, 1, Define if mtrace memory leak detection was enabled)
)

dnl More options
AC_ARG_ENABLE(fast,
[  --enable-fast                  Disable optional debugging, enable optimizations.],
CFLAGS="$CFLAGS -DNDEBUG -O3 -DGOSSIP_DISABLE_DEBUG",
CFLAGS="$CFLAGS -g"
)

AC_ARG_ENABLE(profiling,
[  --enable-profiling             Enable profiling (using gprof).                     *** not yet working ***],
CFLAGS="$CFLAGS -pg -fprofile-arcs",
)

AC_ARG_ENABLE(coverage,
[  --enable-coverage              Enable coverage analysis (disables optimizations).  *** not yet working ***],
CFLAGS="$CFLAGS -fprofile-arcs -ftest-coverage -O0",
)

dnl Check for utilities that we need during the build process
AC_PROG_INSTALL
AC_PROG_CC
AC_PROG_CPP
AC_CHECK_PROG(HAVE_PERL, perl, yes, no)
AC_CHECK_PROG(HAVE_FIND, find, yes, no)
AC_CHECK_PROG(HAVE_BISON, bison, yes, no)
AC_CHECK_PROG(HAVE_FLEX, flex, yes, no)

AC_ARG_WITH(efence,
[  --with-efence                  Use electric fence for malloc debugging.],
AC_CHECK_LIB(efence,malloc)
)

dnl See if we have a new enough version of Berkeley DB; needed for
dnl    compilation of trove-dbpf component
dnl AC_MSG_CHECKING(whether version of Berkeley DB is new enough)
dnl	AC_TRY_COMPILE([
dnl	#include <db.h>
dnl	], [
dnl	#if DB_VERSION_MAJOR < 4
dnl		#error "DB_VERSION_MAJOR < 4; need newer Berkeley DB implementation"
dnl	#endif
dnl	], AC_MSG_RESULT(yes),
dnl	AC_MSG_RESULT(no)
dnl		AC_MSG_ERROR(Need newer (4.x.x or later) version of Berkeley DB.
dnl try: http://www.sleepycat.com/download/index.shtml
dnl or: /parl/pcarns/rpms/db4-4.0.14-1mdk.src.rpm (to build rpm))
dnl	)

dnl Test to check for unknown third parameter to DB stat (four parameters total)
AC_MSG_CHECKING(for four-parameter DB stat)
AC_TRY_COMPILE([
#include <db.h>
], [
int ret;
DB *db;
u_int32_t flags;

ret = db->stat(db, NULL, NULL, flags);
], AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_UNKNOWN_PARAMETER_TO_DB_STAT, 1,
Define if DB stat function takes extra parameter),
AC_MSG_RESULT(no))

dnl Test to check for txnid parameter to DB open (DB4.1+)
AC_MSG_CHECKING(for txnid parameter to DB open function)
AC_TRY_COMPILE([
#include <db.h>
], [
int ret;
DB *db;
DB_TXN *txnid;
char *file;
char *database;
DBTYPE type;
u_int32_t flags;
int mode;

ret = db->open(db, txnid, file, database, type, flags, mode);
], AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_TXNID_PARAMETER_TO_DB_OPEN, 1,
Define if DB open function takes a txnid parameter),
AC_MSG_RESULT(no))

dnl configure options for GM install path
AC_ARG_WITH(gm,--with-gm=<dir>           Location of the GM binary tree
(default=/opt/gm),GM_HOME="$withval",GM_HOME="/opt/gm")

AC_SUBST(GM_HOME)

dnl look for GM headers
CPPFLAGS_OLD="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I ${GM_HOME}/include"
AC_CHECK_HEADER(gm.h,
	AC_DEFINE(HAVE_GM, 1, Define if GM is present)
	BUILD_GM="1"
	)
CPPFLAGS="$CPPFLAGS_OLD"

AC_SUBST(BUILD_GM)

dnl create any missing subdirectories that wouldn't be created
dnl by AC_OUTPUT below (which won't create intermediate dirs).
install -d src/apps src/io src/common src/client test/common test/io test/client doc test/correctness/pts

dnl output final version of top level makefile and subdirectory
dnl    makefile includes
AC_OUTPUT(Makefile
src/apps/admin/module.mk
src/io/trove/module.mk
src/io/trove/trove-handle-mgmt/module.mk
src/io/trove/trove-dbpf/module.mk
src/common/misc/module.mk
src/common/quickhash/module.mk
src/common/quicklist/module.mk
src/common/dotconf/module.mk
src/common/id-generator/module.mk
src/common/gossip/module.mk
src/common/gen-locks/module.mk
src/common/llist/module.mk
src/common/statecomp/module.mk
src/io/bmi/module.mk
src/io/bmi/bmi_tcp/module.mk
src/io/bmi/bmi_gm/module.mk
src/io/description/module.mk
src/io/flow/module.mk
src/io/flow/flowproto-bmi-trove/module.mk
src/io/flow/flowproto-template/module.mk
src/io/flow/flowproto-dump-offsets/module.mk
src/io/job/module.mk
src/io/dev/module.mk
src/proto/module.mk
src/server/module.mk
src/server/request-scheduler/module.mk
src/client/sysint/module.mk
src/client/unix-io/module.mk
src/proto/contig/module.mk
test/io/trove/module.mk
test/common/quicklist/module.mk
test/common/id-generator/module.mk
test/common/gossip/module.mk
test/common/gen-locks/module.mk
test/io/bmi/module.mk
test/io/description/module.mk
test/io/flow/module.mk
test/io/job/module.mk
test/client/sysint/module.mk
test/proto/module.mk
test/server/module.mk
test/server/request-scheduler/module.mk
test/correctness/pts/module.mk
doc/coding/module.mk
doc/design/module.mk
doc/random/module.mk
)


