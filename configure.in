dnl **************************************************************
dnl PVFS2 AUTOCONF SCRIPT
dnl
dnl Process this file with autoconf to produce a configure script.
dnl You may need to use autoheader as well if changing any DEFINEs

dnl sanity checks, output header, location of scripts used here
AC_INIT(include/pvfs2-types.h)
AC_PREREQ(2.59)
AC_CONFIG_AUX_DIR(maint/config)

dnl
dnl for test builds, insert the build date and time information into
dnl into the version; for official releases, clear the PVFS2_PRE line
dnl
dnl PVFS2 versioning information.  
dnl An @ in the date string can confuse e.g. scp and 'make kmod'
CONFIGURE_TIME=`date -u +"%Y-%m-%d-%H%M%S"`
PVFS2_MAJOR=2
PVFS2_MINOR=6
PVFS2_SUB=3
PVFS2_PRE=""
#PVFS2_PRE="pre1-$CONFIGURE_TIME"

PVFS2_VERSION=$PVFS2_MAJOR.$PVFS2_MINOR.$PVFS2_SUB$PVFS2_PRE
AC_SUBST(PVFS2_VERSION)
AC_DEFINE_UNQUOTED(PVFS2_VERSION_MAJOR, $PVFS2_MAJOR, major version number)
AC_DEFINE_UNQUOTED(PVFS2_VERSION_MINOR, $PVFS2_MINOR, minor version number)
AC_DEFINE_UNQUOTED(PVFS2_VERSION_SUB, $PVFS2_SUB, sub version number)

dnl Checks for host type
dnl Ensures we can compile on this OS
AC_CANONICAL_HOST

USR_CFLAGS=$CFLAGS
if test "x$USR_CFLAGS" = "x"; then
	USR_CFLAGS_SET=no
fi

AC_CONFIG_HEADER(pvfs2-config.h)

AC_CHECK_HEADER([sys/vfs.h],
		[AC_DEFINE(HAVE_SYS_VFS_H, 1, Define if sys/vfs.h exists)])
AC_CHECK_HEADER([sys/mount.h],
		[AC_DEFINE(HAVE_SYS_MOUNT_H, 1, Define if sys/mount.h exists)])

AC_CHECK_HEADERS([mntent.h, fstab.h])

AC_CHECK_HEADERS(stdarg.h)

AC_CHECK_HEADERS(attr/xattr.h)
AC_CHECK_HEADERS(sys/xattr.h)

AC_CHECK_SIZEOF([long int])

dnl Check for utilities that we need during the build process
AC_PROG_INSTALL
AC_PROG_CC

AC_MSG_CHECKING([for required gcc])
if test "x$GCC" = "x"; then
	AC_MSG_ERROR(no)
fi

CFLAGS=$USR_CFLAGS

AC_PROG_CPP
AC_CHECK_PROG(HAVE_PERL, perl, yes, no)
AC_CHECK_PROG(HAVE_FIND, find, yes, no)
AC_CHECK_PROG(HAVE_BISON, bison, yes, no)
AC_CHECK_PROG(HAVE_FLEX, flex, yes, no)

if test $host != $build; then
  AC_CHECK_PROGS(BUILD_CC, gcc cc)
else
	BUILD_CC=$CC
fi

AC_SUBST(BUILD_CC)

dnl a mechanism to turn off threads in the client library
AC_MSG_CHECKING([for client library thread safety support])
AC_ARG_ENABLE(thread-safety,
[  --disable-thread-safety Disables thread safety in the client library],
[if test "x$enableval" = "xno" ; then
    LIBCFLAGS="$LIBCFLAGS -D__GEN_NULL_LOCKING__"
    THREAD_LIB=""
    AC_MSG_RESULT(no)
fi],
[   LIBCFLAGS="$LIBCFLAGS -D__GEN_POSIX_LOCKING__"
    THREAD_LIB="-lpthread"
    AC_MSG_RESULT(yes) ])

AC_SUBST(LIBCFLAGS)
AC_SUBST(THREAD_LIB)

dnl a mechanism to disable building the PVFS2 server
AC_ARG_ENABLE(server,
[  --disable-server Disables building of PVFS2 server],
[if test "x$enableval" = "xyes" ; then
    BUILD_SERVER=1
    NEED_BERKELEY_DB=yes
else
    BUILD_SERVER=""
fi],
    BUILD_SERVER=1
    NEED_BERKELEY_DB=yes)
AC_SUBST(BUILD_SERVER)

AC_ARG_WITH(openssl,
	[  --with-openssl=<dir>  Build with openssl (the default).  <dir> defaults to /usr
	   --without-openssl     Don't build with openssl.
	],
	[AX_OPENSSL(${withval})],
	[AX_OPENSSL_OPTIONAL])

dnl a mechanism to turn off memory usage statistics in karma (may be
dnl confusing for some classes of users)
AC_ARG_ENABLE(karma-mem-usage-stats,
[  --disable-karma-mem-usage-stats Disables memory usage stats in karma],
[if test "x$enableval" = "xno" ; then
    CFLAGS="$CFLAGS -D__KARMA_DISABLE_MEM_USAGE__"
fi]
,)

dnl a mechanism to turn off perf counters
AC_ARG_ENABLE(perf-counters,
[  --disable-perf-counters Disables pvfs2-server performance counters],
[if test "x$enableval" = "xno" ; then
    CFLAGS="$CFLAGS -D__PVFS2_DISABLE_PERF_COUNTERS__"
fi]
,)

dnl a mechanism to turn off disk I/O for testing/debugging
AC_ARG_ENABLE(disk-io,
[  --disable-disk-io       Disables pvfs2-server disk I/O (for testing)],
[if test "x$enableval" = "xno" ; then
    CFLAGS="$CFLAGS -D__PVFS2_DISABLE_DISK_IO__"
fi]
,)

dnl a mechanism to turn on mmap-readahead caching (for kernel interface)
MMAP_RA_CACHE=""
AC_ARG_ENABLE(mmap-racache,
[  --enable-mmap-racache   Enables mmap-readahead in kernel interface],
[if test "x$enableval" = "xyes" ; then
MMAP_RA_CACHE="-DUSE_MMAP_RA_CACHE"
fi]
,)
AC_SUBST(MMAP_RA_CACHE)

dnl See if the --enable-trusted-connections  option was given to configure
AC_ARG_ENABLE(trusted-connections,
[  --enable-trusted-connections  Enable connects only from trusted hosts/ports
                                (experimental, off by default) ],
[if test "x$enableval" = "xyes"; then
TRUSTED_CONNECTIONS="-DUSE_TRUSTED"
fi],
)
AC_SUBST(TRUSTED_CONNECTIONS)


dnl a function to check if we have the required gtk stuff for the
dnl karma gui
test_for_karma()
{
  AC_CHECK_PROG(HAVE_PKGCONFIG, pkg-config, yes, no)
  if test "x$HAVE_PKGCONFIG" = "xyes" ; then
     AC_MSG_CHECKING([for gtk2.0 (for karma gui)])
     if `pkg-config --exists gtk+-2.0` ; then
        AC_MSG_RESULT(yes)
        GTKLIBS=`pkg-config --libs gtk+-2.0`
        GTKCFLAGS=`pkg-config --cflags gtk+-2.0`

        AC_SUBST(GTKLIBS)
        AC_SUBST(GTKCFLAGS)
        BUILD_KARMA="1"
        AC_SUBST(BUILD_KARMA)
     else
        AC_MSG_RESULT(no)
     fi
  fi
}

dnl optionally disable building the karma gui
AC_ARG_ENABLE(karma,
[  --disable-karma         Disables optional gui.  (Enabled by default)],
[ if test "x$enableval" = "xyes" ; then
      test_for_karma
   fi
],
[test_for_karma]
)

dnl shared or static client library (see --enable-shared below)
AC_ARG_ENABLE(static,
[  --disable-static        Do not build static client library],
[build_static=$enableval], [build_static=yes])
AC_SUBST(build_static)

dnl NOTE: removing the linux-gnu host check for now; we may want to put it back
dnl before releaseing any code, though...  -Phil
dnl 
dnl AC_MSG_CHECKING(whether we know how to compile for this OS)
dnl if test x$host_os != xlinux-gnu; then AC_MSG_ERROR($host_os not supported.)
dnl else AC_MSG_RESULT(yes)
dnl fi

dnl some redhat 2.4 kernels have a lot of 2.6 features, so we need to take
dnl special measures to accomodate those hacked kernels.  However, we do not
dnl need to take these workarounds if someone is building a stock kernel.org
dnl kernel.  

dnl was the configure option passed in?
set_redhat24=0
dnl what was the configure option set to?
use_redhat24=0

AC_ARG_ENABLE([redhat24],
[  --enable-redhat24       Enable workaround for RedHat 2.4 kernel], 
    set_redhat24=1
    if test "$enableval" = no ; then 
    	use_redhat24=0
    else
        use_redhat24=1 
    fi
)

dnl some systems (ie, RedHat EL 3 prior to Update 2) have buggy NPTL/Pthread
dnl implementations.  We accomodate this with a server stub script hack that
dnl attempts to disable NPTL and fall back to old fashioned Linux Threads.

dnl was the configure option passed in?
set_nptl_workaround=0
dnl what was the configure option set to?
use_nptl_workaround=0

AC_ARG_ENABLE([nptl-workaround],
[  --enable-nptl-workaround Enable workaround for buggy NPTL/Pthread libraries], 
    set_nptl_workaround=1
    if test "$enableval" = no ; then 
    	use_nptl_workaround=0
    else
        use_nptl_workaround=1 
    fi
)

dnl We check for the following redhat tags, as they all have similarly
dnl modified 2.4.x kernels
dnl
RHTAG1="Red Hat Linux release 9"
RHTAG2="Red Hat Enterprise Linux WS release 3"
RHTAG3="Red Hat Enterprise Linux AS release 3"
RHTAG4="Red Hat Enterprise Linux ES release 3"
RHTAG5="Red Hat Linux Advanced Server release 2.1AS"
RHTAG6="Fedora Core release 1 (Yarrow)"


dnl we won't be able to catch all cases, but see if we can
dnl get the majority of platforms where we might need to work around
dnl backported features.  Basically we give up if running on these redhat
dnl versions 

REDHAT_RELEASE=""
if test -f /etc/redhat-release; then
    AC_MSG_CHECKING(for tagged Redhat releases (must patch))
    REDHAT_REL=`cat /etc/redhat-release`
    if test "x`echo $REDHAT_REL | cut -b 1-23`" = "x$RHTAG1" ||
       test "x`echo $REDHAT_REL | cut -b 1-37`" = "x$RHTAG2" ||
       test "x`echo $REDHAT_REL | cut -b 1-37`" = "x$RHTAG3" ||
       test "x`echo $REDHAT_REL | cut -b 1-37`" = "x$RHTAG4" ||
       test "x`echo $REDHAT_REL | cut -b 1-43`" = "x$RHTAG5" ||
       test "x`echo $REDHAT_REL | cut -b 1-30`" = "x$RHTAG6" ; then
       AC_MSG_RESULT(yes)
       
       if test "$set_redhat24" = 0 || test "$set_nptl_workaround" = 0 ; then
           AC_MSG_ERROR([
    You appear to be configuring PVFS2 on a RedHat distribution that
    likely ships with a heavily modified kernel and c library.  You must
    specify two configure arguments to provide necessary information before
    proceeding.  First pick one of these two options:
    =============================
    --enable-redhat24         (if you are using a redhat provided 2.4 kernel)
    --disable-redhat24        (if you are using a stock kernel.org kernel)
    =============================
    Also pick one of the next two options.  You should probably enable the
    workaround if you are using RedHat EL 3 prior to update 2.  Otherwise it
    is probably safer (and higher performance) to disable it:
    =============================
    --enable-nptl-workaround  (to work around buggy glibc pthread library)
    --disable-nptl-workaround (if you trust your glibc pthread library)
    ============================= ])
       fi
    else
       AC_MSG_RESULT(no)
    fi
fi

dnl some non-redhat kernels (like whitebox linux and centos) rebuild
dnl rhel and give the distribution a different name, so if the user sets
dnl "enable-redhat24", then use it no matter what /etc/redhat-release might say

if test "$use_redhat24" = 1 ; then
   REDHAT_RELEASE="-DREDHAT_RELEASE_9"
fi
AC_SUBST(REDHAT_RELEASE)

if test "$use_nptl_workaround" = 1 ; then
   NPTL_WORKAROUND="1"
fi
AC_SUBST(NPTL_WORKAROUND)

use_aio_thcb=1
AC_ARG_ENABLE([aio-threaded-callbacks],
[  --disable-aio-threaded-callbacks  Disable use of AIO threaded callbacks],
    if test "$enableval" = no ; then use_aio_thcb=0 ; fi)

dnl there used to be a big hairy test in here, back when glibc-2.3.0 and
dnl glibc-2.3.1 had buggy aio callbacks.  That test was broken because it
dnl assumed just linux, and could not handle glibc-2.4.x (or newer).  Rely on
dnl aio-threaded-callbacks, perhaps with a blacklist of distros that have the
dnl broken glibc.

MISC_TROVE_FLAGS=""
if test $use_aio_thcb = 1 ; then
	MISC_TROVE_FLAGS="-D__PVFS2_TROVE_AIO_THREADED__"
fi
AC_SUBST(MISC_TROVE_FLAGS)

dnl Check byte ordering
AC_C_BIGENDIAN

dnl Check size of pointer type; needed by id-generator
AC_CHECK_SIZEOF(void *)

dnl Options for debugging
dnl This particular one enables tracing of memory allocation and
dnl    freeing with the mtrace tool
AC_ARG_WITH(mtrace,
[  --with-mtrace           Use mtrace (must set MALLOC_TRACE to output file)],
CFLAGS="$CFLAGS -include mcheck.h"
AC_DEFINE(WITH_MTRACE, 1, Define if mtrace memory leak detection was enabled)
)

dnl This particular one enables berkeley db to emit detected errors
AC_ARG_WITH(berkdb-debug,
[  --with-berkdb-debug     Use berkeley db error reporting (if detected).],
AC_DEFINE(BERKDB_ERROR_REPORTING, 1, Define if berkeley db error reporting was enabled)
)

dnl use the Pablo trace library
AC_ARG_WITH(pablo,
[  --with-pablo=path       Use Pablo trace library installed in "path"],
    if test "x$withval" = "xyes" ; then
           AC_MSG_ERROR(--with-pablo must be given a pathname)
    else
       CFLAGS="$CFLAGS -I$withval/include"
       LDFLAGS="$LDFLAGS -L$withval/lib"
       LIBS="$LIBS -lPabloTrace"
       AC_DEFINE(HAVE_PABLO, 1, [Define if Pablo library is used])
    fi
)

dnl use MPE profiling library 
AC_ARG_WITH(mpe,
[  --with-mpe=path         Use MPE profiling library installed in "path"],
    if test "x$withval" = "xyes" ; then
           AC_MSG_ERROR(--with-mpe must be given a pathname)
    else
        CFLAGS="$CFLAGS -I$withval/include"
        LDFLAGS="$LDFLAGS -L$withval/lib"
        LIBS="$LIBS -lmpe -lmpich"
        AC_MSG_CHECKING(for valid mpe install)
	AC_TRY_LINK(
              [#include <mpe.h>],
	      [
	      int eventID_begin, eventID_end;
	      eventID_begin = MPE_Log_get_event_number();
	      eventID_end   = MPE_Log_get_event_number();
	      MPE_Describe_state( eventID_begin, eventID_end, "Amult", "bluegreen" );
	      MPE_Log_event( eventID_begin, 0, (char *)0 );
	      MPE_Log_event( eventID_end, 0, (char *)0 );
	      ],
	      [
	      AC_DEFINE(HAVE_MPE, 1, [Use the MPE profiling library])
	      AC_MSG_RESULT(ok)],
	      AC_MSG_ERROR(Invalid path to mpe install))
    fi
)

dnl
dnl Enables the kernel module to build if the appropriate
dnl linux-2.6.x path is specified
dnl Make sure this is a usable kernel source tree too.
dnl
AC_ARG_WITH(kernel,
[  --with-kernel=srcpath   Build pvfs2 kernel module against 2.6.x src],
    if test "x$withval" = "xyes" -o "x$withval" = "x" ; then
           AC_MSG_ERROR(--with-kernel must be given the path to your kernel source.)
    fi
    if ! test -d $withval ; then
           AC_MSG_ERROR(The --with-kernel path $withval is not a directory.)
    fi
    if ! test -r $withval/include/linux/version.h ; then
       AC_MSG_ERROR(The kernel source tree must have been configured.)
    fi
    vers=`sed -n '/UTS_RELEASE/{; s/.*"\([0-9]\.[0-9]\).*".*/\1/; p; }' $withval/include/linux/version.h`
    if ! grep -q UTS_RELEASE..2\\.6\\. $withval/include/linux/version.h ; then
    	# 2.6.18 moves UTS_RELEASE into its own header
	if ! grep -q  UTS_RELEASE..2\\.6\\. $withval/include/linux/utsrelease.h ; then
	       AC_MSG_ERROR(The kernel source tree does not appear to be 2.6)
	fi
    fi
    # At least up through 2.6.3 needed to write .__modpost.cmd; this changed
    # sometime between then and 2.6.10.   Now anybody can compile out-of-tree
    # modules against a configured kernel tree
    LINUX_KERNEL_SRC="$withval"
    , LINUX_KERNEL_SRC="")

dnl
dnl Enables the kernel module to build if the appropriate
dnl linux-2.4.x path is specified
dnl Make sure this is a usable kernel source tree too.
dnl
AC_ARG_WITH(kernel24,
[  --with-kernel24=srcpath Build pvfs2 kernel module against 2.4.x src],
    if test "x$withval" = "xyes" -o "x$withval" = "x" ; then
           AC_MSG_ERROR(--with-kernel24 must be given the path to your kernel 2.4.x source.)
    fi
    if ! test -d $withval ; then
           AC_MSG_ERROR(The --with-kernel path $withval is not a directory.)
    fi
    if ! test -r $withval/include/linux/version.h ; then
       AC_MSG_ERROR(The kernel source tree must have been configured.)
    fi
    vers=`sed -n '/UTS_RELEASE/{; s/.*"\([0-9]\.[0-9]\).*".*/\1/; p; }' $withval/include/linux/version.h`
    if ! grep -q UTS_RELEASE..2\\.4\\. $withval/include/linux/version.h ; then
       AC_MSG_ERROR(The kernel source tree does not appear to be 2.4)
    fi
    k24_minor_ver=`echo $vers | cut -b 26- | sed -n 's/\"//p' | head -n 1`
    tmp_k24_minor_ver=`echo $k24_minor_ver | grep \-`
    if ! test "x$tmp_k24_minor_ver" = "x"; then
       tmp_k24_minor_ver=`echo $k24_minor_ver | cut -d- -f1`
       k24_minor_ver=$tmp_k24_minor_ver
    fi
    LINUX24_KERNEL_SRC="$withval" LINUX24_KERNEL_MINOR_VER="`echo $k24_minor_ver| cut -d'.' -f 1`"
    , LINUX24_KERNEL_SRC="" LINUX24_KERNEL_MINOR_VER="")


dnl now that we have the path to kernel source we can feature-test kernels. 

oldcflags=$CFLAGS
if test -z "${LINUX_KERNEL_SRC}"  ; then
	lk_src=${LINUX24_KERNEL_SRC}
elif test -z "${LINUX24_KERNEL_SRC}"  ; then
	lk_src=${LINUX_KERNEL_SRC}
fi

dnl some kernels (SLES9 2.6.5-7.191, for one) will pass the test for ki_dtor
dnl but the resulting pvfs2.ko module will be built with internal
dnl symbols (mmgrab and flush_icache_range).  
dnl 
dnl if option not given, carry out the test.  Only certain kernels (like SLES
dnl 9) will need --disable-kernel-aio

AC_ARG_ENABLE(kernel-aio,
  [  --disable-kernel-aio    Forcibly disable kernel aio],
  [ enable_kernel_aio=$enableval ],
  [ enable_kernel_aio=yes ]
  )

AC_ARG_ENABLE(kernel-sendfile,
  [  --enable-kernel-sendfile    Forcibly enable kernel sendfile],
  [ enable_kernel_sendfile=$enableval ],
  [ enable_kernel_sendfile=no ]
  )

AX_KERNEL_FEATURES


dnl PAV configuration needs absolute location of source and build.
dnl Linux-2.6 module needs absolute location of source, and uses the
dnl relative location for soft links for out-of-tree builds.
BUILD_ABSOLUTE_TOP=`pwd`
SRC_RELATIVE_TOP=$srcdir
SRC_ABSOLUTE_TOP=`cd $srcdir ; pwd`

AC_SUBST(LINUX_KERNEL_SRC)
AC_SUBST(LINUX24_KERNEL_SRC)
AC_SUBST(LINUX24_KERNEL_MINOR_VER)
AC_SUBST(BUILD_ABSOLUTE_TOP)
AC_SUBST(SRC_RELATIVE_TOP)
AC_SUBST(SRC_ABSOLUTE_TOP)

dnl More options
AC_ARG_ENABLE(fast,
[  --enable-fast           Disable optional debugging, enable optimizations.],
[
if test "x$USR_CFLAGS_SET" = "xno"; then
    CFLAGS="$CFLAGS -DNDEBUG -O3 -DGOSSIP_DISABLE_DEBUG"
fi
])

dnl Options that are not yet working
dnl --------------------------------
dnl AC_ARG_ENABLE(profiling,
dnl [  --enable-profiling      Enable profiling (using gprof).                     *** not yet working ***],
dnl CFLAGS="$CFLAGS -pg -fprofile-arcs",
dnl )
dnl 
dnl AC_ARG_ENABLE(coverage,
dnl [  --enable-coverage       Enable coverage analysis (disables optimizations).  *** not yet working ***],
dnl [ CFLAGS="$CFLAGS -g -pg -ftest-coverage -O0"
dnl ENABLE_COVERAGE=1 ],
dnl )

AC_SUBST(ENABLE_COVERAGE)

AC_ARG_ENABLE(strict,
[  --enable-strict         Turn on strict debugging with gcc],
[
if test "x$USR_CFLAGS_SET" = "xno"; then
    CFLAGS="$CFLAGS -g -Wall -Wstrict-prototypes -Wmissing-prototypes -Wundef -Wpointer-arith -Wbad-function-cast"
fi
],
[
if test "x$USR_CFLAGS_SET" = "xno" && test "x$enable_fast" != "xyes"; then
    CFLAGS="$CFLAGS -O2"
fi
])

dnl Check if user actually wants to see all our build output (compiles, links, etc.).
AC_ARG_ENABLE(verbose-build,
[  --enable-verbose-build  Enables full output during build process],
QUIET_COMPILE=0,
QUIET_COMPILE=1)

AC_SUBST(QUIET_COMPILE)

dnl
dnl a function to check for epoll capabilities
dnl
test_for_epoll()
{
  AC_CHECK_HEADERS(sys/epoll.h)
  AC_MSG_CHECKING(for epoll functions)
  AC_TRY_LINK([#include <sys/epoll.h>], [
	int fd;
	fd = epoll_create(1);
	close(fd);
  ], CFLAGS="$CFLAGS -D__PVFS2_USE_EPOLL__"
     BUILD_EPOLL=1
     AC_SUBST(BUILD_EPOLL),
  )
}

dnl optionally enable use of epoll() on Linux instead of poll()
dnl optionally disable use of epoll() on Linux instead of poll()
AC_ARG_ENABLE(epoll,
[  --enable-epoll          Enable use of epoll for TCP/IP polling 
                          (epoll is enabled by default, this option
			  ensures no checking is done for x-compiling)
  --disable-epoll         Disable epoll, use poll instead],
[
   if test "x$enableval" = "xyes"; then
        CFLAGS="$CFLAGS -D__PVFS2_USE_EPOLL__"
        BUILD_EPOLL=1
        AC_SUBST(BUILD_EPOLL)
   fi
],
[
  test_for_epoll
])

dnl enables a hack to print back traces out of segfault signal handler
AC_ARG_ENABLE(segv-backtrace,
[  --enable-segv-backtrace Enables back traces in segfault signal handler],
CFLAGS="$CFLAGS -D__PVFS2_SEGV_BACKTRACE__"
,)

dnl shared or static client library
AC_ARG_ENABLE(shared,
[  --enable-shared         Build shared client library],
[build_shared=$enableval], [build_shared=no])
AC_SUBST(build_shared)

dnl See if CC is a GNU compiler.  This may require a real test in future
dnl versions of autoconf.  In 2.13 it is a side-effect of AC_PROG_CC.  First
dnl check if it is an Intel compiler; those lie and claim to be gcc but are
dnl not argument compatible
INTELC=
GNUC=
AC_MSG_CHECKING(whether cc is an Intel compiler)
AC_TRY_COMPILE([
#ifndef __ICC
       choke me
#endif
], [],
    AC_MSG_RESULT(yes)
    INTELC=1
    ,
    AC_MSG_RESULT(no)
)
if test "x$INTELC" = "x" ; then
    if test "x$GCC" = "xyes" ; then
       GNUC=1
    fi
fi
AC_SUBST(INTELC)
AC_SUBST(GNUC)

AC_ARG_WITH(efence,
[  --with-efence=<path>    Use electric fence for malloc debugging.],
       if test "x$withval" != "xyes" ; then
              LDFLAGS="${LDFLAGS} -L$withval"
       fi
       AC_CHECK_LIB(efence,malloc)
)

if test "x$NEED_BERKELEY_DB" = "xyes" ; then
    dnl
    dnl make sure that required db development package is installed
    dnl and valid; path can be specified at configure time
    dnl
    AC_ARG_WITH(db,
           [  --with-db=<dir>         Location of installed DB package (default=/usr)],
    	   [AX_BERKELEY_DB(${withval})],
	   [AX_BERKELEY_DB("")])
fi
dnl end of NEED_BERKELEY_DB section

if test "x$BUILD_SERVER" = "x1"; then
	dnl check if -lrt is required
	AX_CHECK_NEEDS_LIBRT
fi

case "$host_os" in

    *darwin*)
	AC_DEFINE([TARGET_OS_DARWIN], 1, Define if on darwin)
    	TARGET_OS_DARWIN=1
	AC_SUBST(TARGET_OS_DARWIN)
    ;;
    *linux*)
	AC_DEFINE([TARGET_OS_LINUX], 1, Define if on linux)
    	TARGET_OS_LINUX=1
	AC_SUBST(TARGET_OS_LINUX)
    ;;
esac

AC_CHECK_HEADERS(netdb.h)
AC_CHECK_HEADERS(arpa/inet.h)
AC_CHECK_HEADERS(sys/socket.h)
dnl check for gethostbyname function
AC_MSG_CHECKING(for gethostbyname)
oldcflags="$CFLAGS"
CFLAGS="$USR_CFLAGS"
AC_TRY_COMPILE([
#include <netdb.h>
], [
gethostbyname("localhost");
],
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_GETHOSTBYNAME, 1, Define if gethostbyname function exists),
AC_MSG_RESULT(no)
WARN_ABOUT_HOSTNAMES="yes")

AC_MSG_CHECKING(for gethostbyaddr)
AC_TRY_COMPILE([
#include <netdb.h>
], [
struct sockaddr_in peer;
gethostbyaddr((void *)&peer.sin_addr.s_addr, sizeof(struct in_addr), AF_INET);
],
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_GETHOSTBYADDR, 1, Define if gethostbyaddr function exists),
AC_MSG_RESULT(no)  )

CFLAGS="$oldcflags"

dnl configure options for GM install path
GM_HOME=
AC_ARG_WITH(gm,
[  --with-gm=<dir>         Location of the GM installation (default no GM)],
    if test -z "$withval" -o "$withval" = yes ; then
	AC_MSG_ERROR([Option --with-gm requires the path to your GM tree.])
    elif test "$withval" != no ; then
	GM_HOME="$withval"
    fi
)
if test -n "$GM_HOME" ; then
    CPPFLAGS="$CPPFLAGS -I ${GM_HOME}/include -I ${GM_HOME}/include/gm"
    AC_CHECK_HEADER(gm.h,, AC_MSG_ERROR([Header gm.h not found.]))
    BUILD_GM=1
    CPPFLAGS="$CPPFLAGS_OLD"
fi
AC_SUBST(GM_HOME)
AC_SUBST(BUILD_GM)

dnl Configure options for IB install path.
dnl --with-ib=<dir> is shorthand for
dnl    --with-ib-includes=<dir>/include
dnl    --with-ib-libs=<dir>/lib  (or lib64 if that exists)
ib_home=
AC_ARG_WITH(ib,
[  --with-ib=<dir>         Location of the IB installation (default no IB)],
    if test -z "$withval" -o "$withval" = yes ; then
	AC_MSG_ERROR([Option --with-ib requires the path to your IB tree.])
    elif test "$withval" != no ; then
	ib_home="$withval"
    fi
)
AC_ARG_WITH(ib-includes,
[  --with-ib-includes=<dir>  Location of the IB includes],
    if test -z "$withval" -o "$withval" = yes ; then
	AC_MSG_ERROR([Option --with-ib-includes requires path to IB headers.])
    elif test "$withval" != no ; then
	IB_INCDIR="$withval"
    fi
)
AC_ARG_WITH(ib-libs,
[  --with-ib-libs=<dir>      Location of the IB libraries],
    if test -z "$withval" -o "$withval" = yes ; then
	AC_MSG_ERROR([Option --with-ib-libs requires path to IB libraries.])
    elif test "$withval" != no ; then
	IB_LIBDIR="$withval"
    fi
)
dnl If supplied the incls and libs explicitly, use them, else populate them
dnl using guesses from the --with-ib dir.
if test -n "$ib_home" ; then
    if test -z "$IB_INCDIR"; then
	IB_INCDIR=$ib_home/include
    fi
    if test -z "$IB_LIBDIR"; then
	IB_LIBDIR=$ib_home/lib64
	if test ! -d "$IB_LIBDIR" ; then
	    IB_LIBDIR=$ib_home/lib
	fi
    fi
fi
dnl If anything IB-ish was set, go look for header.
if test -n "$IB_INCDIR$IB_LIBDIR" ; then
    CPPFLAGS="$CPPFLAGS -I$IB_INCDIR"
    AC_CHECK_HEADER(vapi.h,, AC_MSG_ERROR([Header vapi.h not found.]))
    dnl Run test is not possible on a machine that does not have an IB NIC,
    dnl and link test is hard because we need so many little libraries.   Bail
    dnl and just check for existence; full library list is in Makefile.in.
    if test ! -f $IB_LIBDIR/libvapi.so ; then
	if test ! -f $IB_LIBDIR/libvapi.a ; then
	    AC_MSG_ERROR([Infiniband library libvapi.so not found.])
	fi
    fi
    BUILD_IB=1
    AC_CHECK_HEADER(wrap_common.h,
	AC_DEFINE(HAVE_IB_WRAP_COMMON_H, 1, Define if IB wrap_common.h exists.),
	,
	[#include <vapi.h>])
    CPPFLAGS="$CPPFLAGS_OLD"
fi
AC_SUBST(BUILD_IB)
AC_SUBST(IB_INCDIR)
AC_SUBST(IB_LIBDIR)

dnl Configure options for OpenIB install path.
dnl --with-openib=<dir> is shorthand for
dnl    --with-openib-includes=<dir>/include
dnl    --with-openib-libs=<dir>/lib  (or lib64 if that exists)
openib_home=
AC_ARG_WITH(openib,
[  --with-openib=<dir>     Location of the OpenIB install (default no OpenIB)],
    if test -z "$withval" -o "$withval" = yes ; then
	AC_MSG_ERROR([Option --with-openib requires the path to your OpenIB tree.])
    elif test "$withval" != no ; then
	openib_home="$withval"
    fi
)
AC_ARG_WITH(openib-includes,
[  --with-openib-includes=<dir>  Location of the OpenIB includes],
    if test -z "$withval" -o "$withval" = yes ; then
	AC_MSG_ERROR([Option --with-openib-includes requires path to OpenIB headers.])
    elif test "$withval" != no ; then
	OPENIB_INCDIR="$withval"
    fi
)
AC_ARG_WITH(openib-libs,
[  --with-openib-libs=<dir>  Location of the OpenIB libraries],
    if test -z "$withval" -o "$withval" = yes ; then
	AC_MSG_ERROR([Option --with-openib-libs requires path to OpenIB libraries.])
    elif test "$withval" != no ; then
	OPENIB_LIBDIR="$withval"
    fi
)
dnl If supplied the incls and libs explicitly, use them, else populate them
dnl using guesses from the --with-openib dir.
if test -n "$openib_home" ; then
    if test -z "$OPENIB_INCDIR"; then
	OPENIB_INCDIR=$openib_home/include
    fi
    if test -z "$OPENIB_LIBDIR"; then
	OPENIB_LIBDIR=$openib_home/lib64
	if test ! -d "$OPENIB_LIBDIR" ; then
	    OPENIB_LIBDIR=$openib_home/lib
	fi
    fi
fi
dnl If anything OpenIB-ish was set, go look for header.
if test -n "$OPENIB_INCDIR$OPENIB_LIBDIR" ; then
    CPPFLAGS="$CPPFLAGS -I$OPENIB_INCDIR"
    AC_CHECK_HEADER(infiniband/verbs.h,,
	AC_MSG_ERROR([Header infiniband/verbs.h not found.]))
    dnl Run test is not possible on a machine that does not have an IB NIC.
    dnl Link test would work, but just check for existence.
    if test ! -f $OPENIB_LIBDIR/libibverbs.so ; then
	if test ! -f $OPENIB_LIBDIR/libibverbs.a ; then
	    AC_MSG_ERROR([OpenIB library libibverbs.so not found.])
	fi
    fi
    BUILD_OPENIB=1
    CPPFLAGS="$CPPFLAGS_OLD"
fi
AC_SUBST(BUILD_OPENIB)
AC_SUBST(OPENIB_INCDIR)
AC_SUBST(OPENIB_LIBDIR)

if test -n "$BUILD_OPENIB" ; then
    dnl Check for which version of the ibverbs library, device opening is
    dnl different.  This format is the older one; newer is ibv_get_device_list.
    save_ldflags="$LDFLAGS"
    LDFLAGS="-L$OPENIB_LIBDIR -libverbs"
    AC_MSG_CHECKING(for ibv_get_devices)
    AC_TRY_LINK([], [
	ibv_get_devices();
	],
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_IBV_GET_DEVICES, 1,
	          Define if libibverbs has ibv_get_devices),
	AC_MSG_RESULT(no)
    )
    LDFLAGS="$save_ldflags"

    dnl Check for existence of reregister event; it's somewhat new.
    AC_MSG_CHECKING(for IBV_EVENT_CLIENT_REREGISTER)
    AC_TRY_COMPILE([
	#include "infiniband/verbs.h"
    ], [
	enum ibv_event_type x = IBV_EVENT_CLIENT_REREGISTER;
    ],
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_IBV_EVENT_CLIENT_REREGISTER, 1,
	          Define if libibverbs has reregister event),
	AC_MSG_RESULT(no)
    )
fi

dnl
dnl check if fgetxattr takes extra arguments
AC_MSG_CHECKING([for fgetxattr extra arguments])
AC_TRY_COMPILE([
	#include <sys/types.h>
	#ifdef HAVE_ATTR_XATTR_H
	#include <attr/xattr.h>
	#endif
	#ifdef HAVE_SYS_XATTR_H
	#include <sys/xattr.h>
	#endif
	],
	[
	fgetxattr(0, 0, 0, 0, 0, 0);
	],
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_FGETXATTR_EXTRA_ARGS, 1, Define if fgetxattr takes position and option arguments),
	AC_MSG_RESULT(no)
)

dnl
dnl look for sysinfo header
AC_CHECK_HEADER(sys/sysinfo.h,
       AC_DEFINE(HAVE_SYSINFO, 1, Define if sysinfo.h is present)
       )

dnl for regular functions, add another AC_CHECK_FUNCS line
AC_CHECK_FUNCS(strnlen)
AC_CHECK_FUNCS(strtoull)
AC_CHECK_FUNCS(strstr)
AC_CHECK_FUNCS(fgetxattr)
AC_CHECK_FUNCS(fsetxattr)

dnl fgetxattr doesn't have a prototype on some systems
AC_MSG_CHECKING([for fgetxattr prototype])
AC_TRY_COMPILE([
	#include <sys/types.h>
	#ifdef HAVE_ATTR_XATTR_H
	#include <attr/xattr.h>
	#endif
	#ifdef HAVE_SYS_XATTR_H
	#include <sys/xattr.h>
	#endif
	char * fgetxattr(char *foo);
	], [], 
	AC_MSG_RESULT(no),
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_FGETXATTR_PROTOTYPE, 1, Define if system provides fgtxattr prototype)
)

dnl
dnl check if fgetxattr takes extra arguments:  old systems that do not have any
dnl sort of fgetxattr should fall back to our faked version.

AC_MSG_CHECKING([for fgetxattr extra arguments])
AC_TRY_COMPILE([
	#include <sys/types.h>
	#ifdef HAVE_ATTR_XATTR_H
	#include <attr/xattr.h>
	#endif
	#ifdef HAVE_SYS_XATTR_H
	#include <sys/xattr.h>
	#endif
	],
	[
	#ifdef HAVE_FGETXATTR_PROTOTYPE
	fgetxattr(0, 0, 0, 0, 0, 0);
	#else
	#  error
	#endif
	],
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_FGETXATTR_EXTRA_ARGS, 1, Define if fgetxattr takes position and option arguments),
	AC_MSG_RESULT(no)
)




dnl check for getmntent(), special test
AC_FUNC_GETMNTENT

dnl if we use headers that might not be on every platform, add them here
AC_CHECK_HEADERS(malloc.h)
AC_CHECK_HEADERS(mntent.h)

AC_ARG_ENABLE(static-server,
[  --enable-static-server  Builds the server static],
[
	SERVER_LDFLAGS="$LDFLAGS -static"
],
[
	SERVER_LDFLAGS="$LDFLAGS -rdynamic"
])

AC_SUBST(SERVER_LDFLAGS)

dnl this is a special case, used to key off options controlling gossip
dnl   backtrace capability
AC_CHECK_HEADERS(execinfo.h,
	LDFLAGS="$LDFLAGS -rdynamic"
	CFLAGS="$CFLAGS -DGOSSIP_ENABLE_BACKTRACE"
)

dnl --
dnl Check for SDL
AC_MSG_CHECKING([for SDL])
SDL_CONFIG=`which sdl-config 2> /dev/null`
if ! test -z "$SDL_CONFIG" && test -x "$SDL_CONFIG"; then
   AC_MSG_RESULT(yes)
   SDL_VERSION=`sdl-config --version`
   VISCFLAGS=`sdl-config --cflags`
   VISCLIBS=`sdl-config --libs`

   dnl We also need SDL ttf support
   dnl only define BUILD_VIS if we have all required parts
   AC_CHECK_HEADERS(SDL_ttf.h,
       [BUILD_VIS="1"
        CPPFLAGS="$CPPFLAGS $VISCFLAGS"],
        [AC_CHECK_HEADERS(SDL/SDL_ttf.h,
            [BUILD_VIS="1"
            CPPFLAGS="$CPPFLAGS $VISCFLAGS"],)],
)

   AC_SUBST(BUILD_VIS)
   AC_SUBST(VISCFLAGS)
   AC_SUBST(VISLIBS)
else
   AC_MSG_RESULT(no)
fi

dnl Which form of strerror?
AC_MSG_CHECKING([for GNU-style strerror_r])
AC_TRY_COMPILE(
    [
	#include <string.h>
	extern char *strerror_r();
    ], [],
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_GNU_STRERROR_R, 1, Define if strerror_r is GNU-specific)
    ,
    AC_MSG_RESULT(no)
)

dnl create any missing subdirectories that wouldn't be created
dnl by AC_OUTPUT below (which won't create intermediate dirs).
for d in src/apps src/io src/common src/client src/kernel \
       doc src/apps/kernel test; do
       install -d $d;
done

dnl output final version of top level makefile and subdirectory
dnl    makefile includes
AC_OUTPUT(Makefile
module.mk
src/apps/admin/module.mk
src/apps/admin/pvfs2-config
src/apps/karma/module.mk
src/apps/vis/module.mk
src/apps/kernel/linux/module.mk
src/io/trove/module.mk
src/io/trove/trove-handle-mgmt/module.mk
src/io/trove/trove-dbpf/module.mk
src/common/misc/module.mk
src/common/quickhash/module.mk
src/common/quicklist/module.mk
src/common/dotconf/module.mk
src/common/id-generator/module.mk
src/common/gossip/module.mk
src/common/gen-locks/module.mk
src/common/llist/module.mk
src/common/statecomp/module.mk
src/io/bmi/module.mk
src/io/bmi/bmi_tcp/module.mk
src/io/bmi/bmi_gm/module.mk
src/io/bmi/bmi_ib/module.mk
src/io/description/module.mk
src/io/flow/module.mk
src/io/flow/flowproto-bmi-trove/module.mk
src/io/flow/flowproto-template/module.mk
src/io/flow/flowproto-dump-offsets/module.mk
src/io/flow/flowproto-bmi-cache/module.mk
src/io/buffer/module.mk
src/io/job/module.mk
src/io/dev/module.mk
src/proto/module.mk
src/server/module.mk
src/server/request-scheduler/module.mk
src/client/sysint/module.mk
src/kernel/linux-2.6/Makefile
src/kernel/linux-2.4/Makefile
doc/module.mk
doc/coding/module.mk
doc/design/module.mk
doc/random/module.mk
examples/pvfs2-server.rc
doc/doxygen/pvfs2-doxygen.conf
)

# print a summary of the configuration information
AC_MSG_RESULT()
AC_MSG_RESULT([***** Displaying PVFS2 Configuration Information *****])
AC_MSG_RESULT([------------------------------------------------------])

if test "x$BUILD_KARMA" = "x1" ; then
   AC_MSG_RESULT([PVFS2 configured to build karma gui               : yes])
else
   AC_MSG_RESULT([PVFS2 configured to build karma gui               :  no])
fi

if test "x$BUILD_EPOLL" = "x1" ; then
   AC_MSG_RESULT([PVFS2 configured to use epoll                     : yes])
else
   AC_MSG_RESULT([PVFS2 configured to use epoll                     :  no])
fi

if test "x$ENABLE_COVERAGE" = "x1" ; then
   AC_MSG_RESULT([PVFS2 configured to perform coverage analysis     : yes])
else
   AC_MSG_RESULT([PVFS2 configured to perform coverage analysis     :  no])
fi

if test "x$MISC_TROVE_FLAGS" = "x" ; then
   AC_MSG_RESULT([PVFS2 configured for aio threaded callbacks       :  no])
else
   AC_MSG_RESULT([PVFS2 configured for aio threaded callbacks       : yes])
fi

if test "x$LINUX_KERNEL_SRC" = "x" ; then
   AC_MSG_RESULT([PVFS2 configured for the 2.6.x kernel module      :  no])
else
   AC_MSG_RESULT([PVFS2 configured for the 2.6.x kernel module      : yes])
fi

if test "x$LINUX24_KERNEL_SRC" = "x" ; then
   AC_MSG_RESULT([PVFS2 configured for the 2.4.x kernel module      :  no])
else
   AC_MSG_RESULT([PVFS2 configured for the 2.4.x kernel module      : yes])
fi

if test "x$MMAP_RA_CACHE" = "x" ; then
   AC_MSG_RESULT([PVFS2 configured for using the mmap-ra-cache      :  no])
else
   AC_MSG_RESULT([PVFS2 configured for using the mmap-ra-cache      : yes])
fi

if test "x$TRUSTED_CONNECTIONS" = "x" ; then
	AC_MSG_RESULT([PVFS2 configured for using trusted connections    :  no])
else
	AC_MSG_RESULT([PVFS2 configured for using trusted connections    : yes])
fi

if test "x$THREAD_LIB" = "x" ; then
   AC_MSG_RESULT([PVFS2 configured for a thread-safe client library :  no])
else
   AC_MSG_RESULT([PVFS2 configured for a thread-safe client library : yes])
fi

if test "x$REDHAT_RELEASE" = "x"; then
   AC_MSG_RESULT([PVFS2 will use workaround for redhat 2.4 kernels  :  no])
else
   AC_MSG_RESULT([PVFS2 will use workaround for redhat 2.4 kernels  : yes])
fi

if test "x$NPTL_WORKAROUND" = "x"; then
   AC_MSG_RESULT([PVFS2 will use workaround for buggy NPTL          :  no])
else
   AC_MSG_RESULT([PVFS2 will use workaround for buggy NPTL          : yes])
fi

if test "x$BUILD_SERVER" = "x1"; then
   AC_MSG_RESULT([PVFS2 server will be built                        : yes])
else
   AC_MSG_RESULT([PVFS2 server will be built                        :  no])

fi

if test "x$WARN_ABOUT_HOSTNAMES" = "xyes" ; then
   AC_MSG_RESULT(WARNING: gethostbyname is not supported on this machine: ALL ADDRESSES MUST BE IN DOT NOTATION.)
fi


AC_MSG_RESULT()
AC_MSG_RESULT([PVFS2 version string: $PVFS2_VERSION])

AC_MSG_RESULT()
