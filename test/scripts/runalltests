#!/bin/bash

#arguments will come from calling program
#runalltests [-v][-m][-d][-a IPADDRESS][-s SVNBRANCH][-i IMAGE][-c EC2CONFFILE][-k KEYNAME][-f KEYFILE]



DATE=`date +'%Y%m%d'`
#export VMUSER=ec2-user
VMUSER=ubuntu
#export VMSYSTEM=sl6-mpi
VMSYSTEM=

NEWINSTANCE=1


while getopts s:i:a:dvmc:k:f: arguments
do
	case $arguments in
	h)
		echo "runalltests [-v][-m][-d][-a IPADDRESS][-s SVNBRANCH][-i IMAGE][-c EC2CONFFILE][-k KEYNAME][-f KEYFILE]"
		echo ""
		echo "Examples: "
		echo ""
		echo "runalltests -vmd -s branches/stable -i cloud-ubuntu-12.04 -c ~/ec2rc.sh -k JamesB -f ~/jamesb.pem"
		echo ""
		echo "This runs all tests against branches/stable, including vfs and mpi, on an new instance of Ubuntu 12.04LTS and deletes the instance upon completion."
		echo ""
		echo "runalltests -vmd -s trunk -i cloud-rhel6 -c ~/ec2rc.sh -k JamesB -f ~/jamesb.pem"
		echo ""
		echo "This runs just the sysint and build tests against trunk on a running Redhat Enterprise Linux 6 instance at 10.20.102.30"
		echo ""
		;;
	s)	
		SVNBRANCH=$OPTARG
		;;
	a)	
		VMIPADDR=$OPTARG
		NEWINSTANCE=0
		;;
	i)
		VMSYSTEM=$OPTARG
		;;
	v)
		#echo "Running VFS tests"
		RUN_VFS_TEST=1
		;;
	m)
		#echo "Running MPI tests"
		RUN_MPI_TEST=1
		;;
	c)
		EC2CONFFILE=$OPTARG
		;;
	k)	
		KEYNAME=$OPTARG
		;;
	f)	
		KEYFILE=$OPTARG
		;;
	d)
		DELETE_INSTANCE=1
		;;
	esac
done
	
#the parameters will change, but the basic functionality will not
echo "DATE is ${DATE}"
echo "SVNBRANCH is ${SVNBRANCH}"
echo "NEWINSTANCE is ${NEWINSTANCE}"
echo "EC2CONFFILE is $EC2CONFFILE"
echo "KEYNAME is $KEYNAME"
echo "VMSYSTEM is $VMSYSTEM"
echo "VMUSER is $VMUSER"
echo "RUN_MPI_TEST is $RUN_MPI_TEST"
echo "RUN_VFS_TEST is $RUN_VFS_TEST"
echo "VMIPADDR is $VMIPADDR"
echo "DELETE_INSTANCE is $DELETE_INSTANCE"


export SVNBRANCH
export NEWINSTANCE
export VMSYSTEM
export VMUSER
export RUN_VFS_TEST
export RUN_MPI_TEST
export KEYFILE
export KEYNAME
export EC2CONFFILE
export DELETE_INSTANCE

#Determine VM User from system
case $VMSYSTEM in 

	cloud-rhel6)
		VMUSER=ec2-user
		;;
	cloud-ubuntu-12.04)
		VMUSER=ubuntu
		;;
	cloud-sl6)
		VMUSER=ec2-user
		;;
	*)
		echo "System $VMSYSTEM not supported."
		exit 1
esac

#Look for configuration file
if [ ! -f ${EC2CONFFILE} ] ; then 
	echo "EC2 Configuration file $EC2CONFFILE not found."
	exit 1
fi

#Look for Keyfile
if [ ! -f ${KEYFILE} ] ; then 
	echo "KEYFILE $KEYFILE not found."
	exit 1
fi

#test keypairs
euca-describe-keypairs --config=${EC2CONFFILE} --filter key-name=$KEYNAME

if [ $? != 0 ]
then
	echo "Keyname $KEYNAME not found in EC2"
	exit 1
fi

#here are the parameters. Hard coded for now, but will change

#


#create the VM
#exit 0
 
if [ ${NEWINSTANCE} != 0 ]
then
	echo "Generating new instance of $VMSYSTEM"
	echo "euca-run-instances -n 1 --config ${EC2CONFFILE} --debug -k $KEYNAME -t m1.medium $VMSYSTEM > newinstance.out 2> newinstance.err"

	euca-run-instances -n 1 --config ${EC2CONFFILE} --debug -k $KEYNAME -t m1.medium $VMSYSTEM > newinstance.out 2> newinstance.err

	VMINSTANCEID=`cat newinstance.out | grep INSTANCE | awk '{print $2}'`

	echo "VM Instance id is ${VMINSTANCEID}"
	#wait 30 seconds to start instance
	sleep 30

	VMIPADDR=`euca-describe-instances instance-id=${VMINSTANCEID} --config ${EC2CONFFILE} | grep INSTANCE | awk '{ print $13 }'`
	sleep 30
fi

echo "VM IP ADDRESS is ${VMIPADDR}"
#grab vm parameters
#need instance name and IP addresses

#check to make sure instance is running

#need to make sure key can import itself automatically

ssh-keygen -f "~/.ssh/known_hosts" -R ${VMIPADDR}


#prepare the image for testing
ssh -i ${KEYFILE} ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no 'bash -s' < prepare-${VMSYSTEM}.sh

#run the test
#echo ssh -i ${KEYFILE} ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no 'bash -s' < ./run-test.sh ${SVNBRANCH}
ssh -i ${KEYFILE} ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no 'cat | bash /dev/stdin' "${SVNBRANCH}" < ./run-test.sh

#grab the logs
rsync -a -e "ssh -i ${KEYFILE} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" ${VMUSER}@${VMIPADDR}:/tmp/${VMUSER}/pvfs2-nightly/${DATE}/${SVNBRANCH}/*.log logs

#grab the scripts
rsync -a -e "ssh -i ${KEYFILE} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" ${VMUSER}@${VMIPADDR}:/home/${VMUSER}/*.txt scripts


#process the logs

#if successful, delete the VM
if [ ${DELETE_INSTANCE} != 0 ]
then
#	if [ ${VMINSTANCEID} != "" ]
#	then
		echo "Deleting instance $VMINSTANCEID at $VMIPADDR."
		euca-terminate-instances --config=$EC2CONFFILE $VMINSTANCEID

#	else
		#echo "This script cannot delete existing instances."
#e	fi
	
fi

