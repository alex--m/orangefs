#!/bin/bash

#arguments will come from calling program
#runalltests [-v][-m][-d][-a IPADDRESS][-s SVNBRANCH][-i IMAGE][-c EC2CONFFILE][-k KEYNAME][-f KEYFILE]



DATE=`date +'%Y%m%d'`
DATETIME=`date +'%Y%m%d-%H.%M.%S'`
#export VMUSER=ec2-user
VMUSER=ubuntu
#export VMSYSTEM=sl6-mpi
VMSYSTEM=

NEWINSTANCE=1


while getopts s:i:a:dvhmc:k:f: arguments
do
	case $arguments in
	h)
		echo "runalltests [-v][-m][-d][-a IPADDRESS][-s SVNBRANCH][-i IMAGE][-c EC2CONFFILE][-k KEYNAME][-f KEYFILE]"
		echo ""
		echo "Examples: "
		echo ""
		echo "runalltests -vmd -s branches/stable -i cloud-ubuntu-12.04 -c ~/ec2rc.sh -k JamesB -f ~/jamesb.pem"
		echo ""
		echo "This runs all tests against branches/stable, including vfs and mpi, on an new instance of Ubuntu 12.04LTS and deletes the instance upon completion."
		echo ""
		echo "runalltests -vmd -s trunk -i cloud-rhel6 -c ~/ec2rc.sh -k JamesB -f ~/jamesb.pem"
		echo ""
		echo "This runs just the sysint and build tests against trunk on a running Redhat Enterprise Linux 6 instance at 10.20.102.30"
		echo ""
		;;
	s)	
		SVNBRANCH=$OPTARG
		;;
	a)	
		VMIPADDR=$OPTARG
		NEWINSTANCE=0
		;;
	i)
		VMSYSTEM=$OPTARG
		;;
	v)
		#echo "Running VFS tests"
		RUN_VFS_TEST=1
		;;
	m)
		#echo "Running MPI tests"
		RUN_MPI_TEST=1
		;;
	c)
		EC2CONFFILE=$OPTARG
		;;
	k)	
		KEYNAME=$OPTARG
		;;
	f)	
		KEYFILE=$OPTARG
		;;
	d)
		DELETE_INSTANCE=1
		;;
	esac
done
	
#the parameters will change, but the basic functionality will not
echo "DATE is ${DATE}"
echo "SVNBRANCH is ${SVNBRANCH}"
echo "NEWINSTANCE is ${NEWINSTANCE}"
echo "EC2CONFFILE is $EC2CONFFILE"
echo "KEYNAME is $KEYNAME"
echo "VMSYSTEM is $VMSYSTEM"

echo "RUN_MPI_TEST is $RUN_MPI_TEST"
echo "RUN_VFS_TEST is $RUN_VFS_TEST"
echo "VMIPADDR is $VMIPADDR"
echo "DELETE_INSTANCE is $DELETE_INSTANCE"


export SVNBRANCH
export NEWINSTANCE
export VMSYSTEM

export RUN_VFS_TEST
export RUN_MPI_TEST
export KEYFILE
export KEYNAME
export EC2CONFFILE
export DELETE_INSTANCE

#Determine VM User from system
case $VMSYSTEM in 

	cloud-rhel6)
		VMUSER=ec2-user
		;;
	cloud-ubuntu-12.04)
		VMUSER=ubuntu
		;;
	cloud-sl6)
		VMUSER=ec2-user
		;;
	*)
		echo "System $VMSYSTEM not supported."
		exit 1
esac

echo "VMUSER is $VMUSER"
export VMUSER

#Look for configuration file
if [ ! -f ${EC2CONFFILE} ] ; then 
	echo "EC2 Configuration file $EC2CONFFILE not found."
	exit 1
fi

#Look for Keyfile
if [ ! -f ${KEYFILE} ] ; then 
	echo "KEYFILE $KEYFILE not found."
	exit 1
fi

#test keypairs
euca-describe-keypairs --config=${EC2CONFFILE} --filter key-name=$KEYNAME

if [ $? != 0 ]
then
	echo "Keyname $KEYNAME not found."
	exit 1
fi

#here are the parameters. Hard coded for now, but will change

#


#create the VM
#exit 0
 
if [ ${NEWINSTANCE} != 0 ]
then
	echo "Generating new instance of $VMSYSTEM"
	echo "euca-run-instances -n 1 --config ${EC2CONFFILE} --debug -k $KEYNAME -t m1.medium $VMSYSTEM > newinstance.out 2> newinstance.err"

	euca-run-instances -n 1 --config ${EC2CONFFILE} --debug -k $KEYNAME -t m1.medium $VMSYSTEM > newinstance.out 2> newinstance.err 

	if [ $? -ne 0 ]
	then
		echo "Could not create instance of $VMSYSTEM. Exiting"
		exit 1
	fi
	
	VMINSTANCEID=`cat newinstance.out | grep INSTANCE | awk '{print $2}'`

	echo "VM Instance of $VMSYSTEM created. Instance id is ${VMINSTANCEID}"
	#wait 20 seconds to start instance
	sleep 20

	RUNNING=`euca-describe-instances instance-id=${VMINSTANCEID} --config ${EC2CONFFILE} | grep INSTANCE | awk '{ print $6 }'`
	
	until [ "$RUNNING" == "running" ]
	do
		RUNNING=`euca-describe-instances instance-id=${VMINSTANCEID} --config ${EC2CONFFILE} | grep INSTANCE | awk '{ print $6 }'`
		sleep 10
		echo "Instance ${VMINSTANCEID} is ${RUNNING}"
	done
	
	#Now grab the IP Address of the new instance
	VMIPADDR=`euca-describe-instances instance-id=${VMINSTANCEID} --config ${EC2CONFFILE} | grep INSTANCE | awk '{ print $13 }'`
	
fi

echo "VM IP ADDRESS is ${VMIPADDR}"

echo "Removing obsolete ssh host records at ~/.ssh/known_hosts for $VMIPADDR."
ssh-keygen -f ~/.ssh/known_hosts -R ${VMIPADDR}

ssh -i $KEYFILE ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no true 2> /dev/null

#is SSH responding?
until [ $? -eq 0 ]
do
	sleep 10
	ssh -i $KEYFILE ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no true 2> /dev/null
done

# install all system updates and reboot
ssh -i ${KEYFILE} -t ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no 'bash -s' < update-${VMSYSTEM}.sh 

echo "Waiting for image to reboot..."
sleep 20

ssh -i $KEYFILE ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no true 2> /dev/null

#is SSH responding?
until [ $? -eq 0 ]
do
	sleep 10
	ssh -i $KEYFILE ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no true 2> /dev/null
done


ssh -i ${KEYFILE} ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no 'echo System rebooted. Test system is `uname -a`' 

echo "Preparing the image for testing..."
ssh -i ${KEYFILE} ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no 'bash -s' < prepare-${VMSYSTEM}.sh 

echo ""
echo "Running tests..."

ssh -i ${KEYFILE} ${VMUSER}@${VMIPADDR} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "RUN_VFS_TEST=${RUN_VFS_TEST} RUN_MPI_TEST=${RUN_MPI_TEST} SVNBRANCH=${SVNBRANCH} bash -s " < ./run-test.sh 

echo "Grabbing logs and scripts from server"
rsync -a -e "ssh -i ${KEYFILE} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" ${VMUSER}@${VMIPADDR}:/tmp/${VMUSER}/pvfs2-nightly/${DATE}/${SVNBRANCH}/*.log logs-$DATETIME/
rsync -a -e "ssh -i ${KEYFILE} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" ${VMUSER}@${VMIPADDR}:/home/${VMUSER}/*.txt logs-$DATETIME/
rsync -a -e "ssh -i ${KEYFILE} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" ${VMUSER}@${VMIPADDR}:/home/${VMUSER}/*.out logs-$DATETIME/
 
echo "Processing the logs" 
SVNBRANCH_SHORT=`echo $SVNBRANCH | awk -F"/" '{print $NF}'`
./checklogs.pl "`pwd`/logs-$DATETIME/alltests-${SVNBRANCH_SHORT}.log"

if [ $? -ne 0 ]
then
	#if the log check failed, bailout before deleteing instance
	echo "Some tests failed. Please check `pwd`/logs-$DATETIME/alltests-$SVNBRANCH_SHORT for more details."
	echo "Instance $VMINSTANCEID at $VMIPADDR NOT deleted."
	exit 1
fi

#if successful, delete the VM
if [ ${DELETE_INSTANCE} ]
then
		echo "Deleting instance $VMINSTANCEID at $VMIPADDR."
		euca-terminate-instances --config=$EC2CONFFILE $VMINSTANCEID

fi

