/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/* pvfs2_client_getattr_pcache_sm
 *
 * The purpose of this state machine is to obtain attributes for an
 * object.  These attributes could come from a local cache (the pcache)
 * or be obtained from a remote server.
 *
 * This state machine uses the msgpair structure in the PINT_client_sm
 * structure in order to perform the message passing.  It assumes that this
 * has been previously set up by the state machine above this one.  In particular
 * the following fields of the msgpair structure must be filled in:
 * - req (unencoded getattr request)
 * - fs_id
 * - handle
 * - comp_fn - called to pull attributes out of decoded response and store
 *   them in the appropriate place for the state machine jumping to this one
 *   (e.g. copies datafile handles out in the remove case)
 *
 * This state machine in turns jumps to the pvfs2_client_msgpair_sm to perform
 * messaging, if necessary.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"

#include "pint-servreq.h"
#include "pcache.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

enum {
    GETATTR_PCACHE_MISS = 1
};

static int getattr_pcache_lookup(PINT_client_sm *sm_p,
				 job_status_s *js_p);

%%

nested machine pvfs2_client_getattr_pcache_sm(lookup,
					      xfer_msgpair)
{
    state lookup {
	run getattr_pcache_lookup;
	success => return;
	GETATTR_PCACHE_MISS => xfer_msgpair;
	default => return;
    }

    state xfer_msgpair {
	jump pvfs2_client_msgpair_sm;
	default => return;
    }
}

%%

static int getattr_pcache_lookup(PINT_client_sm *sm_p,
				 job_status_s *js_p)
{
    gossip_debug(CLIENT_DEBUG, "getattr_pcache state: lookup\n");

    /* TODO: check pcache to see if we have an entry.  if so, set
     * up a fake, decoded response structure with the results so that
     * we can then call the comp_fn to copy data out of the response
     * and into the PINT_client_sm structure.
     *
     * This is a little inefficient I suppose, but it the most general
     * way to accomplish this.  We can optimize later if it seems
     * necessary.  Or we can tailor the pcache to store in response
     * format all the time...
     */

    /* for now we always miss on the pcache */
    js_p->error_code = GETATTR_PCACHE_MISS;
    return 1;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ts=8 sts=4 sw=4 noexpandtab
 */
