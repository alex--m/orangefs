/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>
#include <unistd.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "pvfs2-util.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "pvfs2-internal.h"

struct dbpf_keyval_db_entry {
    TROVE_handle handle;
    char key[1024];
};

extern job_context_id pint_client_sm_context;

static int get_value_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i);

%%

machine pvfs2_client_get_value_sm
{
    state init
    {
        run get_value_setup_msgpair;
        success => getvalue_xfer_msgpair;
        default => cleanup;
    }

    state getvalue_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run get_value_cleanup;
        default => terminate;
    }
}

%%

PVFS_error PVFS_isys_getvalue(
        PVFS_object_ref ref,
        PVFS_ds_position *token,
        const PVFS_credentials *credentials,
        PVFS_ds_keyval *key_p,
        PVFS_ds_keyval *val_p,
        uint32_t query_type,
        uint32_t count,
        PVFS_sysresp_getvalue *resp_p,
        PVFS_sys_op_id *op_id,
        PVFS_hint hints,
        void *user_ptr)
{
    int ret = -PVFS_EINVAL;
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: PVFS_isys_getvalue enter\n");
    
    if( ((ref.fs_id == PVFS_FS_ID_NULL) || (resp_p == NULL) ) )
    {
        gossip_err("[GETVALUE]: invalid required argument\n");
        return ret;
    }

    PINT_smcb_alloc(&smcb, PVFS_SYS_GETVALUE,
                    sizeof( struct PINT_client_sm ),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);
    if( smcb == NULL )
    {
        return -PVFS_ENOMEM;
    }

    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, ref.fs_id);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    sm_p->u.getvalue.pos_token = token;
    sm_p->u.getvalue.key_p = key_p;
    sm_p->u.getvalue.val_p = val_p;
    sm_p->u.getvalue.query_type = query_type;
    sm_p->u.getvalue.count = count;
    sm_p->u.getvalue.resp_p = resp_p;
    sm_p->error_code = 0;
    sm_p->object_ref = ref;
    PVFS_hint_copy(hints, &sm_p->hints);

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: PVFS_isys_getvalue: sm_p->u.getvalue: "
                 "resp_p: %p, pos_token: %p, key_p: %p, val_p: %p\n",  
                 sm_p->u.getvalue.resp_p, sm_p->u.getvalue.pos_token, 
                 sm_p->u.getvalue.val_p, sm_p->u.getvalue.key_p);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: PVFS_isys_getvalue exit\n");

    return PINT_client_state_machine_post( smcb, op_id, user_ptr);
}

PVFS_error PVFS_sys_getvalue(
        PVFS_object_ref ref,
        PVFS_ds_position *token,
        const PVFS_credentials *credentials,
        PVFS_ds_keyval *key,
        PVFS_ds_keyval *val,
        uint32_t query_type,
        uint32_t count,
        PVFS_sysresp_getvalue *resp_p,
        PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: PVFS_sys_getvalue enter\n");

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: PVFS_sys_getvalue: resp_p: %p, pos_token: %p, "
                 "val: %p\n", resp_p, token, val);

    if( resp_p == NULL )
    {
        ret = -EINVAL;
        PVFS_perror_gossip("[GETVALUE]: resp_p is null\n", ret);
        return ret;
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: PVFS_sys_getvalue: count: %u\n", count);

    ret = PVFS_isys_getvalue(ref, token, credentials, key, val, query_type,
                            count, resp_p, &op_id, hints, NULL);

    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_getvalue call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_sys_wait(op_id, "getvalue", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
    }

    PINT_sys_release(op_id);
    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: PVFS_sys_getvalue exit\n");

    return error;
}

static PINT_sm_action get_value_setup_msgpair(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL, i = 0;
    PINT_sm_msgpair_state *msg_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "[GETVALUE]: get_value_setup_msgpair enter, sm_p: %p\n",
                sm_p);
    ret = PINT_cached_config_count_servers( sm_p->object_ref.fs_id,
            PINT_SERVER_TYPE_META, &(sm_p->u.getvalue.srv_count) );
    if( sm_p->u.getvalue.srv_count < 1 )
    {
        gossip_err("Number of meta servers incorect. ret=%d, count=%d\n",
                   ret, sm_p->u.getvalue.srv_count);
        js_p->error_code = -PVFS_EINVAL;
        if( ret != 0 )
        {
            js_p->error_code = -PVFS_ENOMEM;
        }
        return SM_ACTION_COMPLETE;
    }

    /* allocate server address for msg pairs */
    if( (sm_p->u.getvalue.server_addresses = 
         calloc(sm_p->u.getvalue.srv_count, sizeof(PVFS_BMI_addr_t))) == 0 )
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG,
                     "[GETVALUE]: malloc for server address array failed\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    ret = PINT_cached_config_get_server_array(sm_p->object_ref.fs_id,
            PINT_SERVER_TYPE_META, sm_p->u.getvalue.server_addresses,
            &(sm_p->u.getvalue.srv_count) );

    ret = PINT_msgpairarray_init(&sm_p->msgarray_op, 
        sm_p->u.getvalue.srv_count);
    if( ret != 0 )
    {
        gossip_err("Failed to initialize %d msgpairs\n", 
            sm_p->u.getvalue.srv_count);
    }

    foreach_msgpair( &sm_p->msgarray_op, msg_p, i)
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: FILL\n"
                     "\ti=%d\n"
                     "\tmsg_p=%p\n"
                     "\tcred_p=%p\n"
                     "\tfs_id=%d\n"
                     "\tquery_type=%u\n"
                     "\tcount=%u\n"
                     "\thandle=%llu\n"
                     "\tpos_token=%llu\n"
                     "\tkey_p=%p\n"
                     "\tval_p=%p\n",
                     i, msg_p, sm_p->cred_p, sm_p->object_ref.fs_id,
                     sm_p->u.getvalue.query_type, sm_p->u.getvalue.count,
                     sm_p->object_ref.handle, sm_p->u.getvalue.pos_token[i],
                     sm_p->u.getvalue.key_p, sm_p->u.getvalue.val_p );
        PINT_SERVREQ_GETVALUE_FILL(
            msg_p->req,
            (*sm_p->cred_p),
            sm_p->object_ref.fs_id,
            sm_p->u.getvalue.query_type,
            sm_p->u.getvalue.count,
            sm_p->object_ref.handle,
            sm_p->u.getvalue.pos_token[i],
            (*sm_p->u.getvalue.key_p),
            (*sm_p->u.getvalue.val_p),
            sm_p->hints
            );
        msg_p->fs_id = sm_p->object_ref.fs_id;
        msg_p->handle = sm_p->object_ref.handle;
        msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
        msg_p->comp_fn = get_value_comp_fn;
        msg_p->svr_addr = sm_p->u.getvalue.server_addresses[i];
    }

    js_p->error_code = 0;
    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);

    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "[GETVALUE]: get_value_setup_msgpair exit\n");

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action get_value_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: get_value_cleanup enter\n");

    sm_p->error_code  = js_p->error_code;

    free( sm_p->u.getvalue.server_addresses );
    PINT_SET_OP_COMPLETE;
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: get_value_cleanup exit\n");

   return SM_ACTION_TERMINATE;
}

static int get_value_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i)
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM);
    int ret=0, j=0;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: get_value_comp_fn enter for msgpair %d\n", i);
    assert(resp_p->op == PVFS_SERV_GETVALUE);

    if (sm_p->msgarray_op.msgarray[i].op_status != 0)
    {
      gossip_debug(GOSSIP_GETVALUE_DEBUG,
                     "[GETVALUE]: msgarray op_status not 0: %d\n",  
                     sm_p->msgarray_op.msgarray[i].op_status);
      return sm_p->msgarray_op.msgarray[i].op_status;
    }
    
    sm_p->u.getvalue.resp_p[i].token = resp_p->u.getvalue.token;
    sm_p->u.getvalue.resp_p[i].count = resp_p->u.getvalue.count;
    sm_p->u.getvalue.resp_p[i].match_count = resp_p->u.getvalue.match_count;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: Count is %d\n", 
                 sm_p->u.getvalue.resp_p[i].count);
    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: Match is %d\n", 
                 sm_p->u.getvalue.resp_p[i].match_count);

    for( j = 0; j < sm_p->u.getvalue.resp_p[i].count; j++ )
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: j: %d\n", j);

        /* attribute key */
        sm_p->u.getvalue.resp_p[i].key[j].buffer_sz = 
        sm_p->u.getvalue.resp_p[i].key[j].read_sz = 
            resp_p->u.getvalue.key[j].buffer_sz;

        memcpy(sm_p->u.getvalue.resp_p[i].key[j].buffer, 
            resp_p->u.getvalue.key[j].buffer, 
            sm_p->u.getvalue.resp_p[i].key[j].buffer_sz );

        /* value datum */
        sm_p->u.getvalue.resp_p[i].val[j].buffer_sz = 
        sm_p->u.getvalue.resp_p[i].val[j].read_sz = 
            resp_p->u.getvalue.val[j].buffer_sz;

        memcpy(sm_p->u.getvalue.resp_p[i].val[j].buffer, 
            resp_p->u.getvalue.val[j].buffer, 
            sm_p->u.getvalue.resp_p[i].val[j].buffer_sz );

        /* dirent information for the key */
        memcpy(&(sm_p->u.getvalue.resp_p[i].dirent[j]), 
            &(resp_p->u.getvalue.dirent[j]), sizeof(PVFS_dirent));
    }    

    /* only used internal to calls, safe to free */
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: get_value_comp_fn exit\n");
    return ret;
}

