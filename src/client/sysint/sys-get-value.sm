/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>
#include <unistd.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "pvfs2-util.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "pvfs2-internal.h"

extern job_context_id pint_client_sm_context;

static int getvalue_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i);

%%

machine pvfs2_client_get_value_sm
{
    state init
    {
        run getvalue_setup_metaservers;
        success => getvalue_setup_msgpair;
        default => cleanup;
    }

    state getvalue_setup_msgpair
    {
        run getvalue_setup_msgpair;
        success => getvalue_xfer_msgpair;
        default => cleanup;
    }

    state getvalue_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run getvalue_cleanup;
        default => terminate;
    }
}

%%

PVFS_error PVFS_isys_getvalue(
        PVFS_object_ref ref,
        const PVFS_credentials *credentials,
        uint32_t query_count,
        PVFS_keyval_query *query_p,
        PVFS_sysresp_getvalue *resp_p,
        PVFS_sys_op_id *op_id,
        PVFS_hint hints,
        void *user_ptr)
{
    int ret = -PVFS_EINVAL;
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: PVFS_isys_getvalue: "
                 "enter\n");
    
    if( ((ref.fs_id == PVFS_FS_ID_NULL) || 
         (resp_p == NULL) || (query_p == NULL) || (query_count < 1) ))
    {
        gossip_err("[GETVALUE]: invalid required argument\n");
        return ret;
    }

    PINT_smcb_alloc(&smcb, PVFS_SYS_GETVALUE,
                    sizeof( struct PINT_client_sm ),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);
    if( smcb == NULL )
    {
        return -PVFS_ENOMEM;
    }

    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    /* assign arguments over to state machine */
    PINT_init_msgarray_params(sm_p, ref.fs_id);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    sm_p->u.getvalue.query_count = query_count;
    sm_p->u.getvalue.query_p = query_p;
    sm_p->u.getvalue.resp_p = resp_p;

    sm_p->u.getvalue.server_count = 0;
    sm_p->u.getvalue.server_addresses = NULL;
    sm_p->error_code = 0;
    sm_p->object_ref = ref;
    PVFS_hint_copy(hints, &sm_p->hints);

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: PVFS_isys_getvalue: sm_p->u.getvalue: "
                 "query_count: %d, query_p: %p, resp_p: %p\n", 
                 sm_p->u.getvalue.query_count, sm_p->u.getvalue.query_p, 
                 sm_p->u.getvalue.resp_p);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: PVFS_isys_getvalue: exit\n");

    return PINT_client_state_machine_post( smcb, op_id, user_ptr);
}

PVFS_error PVFS_sys_getvalue(
        PVFS_object_ref ref,
        const PVFS_credentials *credentials,
        uint32_t query_count,
        PVFS_keyval_query *query_p,
        PVFS_sysresp_getvalue *resp_p,
        PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;
    uint32_t query_type=0, i=0;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: PVFS_sys_getvalue: enter\n");

    if( resp_p == NULL )
    {
        PVFS_perror_gossip("[GETVALUE]: resp_p is null\n", -EINVAL);
        return -EINVAL;
    }

    if( query_p == NULL )
    {
        PVFS_perror_gossip("[GETVALUE]: query_p is null\n", -EINVAL);
        return -EINVAL;
    }

    /* root node can't be no-op */
    if( PVFS_KEYVAL_QUERY_NOOP == 
        PVFS_KEYVAL_QUERY_UNMASK_QUERY(query_p[0].oper))
    {
        PVFS_perror_gossip("[GETVALUE]: invalid operation in query_p\n", 
            -EINVAL);
        return -EINVAL;
    }

    for( i = 0; i < query_count; i++ )
    {
        query_type = PVFS_KEYVAL_QUERY_UNMASK_QUERY(query_p[i].oper);

        /* only allow known query types */
        if( query_type > PVFS_KEYVAL_QUERY_SENTINEL )
        {
            PVFS_perror_gossip("[GETVALUE]: unknown operation number\n", 
                -EINVAL);
            return -EINVAL;
        }

        /* if item at index i takes operands, make sure they exist */
        if( query_type != PVFS_KEYVAL_QUERY_NOOP )
        {
            if( query_count < ( ( 2 * i ) + 2 ) )
            {    
                PVFS_perror_gossip("[GETVALUE]: required operands not present "
                                   "for operator\n", ret);
            }
        }

    }
    ret = PVFS_isys_getvalue(ref, credentials, query_count, query_p, 
                             resp_p, &op_id, hints, NULL);

    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_getvalue call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_sys_wait(op_id, "getvalue", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
    }

    PINT_sys_release(op_id);
    gossip_debug(GOSSIP_CLIENT_DEBUG, "[GETVALUE]: PVFS_sys_getvalue exit\n");

    return error;
}

static PINT_sm_action getvalue_setup_metaservers(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL; // i = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "[GETVALUE]: getvalue_get_metaservers: enter\n");

    ret = PINT_cached_config_count_servers( sm_p->object_ref.fs_id,
            PINT_SERVER_TYPE_META, &(sm_p->u.getvalue.server_count) );

    if( sm_p->u.getvalue.server_count < 1 || ret != 0 )
    {
        gossip_err("No meta servers returned! ret=%d, count=%d\n",
                   ret, sm_p->u.getvalue.server_count);
        js_p->error_code = -PVFS_EINVAL;
        if( ret != 0 )
        {
            js_p->error_code = -PVFS_ENOMEM;
        }
        return SM_ACTION_COMPLETE;
    }

    /* allocate server address for msg pairs */
    if( (sm_p->u.getvalue.server_addresses = 
         calloc(sm_p->u.getvalue.server_count, sizeof(PVFS_BMI_addr_t))) == 0 )
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG,
                     "[GETVALUE]: malloc for server address array failed\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    
    ret = PINT_cached_config_get_server_array(sm_p->object_ref.fs_id,
            PINT_SERVER_TYPE_META, sm_p->u.getvalue.server_addresses,
            &(sm_p->u.getvalue.server_count) ); 
    if( ret != 0 )
    {
        gossip_err("Failed to get cached config meta servers (%d of them)\n",
            sm_p->u.getvalue.server_count);
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;

    }

    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "[GETVALUE]: getvalue_setup_msgpair exit\n");

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action getvalue_setup_msgpair(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PINT_sm_msgpair_state *msg_p = NULL;
    int ret=0, i=0;

    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "[GETVALUE]: getvalue_setup_msgpair: enter, setting up %d "
                 "messages\n", sm_p->u.getvalue.server_count);

    ret = PINT_msgpairarray_init(&sm_p->msgarray_op, 
        sm_p->u.getvalue.server_count);
    if( ret != 0 )
    {
        gossip_err("Failed to initialize %d msgpairs\n", 
            sm_p->u.getvalue.server_count);
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    foreach_msgpair( &sm_p->msgarray_op, msg_p, i)
    {
        PINT_SERVREQ_GETVALUE_FILL(
            msg_p->req,
            (*sm_p->cred_p),
            sm_p->object_ref.fs_id,
            sm_p->object_ref.handle,
            sm_p->u.getvalue.query_count,
            sm_p->u.getvalue.query_p,
            sm_p->hints
            );
        msg_p->fs_id = sm_p->object_ref.fs_id;
        msg_p->handle = sm_p->object_ref.handle;
        msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
        msg_p->comp_fn = getvalue_comp_fn;
        msg_p->svr_addr = sm_p->u.getvalue.server_addresses[i];
    }

    js_p->error_code = 0;
    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);

    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "[GETVALUE]: getvalue_setup_msgpair: exit\n");

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action getvalue_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: getvalue_cleanup enter\n");

    sm_p->error_code  = js_p->error_code;
    PINT_msgpairarray_destroy(&sm_p->msgarray_op);

    free( sm_p->u.getvalue.server_addresses );
    PINT_SET_OP_COMPLETE;
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: getvalue_cleanup exit\n");

   return SM_ACTION_TERMINATE;
}

static int getvalue_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i)
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM);
    int ret=0, j=0; 

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: getvalue_comp_fn enter for msgpair %d\n", i);
    assert(resp_p->op == PVFS_SERV_GETVALUE);

    if (sm_p->msgarray_op.msgarray[i].op_status != 0)
    {
      gossip_debug(GOSSIP_GETVALUE_DEBUG,
                     "[GETVALUE]: msgarray op_status not 0: %d\n",  
                     sm_p->msgarray_op.msgarray[i].op_status);
      return sm_p->msgarray_op.msgarray[i].op_status;
    }
   
    /* response should have same number of query components as the request */
    assert( resp_p->u.getvalue.query_count == sm_p->u.getvalue.query_count );

    for( j=0; j < resp_p->u.getvalue.query_count; j++ )
    {
        /* server skipped handling this query */
        if( ( resp_p->u.getvalue.query_p[j].count == 0 ) && 
            ( resp_p->u.getvalue.query_p[j].token == PVFS_ITERATE_START) )
        {
            gossip_debug(GOSSIP_GETVALUE_DEBUG,
                         "[GETVALUE]: server did not handle query of type %u\n",
                         resp_p->u.getvalue.query_p[j].oper);
            /* TODO: use the state machine to handle locally */
            assert(1);
        }
    }

    sm_p->u.getvalue.resp_p[i].query_count = resp_p->u.getvalue.query_count;
    sm_p->u.getvalue.resp_p[i].dirent_count = resp_p->u.getvalue.dirent_count;

    /* copy each query struct */
    for( j=0; j < resp_p->u.getvalue.query_count; j++ )
    {
        memcpy( sm_p->u.getvalue.resp_p[i].query_p[j].match,
                resp_p->u.getvalue.query_p[j].match, 
                sizeof(PVFS_handle) * resp_p->u.getvalue.query_p[j].count);
        sm_p->u.getvalue.resp_p[i].query_p[j].token =
            resp_p->u.getvalue.query_p[j].token;
        sm_p->u.getvalue.resp_p[i].query_p[j].oper =
            resp_p->u.getvalue.query_p[j].oper;
        sm_p->u.getvalue.resp_p[i].query_p[j].count =
            resp_p->u.getvalue.query_p[j].count;
        sm_p->u.getvalue.resp_p[i].query_p[j].query =
            resp_p->u.getvalue.query_p[j].query;
    }

    /* copy dirent's for entire response */
    if( resp_p->u.getvalue.dirent_count > 0 )
    {
        memcpy( sm_p->u.getvalue.resp_p[i].dirent_p, 
            resp_p->u.getvalue.dirent_p, 
            sizeof(PVFS_handle) * resp_p->u.getvalue.dirent_count);
    }
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "[GETVALUE]: getvalue_comp_fn exit\n");
    return ret;
}

