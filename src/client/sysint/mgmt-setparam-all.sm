/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"

#include "pinode-helper.h"
#include "pint-dcache.h"
#include "pint-servreq.h"
#include "pint-bucket.h"
#include "pcache.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;
extern struct server_configuration_s g_server_config;

/* state function prototypes */
static int mgmt_setparam_all_setup_msgpair(PINT_client_sm *sm_p,
					job_status_s *js_p);

static int mgmt_setparam_all_cleanup(PINT_client_sm *sm_p,
			  job_status_s *js_p);

static int mgmt_setparam_all_failure(PINT_client_sm *sm_p,
			  job_status_s *js_p);

%%

machine pvfs2_client_mgmt_setparam_all_sm(
    setup_msgpair,
    xfer_msgpair,
    cleanup,
    failure)
{

    state setup_msgpair {
	run mgmt_setparam_all_setup_msgpair;
	success => xfer_msgpair;
	default => failure;
    }

    state xfer_msgpair {
	jump pvfs2_client_msgpairarray_sm;
	success => cleanup;
	default => failure;
    }

    state failure {
	run mgmt_setparam_all_failure;
	default => cleanup;
    }

    state cleanup {
	run mgmt_setparam_all_cleanup;
	default => setup_msgpair;
    }
}

%%

int PVFS_mgmt_setparam_all(
    PVFS_fs_id fs_id,
    PVFS_credentials credentials,
    enum PVFS_server_param param,
    int64_t value)
{
    int ret;
    PINT_client_sm *sm_p;
    PVFS_error error;

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_setparam_all entered\n");

    if (param == PVFS_SERV_PARAM_INVALID) 
    {
	return -PVFS_EINVAL;
    }

    /* build PINT_client_sm structure */
    /* TODO: KEEP A CACHE OF THESE AROUND SO WE'RE NOT ALWAYS MALLOC'ING? */
    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL) return -PVFS_ENOMEM;

    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;
    sm_p->u.setparam_all.param = param;
    sm_p->u.setparam_all.value = value;
    sm_p->u.setparam_all.fs_id = fs_id;

    gossip_debug(CLIENT_DEBUG,
		 "PVFS_mgmt_setparam_all calling PINT_client_state_machine_post()\n");

    /* do something to kick off processing */
    ret = PINT_client_state_machine_post(sm_p, PVFS_MGMT_SETPARAM_ALL);
    /* TODO: error handling */
    assert(ret == 0);

    /* while !done call progress function */
    while (!sm_p->op_complete && ret == 0) {
	gossip_debug(CLIENT_DEBUG,
		     "PVFS_mgmt_setparam_all calling PINT_client_state_machine_test()\n");
	ret = PINT_client_state_machine_test();
    }

    /* TODO: error handling */
    assert(ret == 0);

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_setparam_all completed\n");

    /* save our return value */
    error = sm_p->error_code;

    /* clean up after ourselves */
    free(sm_p);
    return error;
}

static int mgmt_setparam_all_setup_msgpair(PINT_client_sm *sm_p,
					job_status_s *js_p)
{
    int ret = -1;
    int num_meta = 0;
    int num_io = 0;
    int total_bound = 0;
    int num_phys_servers = 0;
    bmi_addr_t *addr_array;
    int i;
    PINT_client_sm_msgpair_state *msg_p;

    gossip_debug(CLIENT_DEBUG, "setparam_all state: mgmt_setparam_all_setup_msgpair\n");

    /* the first thing we have to do is find out how many physical servers
     * are present
     */
    /* calculate an upper bound on the number of servers present */
    ret = PINT_bucket_get_num_meta(sm_p->u.setparam_all.fs_id, &num_meta);
    if(ret < 0)
    {
	gossip_lerr("PINT_bucket_get_num_meta() failure.\n");
	js_p->error_code = ret;
	return(1);
    }
    ret = PINT_bucket_get_num_io(sm_p->u.setparam_all.fs_id, &num_io);
    if(ret < 0)
    {
	gossip_lerr("PINT_bucket_get_num_io() failure.\n");
	js_p->error_code = ret;
	return(1);
    }

    /* allocate space to store BMI addresses */
    total_bound = num_io + num_meta;
    addr_array = (bmi_addr_t*)malloc(total_bound*sizeof(bmi_addr_t));
    if(!addr_array)
    {
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    /* map to actual server instances */
    ret = PINT_bucket_get_physical_all(&g_server_config, 
	sm_p->u.setparam_all.fs_id, total_bound, &num_phys_servers, 
	addr_array);
    if(ret < 0)
    {
	free(addr_array);
	gossip_lerr("PINT_bucket_get_physical_all() failure.\n");
	js_p->error_code = ret;
	return(1);
    }

    gossip_debug(CLIENT_DEBUG,
	"PVFS_mgmt_setparam_all found %d servers.\n", num_phys_servers);

    /* allocate memory for msgpair array */
    sm_p->msgarray_count = num_phys_servers;
    sm_p->msgarray = (PINT_client_sm_msgpair_state *)
	malloc(num_phys_servers*sizeof(PINT_client_sm_msgpair_state));
    if(!sm_p->msgarray)
    {
	free(addr_array);
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    /* setup msgpair array */
    for(i=0; i<num_phys_servers; i++)
    {
	msg_p = &sm_p->msgarray[i];

	PINT_SERVREQ_MGMT_SETPARAM_FILL(msg_p->req,
	    *sm_p->cred_p,
	    sm_p->u.setparam_all.fs_id,
	    sm_p->u.setparam_all.param,
	    sm_p->u.setparam_all.value);

	msg_p->fs_id = sm_p->u.setparam_all.fs_id;
	msg_p->handle = PVFS_HANDLE_NULL;
	msg_p->comp_fn = NULL;
	msg_p->svr_addr = addr_array[i];
    }

    free(addr_array);

    /* immediate return: next state jumps to msgpairarray machine */
    js_p->error_code = 0;
    return(1);
}

static int mgmt_setparam_all_cleanup(PINT_client_sm *sm_p,
			  job_status_s *js_p)
{
    if(sm_p->msgarray)
	free(sm_p->msgarray);

    /* NOTE: leaving the js_p->error_code intact on purpose, so that
     * it gets propigated to calling state machine
     */
    sm_p->op_complete = 1;

    return(0);
}

static int mgmt_setparam_all_failure(PINT_client_sm *sm_p,
			  job_status_s *js_p)
{
    /* TODO: error handling */
    assert(0);
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
