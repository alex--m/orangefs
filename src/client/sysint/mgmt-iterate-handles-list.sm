/*
 * (C) 2001 Clemson University and The University of Chicago
 *
 * See COPYING in top-level directory.
 */
#include <string.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-types.h"
#include "pvfs2-mgmt.h"

extern job_context_id pint_client_sm_context;
extern struct server_configuration_s g_server_config;

/* state function prototypes */
static int mgmt_iterate_handles_list_setup_msgpair(
    PINT_client_sm * sm_p,
    job_status_s * js_p);
static int mgmt_iterate_handles_list_cleanup(
    PINT_client_sm * sm_p,
    job_status_s * js_p);
static int iterate_handles_list_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i);

%%

machine pvfs2_client_mgmt_iterate_handles_list_sm(
    setup_msgpair, 
    xfer_msgpair, 
    cleanup)
{

    state setup_msgpair
    {
	run mgmt_iterate_handles_list_setup_msgpair;
	success => xfer_msgpair;
	default => cleanup;
    }

    state xfer_msgpair
    {
	jump pvfs2_client_msgpairarray_sm;
	default => cleanup;
    }

    state cleanup
    {
	run mgmt_iterate_handles_list_cleanup;
	default => setup_msgpair;
    }
}

%%

/* PVFS_mgmt_iterate_handles_list()
 *
 * iterates through all of the handles in a given collection for each server
 *
 * returns 0 on success, -PVFS_error on failure
 */
int PVFS_mgmt_iterate_handles_list(
    PVFS_fs_id fs_id,
    PVFS_credentials credentials,
    PVFS_handle ** handle_matrix,
    int *handle_count_array,
    PVFS_ds_position * position_array,
    PVFS_id_gen_t * addr_array,
    int server_count)
{
    int ret;
    PINT_client_sm *sm_p;
    PVFS_error error;

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_iterate_handles_list() entered.\n");

    if(server_count < 1 || !handle_matrix || !position_array 
	|| !handle_count_array || !addr_array)
    {
	return(-PVFS_EINVAL);
    }

    /* build PINT_client_sm structure */
    /* TODO: KEEP A CACHE OF THESE AROUND SO WE'RE NOT ALWAYS MALLOC'ING? */
    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL) return -PVFS_ENOMEM;

    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;
    sm_p->u.iterate_handles_list.server_count = server_count;
    sm_p->u.iterate_handles_list.addr_array = addr_array;
    sm_p->u.iterate_handles_list.handle_matrix = handle_matrix;
    sm_p->u.iterate_handles_list.handle_count_array = handle_count_array;
    sm_p->u.iterate_handles_list.position_array = position_array;

    gossip_debug(CLIENT_DEBUG,
		 "PVFS_mgmt_iterate_handles_list calling PINT_client_state_machine_post()\n");

    /* do something to kick off processing */
    ret = PINT_client_state_machine_post(sm_p, PVFS_MGMT_ITERATE_HANDLES_LIST);
    if(ret < 0)
    {
	/* this should not fail under normal conditions */
	assert(0);
	gossip_lerr("Error: PINT_client_state_machine_post() failure.\n");
	return(ret);
    }

    /* while !done call progress function */
    while (!sm_p->op_complete && ret == 0) {
	gossip_debug(CLIENT_DEBUG,
		     "PVFS_mgmt_iterate_handles_list calling PINT_client_state_machine_test()\n");
	ret = PINT_client_state_machine_test();
    }
    if(ret < 0)
    {
	gossip_lerr("Error: PINT_client_state_machine_test() failure.\n");
	return(ret);
    }

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_iterate_handles_list completed\n");

    /* save our return value */
    error = sm_p->error_code;

    /* clean up after ourselves */
    free(sm_p);
    return error;
}

static int mgmt_iterate_handles_list_setup_msgpair(
    PINT_client_sm * sm_p,
    job_status_s * js_p)
{
    return (-PVFS_ENOSYS);
}

static int mgmt_iterate_handles_list_cleanup(
    PINT_client_sm * sm_p,
    job_status_s * js_p)
{
    return (-PVFS_ENOSYS);
}

static int iterate_handles_list_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i)
{
    return (-PVFS_ENOSYS);
}


/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ts=8 sts=4 sw=4 noexpandtab
 */
