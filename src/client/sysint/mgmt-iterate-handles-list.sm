/*
 * (C) 2001 Clemson University and The University of Chicago
 *
 * See COPYING in top-level directory.
 */
#include <string.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-types.h"
#include "pvfs2-mgmt.h"

extern job_context_id pint_client_sm_context;

/* state function prototypes */
static int mgmt_iterate_handles_list_setup_msgpair(
    PINT_client_sm * sm_p,
    job_status_s * js_p);
static int mgmt_iterate_handles_list_cleanup(
    PINT_client_sm * sm_p,
    job_status_s * js_p);
static int iterate_handles_list_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i);

%%

machine pvfs2_client_mgmt_iterate_handles_list_sm(
    setup_msgpair, 
    xfer_msgpair, 
    cleanup)
{

    state setup_msgpair
    {
	run mgmt_iterate_handles_list_setup_msgpair;
	success => xfer_msgpair;
	default => cleanup;
    }

    state xfer_msgpair
    {
	jump pvfs2_client_msgpairarray_sm;
	default => cleanup;
    }

    state cleanup
    {
	run mgmt_iterate_handles_list_cleanup;
	default => terminate;
    }
}

%%

/* PVFS_mgmt_iterate_handles_list()
 *
 * iterates through all of the handles in a given collection for each server
 *
 * returns 0 on success, -PVFS_error on failure
 */
int PVFS_mgmt_iterate_handles_list(
    PVFS_fs_id fs_id,
    PVFS_credentials credentials,
    PVFS_handle ** handle_matrix,
    int *handle_count_array,
    PVFS_ds_position * position_array,
    PVFS_id_gen_t * addr_array,
    int server_count)
{
    int ret;
    PINT_client_sm *sm_p;
    PVFS_error error;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_mgmt_iterate_handles_list() entered.\n");

    if (server_count < 1 || !handle_matrix || !position_array 
	|| !handle_count_array || !addr_array)
    {
	return(-PVFS_EINVAL);
    }

    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL) return -PVFS_ENOMEM;

    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;
    sm_p->u.iterate_handles_list.fs_id = fs_id;
    sm_p->u.iterate_handles_list.server_count = server_count;
    sm_p->u.iterate_handles_list.addr_array = addr_array;
    sm_p->u.iterate_handles_list.handle_matrix = handle_matrix;
    sm_p->u.iterate_handles_list.handle_count_array = handle_count_array;
    sm_p->u.iterate_handles_list.position_array = position_array;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_iterate_handles_list "
                 "calling PINT_client_state_machine_post()\n");

    /* do something to kick off processing */
    ret = PINT_client_state_machine_post(
        sm_p, PVFS_MGMT_ITERATE_HANDLES_LIST);
    if(ret < 0)
    {
	/* this should not fail under normal conditions */
	assert(0);
	gossip_lerr("Error: PINT_client_state_machine_post() failure.\n");
	return(ret);
    }

    /* while !done call progress function */
    while (!sm_p->op_complete && ret == 0)
    {
	gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_iterate_handles_list "
                     "calling PINT_client_state_machine_test()\n");
	ret = PINT_client_state_machine_test();
    }

    if(ret < 0)
    {
	gossip_lerr("Error: PINT_client_state_machine_test() failure.\n");
	return(ret);
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_mgmt_iterate_handles_list completed\n");

    /* save our return value */
    error = sm_p->error_code;

    /* clean up after ourselves */
    free(sm_p);
    return error;
}

static int mgmt_iterate_handles_list_setup_msgpair(
    PINT_client_sm * sm_p,
    job_status_s * js_p)
{
    int i;
    int j;
    PINT_client_sm_msgpair_state *msg_p;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "iterate_handles_list state: "
                 "mgmt_iterate_handles_list_setup_msgpair\n");

    /* allocate memory for msgpair array */
    sm_p->msgarray_count = sm_p->u.iterate_handles_list.server_count;
    sm_p->msgarray = (PINT_client_sm_msgpair_state *)
    malloc((sm_p->msgarray_count)*sizeof(PINT_client_sm_msgpair_state));
    if(!sm_p->msgarray)
    {
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    /* setup msgpair array */
    j=0;
    for(i=0; i<sm_p->u.iterate_handles_list.server_count; i++)
    {
	msg_p = &sm_p->msgarray[j];

	/* skip servers that have already reached end */
	/* TODO: use a better #define or something for ITERATE_END */
	if(sm_p->u.iterate_handles_list.position_array[i]
	    == PVFS_ITERATE_END)
	{
	    sm_p->msgarray_count--;
	    sm_p->u.iterate_handles_list.handle_count_array[i] = 0;
	}
	else
	{
	    PINT_SERVREQ_MGMT_ITERATE_HANDLES_FILL(msg_p->req,
		*sm_p->cred_p,
		sm_p->u.iterate_handles_list.fs_id,
		sm_p->u.iterate_handles_list.handle_count_array[i],
		sm_p->u.iterate_handles_list.position_array[i]);
	    j++;
	    msg_p->fs_id = sm_p->u.iterate_handles_list.fs_id;
	    msg_p->handle = PVFS_HANDLE_NULL;
	    msg_p->comp_fn = iterate_handles_list_comp_fn;
	    msg_p->svr_addr = sm_p->u.iterate_handles_list.addr_array[i];
	}
    }

    /* TODO: be nicer about this, user called function too many times */
    assert(sm_p->msgarray_count > 0);

    /* immediate return: next state jumps to msgpairarray machine */
    js_p->error_code = 0;
    return(1);
}

static int mgmt_iterate_handles_list_cleanup(
    PINT_client_sm * sm_p,
    job_status_s * js_p)
{
    if(sm_p->msgarray)
	free(sm_p->msgarray);

    sm_p->error_code = js_p->error_code;
    sm_p->op_complete = 1;

    return(0);
}

static int iterate_handles_list_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i)
{
    int j = 0;
    PINT_client_sm* sm_p = (PINT_client_sm*)v_p;

    /* if this particular request was successful, then collect info from 
     * response
     */
    if(sm_p->msgarray[i].op_status == 0)
    {
	/* first, we have to match this up with the correct array entry */
	for(j=0; j<sm_p->u.iterate_handles_list.server_count; j++)
	{
	    if(sm_p->msgarray[i].svr_addr 
		== sm_p->u.iterate_handles_list.addr_array[j])
		break;
	}
	assert(j != sm_p->u.iterate_handles_list.server_count);

	sm_p->u.iterate_handles_list.handle_count_array[j]
	    = resp_p->u.mgmt_iterate_handles.handle_count;
	sm_p->u.iterate_handles_list.position_array[j]
	    = resp_p->u.mgmt_iterate_handles.position;
	memcpy(sm_p->u.iterate_handles_list.handle_matrix[j],
	    resp_p->u.mgmt_iterate_handles.handle_array,
	    resp_p->u.mgmt_iterate_handles.handle_count
		* sizeof(PVFS_handle));
    }
 
    /* if this is the last response, check all of the status values and 
     * return error code if any requests failed 
     */
    if(i == (sm_p->msgarray_count -1))
    {
	for(j=0; j<sm_p->msgarray_count; j++)
	{
	    if(sm_p->msgarray[j].op_status != 0)
	    {
		return(sm_p->msgarray[j].op_status);
	    }
	}
    }
   
    return(0);
}


/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ts=8 sts=4 sw=4 noexpandtab
 */
