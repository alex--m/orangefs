/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pvfs2-mgmt.h"
#include "pint-servreq.h"
#include "pint-bucket.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

static int mgmt_event_mon_list_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mgmt_event_mon_list_cleanup(
    PINT_client_sm *sm_p, job_status_s *js_p);

/* completion function prototypes */
static int event_mon_list_comp_fn(
    void* v_p,
    struct PVFS_server_resp* resp_p,
    int i);

%%

machine pvfs2_client_mgmt_event_mon_list_sm(setup_msgpair,
                                            xfer_msgpair,
                                            cleanup)
{
    state setup_msgpair
    {
        run mgmt_event_mon_list_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_client_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_event_mon_list_cleanup;
        default => terminate;
    }
}

%%

int PVFS_mgmt_event_mon_list(PVFS_fs_id fs_id,
                             PVFS_credentials credentials,
                             struct PVFS_mgmt_event** event_matrix,
                             PVFS_BMI_addr_t *addr_array,
                             int server_count,
                             int event_count)
{
    int ret = -PVFS_EINVAL;
    PINT_client_sm *sm_p = NULL;
    PVFS_error error;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_mgmt_event_mon_list entered\n");

    if ((server_count < 1) || (event_count < 1) ||
        !event_matrix || !addr_array)
    {
        return(-PVFS_EINVAL);
    }

    sm_p = (PINT_client_sm *)malloc(sizeof(*sm_p));
    if (!sm_p)
    {
        return -PVFS_ENOMEM;
    }
    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;

    sm_p->u.event_mon_list.fs_id = fs_id;
    sm_p->u.event_mon_list.event_matrix = event_matrix;
    sm_p->u.event_mon_list.server_count = server_count;
    sm_p->u.event_mon_list.event_count = event_count;
    sm_p->u.event_mon_list.addr_array = addr_array;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_event_mon_list "
                 "calling PINT_client_state_machine_post()\n");

    ret = PINT_client_state_machine_post(sm_p, PVFS_MGMT_EVENT_MON_LIST);
    if (ret < 0)
    {
        gossip_lerr("Error: PINT_client_state_machine_post() failure.\n");
        free(sm_p);
        return ret;
    }

    while (!sm_p->op_complete && (ret == 0))
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_event_mon_list "
                     "calling PINT_client_state_machine_test()\n");
        ret = PINT_client_state_machine_test();
    }

    if (ret < 0)
    {
        gossip_lerr("Error: PINT_client_state_machine_test() failure.\n");
        free(sm_p);
        return ret;
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_mgmt_event_mon_list completed\n");

    error = sm_p->error_code;

    free(sm_p);
    return error;
}

static int mgmt_event_mon_list_setup_msgpair(PINT_client_sm *sm_p,
                                             job_status_s *js_p)
{
    int i = 0;
    PINT_client_sm_msgpair_state *msg_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "event_mon_list state: "
                 "mgmt_event_mon_list_setup_msgpair\n");

    js_p->error_code = 0;

    sm_p->msgarray_count = sm_p->u.event_mon_list.server_count;

    sm_p->msgarray = (PINT_client_sm_msgpair_state *)malloc(
        (sm_p->msgarray_count * sizeof(PINT_client_sm_msgpair_state)));
    if (!sm_p->msgarray)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return 1;
    }

    for(i = 0; i < sm_p->msgarray_count; i++)
    {
        msg_p = &sm_p->msgarray[i];

        PINT_SERVREQ_MGMT_EVENT_MON_FILL(
            msg_p->req,
            *sm_p->cred_p,
            sm_p->u.event_mon_list.event_count);

        msg_p->fs_id = sm_p->u.event_mon_list.fs_id;
        msg_p->handle = PVFS_HANDLE_NULL;
        msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
        msg_p->comp_fn = event_mon_list_comp_fn;
        msg_p->svr_addr = sm_p->u.event_mon_list.addr_array[i];
    }
    return 1;
}

static int mgmt_event_mon_list_cleanup(PINT_client_sm *sm_p,
                                       job_status_s *js_p)
{
    if (sm_p->msgarray)
    {
        free(sm_p->msgarray);
    }

    sm_p->error_code  = js_p->error_code;
    sm_p->op_complete = 1;
    return 0;
}

static int event_mon_list_comp_fn(void* v_p,
                                  struct PVFS_server_resp* resp_p,
                                  int i)
{
    int j = 0;
    PINT_client_sm *sm_p = (PINT_client_sm *) v_p;

    /* if this particular request was successful, then store the 
     * performance information in an array to be returned to caller
     */
    if (sm_p->msgarray[i].op_status == 0)
    {
        memcpy(sm_p->u.event_mon_list.event_matrix[i],
               resp_p->u.mgmt_event_mon.event_array,
               resp_p->u.mgmt_event_mon.event_count
               * sizeof(struct PVFS_mgmt_event));
    }
 
    /* if this is the last response, check all of the status values and 
     * return error code if any requests failed 
     */
    if (i == (sm_p->msgarray_count -1))
    {
        for(j = 0; j < sm_p->msgarray_count; j++)
        {
            if (sm_p->msgarray[j].op_status != 0)
            {
                return sm_p->msgarray[j].op_status;
            }
        }
    }
    return 0;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
