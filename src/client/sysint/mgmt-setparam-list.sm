/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"

#include "pinode-helper.h"
#include "pint-dcache.h"
#include "pint-servreq.h"
#include "pint-bucket.h"
#include "pcache.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

/* state function prototypes */
static int mgmt_setparam_list_setup_msgpair(PINT_client_sm *sm_p,
					job_status_s *js_p);

static int mgmt_setparam_list_cleanup(PINT_client_sm *sm_p,
			  job_status_s *js_p);

static int root_check_comp_fn(void* v_p, struct PVFS_server_resp * resp_p,
    int i);
static int collect_old_values_comp_fn(void* v_p, struct PVFS_server_resp* resp_p,
    int i);

%%

machine pvfs2_client_mgmt_setparam_list_sm(
    setup_msgpair,
    xfer_msgpair,
    cleanup)
{

    state setup_msgpair {
	run mgmt_setparam_list_setup_msgpair;
	success => xfer_msgpair;
	default => cleanup;
    }

    state xfer_msgpair {
	jump pvfs2_client_msgpairarray_sm;
	default => cleanup;
    }

    state cleanup {
	run mgmt_setparam_list_cleanup;
	default => setup_msgpair;
    }
}

%%

int PVFS_mgmt_setparam_list(
    PVFS_fs_id fs_id,
    PVFS_credentials credentials,
    enum PVFS_server_param param,
    int64_t value,
    PVFS_id_gen_t* addr_array,
    int64_t* old_value_array,
    int count)
{
    int ret;
    PINT_client_sm *sm_p;
    PVFS_error error;

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_setparam_list entered\n");

    if (param == PVFS_SERV_PARAM_INVALID) 
    {
	return -PVFS_EINVAL;
    }

    /* build PINT_client_sm structure */
    /* TODO: KEEP A CACHE OF THESE AROUND SO WE'RE NOT ALWAYS MALLOC'ING? */
    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL) return -PVFS_ENOMEM;

    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;
    sm_p->u.setparam_list.param = param;
    sm_p->u.setparam_list.value = value;
    sm_p->u.setparam_list.fs_id = fs_id;
    sm_p->u.setparam_list.addr_array = addr_array;
    sm_p->u.setparam_list.count = count;
    sm_p->u.setparam_list.old_value_array = old_value_array;

    /* safety */
    if(old_value_array)
	memset(old_value_array, 0, count*sizeof(int64_t));

    gossip_debug(CLIENT_DEBUG,
		 "PVFS_mgmt_setparam_list calling PINT_client_state_machine_post()\n");

    /* do something to kick off processing */
    ret = PINT_client_state_machine_post(sm_p, PVFS_MGMT_SETPARAM_LIST);
    if(ret < 0)
    {
	/* this should not fail under normal conditions */
	assert(0);
	gossip_lerr("Error: PINT_client_state_machine_post() failure.\n");
	return(ret);
    }

    /* while !done call progress function */
    while (!sm_p->op_complete && ret == 0) {
	gossip_debug(CLIENT_DEBUG,
		     "PVFS_mgmt_setparam_list calling PINT_client_state_machine_test()\n");
	ret = PINT_client_state_machine_test();
    }
    if(ret < 0)
    {
	gossip_lerr("Error: PINT_client_state_machine_test() failure.\n");
	return(ret);
    }

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_setparam_list completed\n");

    /* save our return value */
    error = sm_p->error_code;

    /* clean up after ourselves */
    free(sm_p);
    return error;
}

static int mgmt_setparam_list_setup_msgpair(PINT_client_sm *sm_p,
					job_status_s *js_p)
{
    int i;
    PINT_client_sm_msgpair_state *msg_p;

    gossip_debug(CLIENT_DEBUG, "setparam_list state: mgmt_setparam_list_setup_msgpair\n");

    /* allocate memory for msgpair array */
    sm_p->msgarray_count = sm_p->u.setparam_list.count;
    sm_p->msgarray = (PINT_client_sm_msgpair_state *)
    malloc(sm_p->msgarray_count*sizeof(PINT_client_sm_msgpair_state));
    if(!sm_p->msgarray)
    {
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    /* setup msgpair array */
    for(i=0; i<sm_p->msgarray_count; i++)
    {
	msg_p = &sm_p->msgarray[i];

	PINT_SERVREQ_MGMT_SETPARAM_FILL(msg_p->req,
	    *sm_p->cred_p,
	    sm_p->u.setparam_list.fs_id,
	    sm_p->u.setparam_list.param,
	    sm_p->u.setparam_list.value);

	msg_p->fs_id = sm_p->u.setparam_list.fs_id;
	msg_p->handle = PVFS_HANDLE_NULL;
	if(sm_p->u.setparam_list.param == PVFS_SERV_PARAM_ROOT_CHECK)
	    msg_p->comp_fn = root_check_comp_fn;
	else
	    msg_p->comp_fn = collect_old_values_comp_fn;
	msg_p->svr_addr = sm_p->u.setparam_list.addr_array[i];
    }

    /* immediate return: next state jumps to msgpairarray machine */
    js_p->error_code = 0;
    return(1);
}

static int mgmt_setparam_list_cleanup(PINT_client_sm *sm_p,
			  job_status_s *js_p)
{
    if(sm_p->msgarray)
	free(sm_p->msgarray);

    sm_p->error_code = js_p->error_code;
    sm_p->op_complete = 1;

    return(0);
}


/* collect_old_values_comp_fn()
 *
 * completion function that assembles old values for parameters
 * when appropriate
 *
 * returns 0 on success, -PVFS_error on failure
 */
static int collect_old_values_comp_fn(void* v_p, struct PVFS_server_resp* resp_p,
    int i)
{
    PINT_client_sm* sm_p = (PINT_client_sm*)v_p;
    int j;

    if(sm_p->msgarray[i].op_status == 0 && sm_p->u.setparam_list.old_value_array)
	sm_p->u.setparam_list.old_value_array[i] = 
	    resp_p->u.mgmt_setparam.old_value;
 
    /* if this is the last response, check all of the status values and 
     * return error code if any requests failed 
     */
    if(i == (sm_p->msgarray_count -1))
    {
	for(j=0; j<sm_p->msgarray_count; j++)
	{
	    if(sm_p->msgarray[j].op_status != 0)
	    {
		return(sm_p->msgarray[j].op_status);
	    }
	}
    }

    return(0);
}

/* root_check_comp_fn()
 *
 * completion function for PVFS_SERV_PARAM_ROOT_CHECK parameter; it 
 * handles this special case operation in which we want just one server to
 * return success and all others to return -PVFS_ENOENT.
 *
 * returns 0 if exactly one server claims ownership of root handle,
 * -PVFS_error on failure
 */
static int root_check_comp_fn(void* v_p, struct PVFS_server_resp * resp_p,
    int i)
{
    int j = 0;
    PINT_client_sm* sm_p = (PINT_client_sm*)v_p;
    int success_flag = 0;

    if(i < (sm_p->msgarray_count -1))
    {
	/* just return invalid, we only compute the correct error
	 * code after the final response has been successfully received
	 */
	return(-PVFS_EINVAL);
    }

    /* if we hit this point, it must be the last response.  Look at all of
     * the responses, and return success if one response has a zero status 
     * and all other responses have -PVFS_ENOENT.
     */
    for(j=0; j<=i; j++)
    {
	if(sm_p->msgarray[j].op_status == 0)
	{
	    if(success_flag)
	    {
		/* whoops- too many servers say that they have the root handle */
		return(-PVFS_EALREADY);
	    }
	    success_flag = 1;
	}
	else if(sm_p->msgarray[j].op_status != -PVFS_ENOENT)
	{
	    /* one of the servers returned an odd error code */
	    return(sm_p->msgarray[j].op_status);
	}
    }

    /* check to make sure someone claimed root handle */
    if(!success_flag)
	return(-PVFS_ENOENT);
    else
	return(0);
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
