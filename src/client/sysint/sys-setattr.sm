/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-servreq.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "shared-state-methods.h"
#include "pint-util.h"

extern job_context_id pint_client_sm_context;

static int setattr_init(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int setattr_msg_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int setattr_msg_failure(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int setattr_cleanup(
    PINT_client_sm *sm_p, job_status_s *js_p);

static int setattr_msg_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);

%%

machine pvfs2_client_setattr_sm(
    init,
    setattr_getattr_setup_msgpair,
    setattr_getattr_xfer_msgpair,
    setattr_getattr_failure,
    setattr_msg_setup_msgpair,
    setattr_msg_xfer_msgpair,
    setattr_msg_failure,
    cleanup)
{
    state init
    {
        run setattr_init;
        default => setattr_getattr_setup_msgpair;
    }

    state setattr_getattr_setup_msgpair
    {
        run PINT_sm_common_object_getattr_setup_msgpair;
        success => setattr_getattr_xfer_msgpair;
        default => setattr_getattr_failure;
    }

    state setattr_getattr_xfer_msgpair
    {
        jump pvfs2_client_getattr_acache_sm;
        success => setattr_msg_setup_msgpair;
        default => setattr_getattr_failure;
    }

    state setattr_getattr_failure
    {
        run PINT_sm_common_object_getattr_failure;
        default => cleanup;
    }

    state setattr_msg_setup_msgpair
    {
        run setattr_msg_setup_msgpair;
        success => setattr_msg_xfer_msgpair;
        default => cleanup;
    }

    state setattr_msg_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => cleanup;
        default => setattr_msg_failure;
    }

    state setattr_msg_failure
    {
        run setattr_msg_failure;
        default => cleanup;
    }

    state cleanup
    {
        run setattr_cleanup;
        default => terminate;
    }
}

%%

PVFS_error PVFS_isys_setattr(
    PVFS_object_ref ref,
    PVFS_sys_attr attr,
    PVFS_credentials *credentials,
    PVFS_sys_op_id *op_id,
    void *user_ptr)
{
    PVFS_error ret = -PVFS_EINVAL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_isys_setattr entered\n");

    if ((ref.handle == PVFS_HANDLE_NULL) ||
        (ref.fs_id == PVFS_FS_ID_NULL))
    {
        gossip_err("invalid (NULL) required argument\n");
        return ret;
    }

    /*
      make sure the caller didn't set invalid mask bits; in
      particular, note that you can't set size here
    */
    if ((attr.mask & ~PVFS_ATTR_SYS_ALL_SETABLE) != 0)
    {
        gossip_lerr("PVFS_isys_setattr() failure: invalid attributes "
                    "specified\n");
        return ret;
    }

    sm_p = (PINT_client_sm *)malloc(sizeof(*sm_p));
    if (sm_p == NULL)
    {
        return -PVFS_ENOMEM;
    }
    memset(sm_p, 0, sizeof(*sm_p));

    PINT_init_msgarray_params(&sm_p->msgarray_params);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    sm_p->object_ref = ref;
    PVFS_util_copy_sys_attr(&sm_p->u.setattr.sys_attr, &attr);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "Doing setattr on handle %Lu "
                 "on fs %d\n", Lu(ref.handle),
                 ref.fs_id);

    return PINT_client_state_machine_post(
        sm_p, PVFS_SYS_SETATTR, op_id, user_ptr);
}


PVFS_error PVFS_sys_setattr(
    PVFS_object_ref ref,
    PVFS_sys_attr attr,
    PVFS_credentials *credentials)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_setattr entered\n");

    ret = PVFS_isys_setattr(ref, attr, credentials, &op_id, NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_setattr call", ret);
        error = ret;
    }
    else
    {
        ret = PINT_sys_wait(op_id, "setattr", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
    }

    PINT_sys_release(op_id);
    return error;
}

/****************************************************************/

static int setattr_init(PINT_client_sm *sm_p,
                        job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "setattr state: init\n");

    assert(js_p->error_code == 0);
    return 1;
}

static int setattr_msg_comp_fn(void *v_p,
                               struct PVFS_server_resp *resp_p,
                               int index)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "setattr_msg_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_SETATTR);
    return resp_p->status;
}

static int setattr_msg_setup_msgpair(PINT_client_sm *sm_p,
                                     job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    PVFS_object_attr *attr = NULL;
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_time orig_mtime = sm_p->u.setattr.sys_attr.mtime;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "setattr state: "
                 "setattr_msg_setup_msgpair\n");

    js_p->error_code = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG," setattr: posting setattr req\n");

    attr = (sm_p->acache_hit ?
            &sm_p->pinode->attr :
            &sm_p->acache_attr);
    assert(attr);

    PINT_init_msgpair(sm_p, msg_p);

    /* encode the mtime as a directory version */
    sm_p->u.setattr.sys_attr.mtime =
        PVFS_util_mktime_version(sm_p->u.setattr.sys_attr.mtime);

    gossip_debug(
        GOSSIP_CLIENT_DEBUG, "using mtime %Lu and version %Lu\n",
        Lu(orig_mtime), Lu(sm_p->u.setattr.sys_attr.mtime));

    PINT_SERVREQ_SETATTR_FILL(
        msg_p->req,
        *sm_p->cred_p,
        sm_p->object_ref.fs_id,
        sm_p->object_ref.handle,
        attr->objtype,
        sm_p->u.setattr.sys_attr,
        PVFS_ATTR_COMMON_TYPE);

    if (attr->objtype == PVFS_TYPE_METAFILE)
    {
        if (attr->mask & PVFS_ATTR_META_DFILES)
        {
            msg_p->req.u.setattr.attr.u.meta.dfile_array =
                attr->u.meta.dfile_array;
            msg_p->req.u.setattr.attr.u.meta.dfile_count =
                attr->u.meta.dfile_count;
            msg_p->req.u.setattr.attr.mask |= PVFS_ATTR_META_DFILES;
        }

        if (attr->mask & PVFS_ATTR_META_DIST)
        {
            msg_p->req.u.setattr.attr.u.meta.dist =
                attr->u.meta.dist;
            msg_p->req.u.setattr.attr.u.meta.dist_size =
                attr->u.meta.dist_size;
            msg_p->req.u.setattr.attr.mask |= PVFS_ATTR_META_DIST;
        }
    }

    msg_p->fs_id = sm_p->object_ref.fs_id;
    msg_p->handle = sm_p->object_ref.handle;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = setattr_msg_comp_fn;

    ret = PINT_cached_config_map_to_server(
        &msg_p->svr_addr, msg_p->handle, msg_p->fs_id);

    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }
    return 1;
}

static int setattr_msg_failure(PINT_client_sm *sm_p,
                               job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "setattr state: setattr_msg_failure\n");

    assert(js_p->error_code != 0);
    if (sm_p->acache_hit)
    {
        PINT_acache_invalidate(sm_p->object_ref);
        sm_p->acache_hit = 0;
        sm_p->pinode = NULL;
    }
    else
    {
        PINT_free_object_attr(&sm_p->acache_attr);
    }
    return 1;
}

static int setattr_cleanup(PINT_client_sm *sm_p,
                           job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "setattr state: cleanup\n");

    sm_p->error_code = js_p->error_code;

    if (sm_p->acache_hit)
    {
        /* overwrite all attribute fields that might have changed */
        sm_p->pinode->attr.owner = sm_p->u.setattr.sys_attr.owner;
        sm_p->pinode->attr.group = sm_p->u.setattr.sys_attr.group;
        sm_p->pinode->attr.perms = sm_p->u.setattr.sys_attr.perms;
        sm_p->pinode->attr.atime = sm_p->u.setattr.sys_attr.atime;
        sm_p->pinode->attr.mtime = sm_p->u.setattr.sys_attr.mtime;
        sm_p->pinode->attr.ctime = sm_p->u.setattr.sys_attr.ctime;

        PINT_acache_set_valid(sm_p->pinode);
        sm_p->acache_hit = 0;
        sm_p->pinode = NULL;
    }
    else if (js_p->error_code == 0)
    {
        /*
          this has been freed already in the failure handler; only
          free on success
        */
        PINT_free_object_attr(&sm_p->acache_attr);
    }
    PVFS_util_release_sys_attr(&sm_p->u.setattr.sys_attr);

    sm_p->op_complete = 1;
    return 0;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
