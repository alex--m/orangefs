/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/** \file
 *  \ingroup mgmtint
 *
 *  PVFS2 management interface routines for setting run-time parameters
 *  on a list of servers.  These are currently used primarily for file
 *  system repair purposes, specifically to put the servers in a special
 *  administrative mode to avoid file system changes while repairs are
 *  underway.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

static int getparam_comp_fn(void* v_p,
                            struct PVFS_server_resp *resp_p,
                            int i);

%%

machine pvfs2_client_mgmt_getparam_sm
{
    state init
    {
        run mgmt_getparam_init;
        success => xfer_msgpair;
        default => cleanup;
    }
    
    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_getparam_cleanup;
        default => terminate;
    }
}

%%

/** Initiate setting of a run-time server parameter on a list of servers.
 */
PVFS_error PVFS_imgmt_getparam(
        PVFS_fs_id fs_id,
        const PVFS_credential *credential,
        PVFS_BMI_addr_t *addr_array,
        int count,
        struct PVFS_mgmtresp_getparam *getparam_out,
        PVFS_hint hints,
        PVFS_mgmt_op_id *op_id,
        void *user_ptr)
{
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_imgmt_getparam entered\n");

    PINT_smcb_alloc(&smcb,
                    PVFS_MGMT_GETPARAM_LIST,
                    sizeof(struct PINT_client_sm),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);
    if (smcb == NULL)
    {
        return -PVFS_ENOMEM;
    }
    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, fs_id);
    PINT_init_sysint_credential(sm_p->cred_p, credential);

    sm_p->u.getparam.fs_id = fs_id;
    sm_p->u.getparam.addr_array = addr_array;
    sm_p->u.getparam.stats = getparam_out;
    sm_p->u.getparam.count = count;
    PVFS_hint_copy(hints, &sm_p->hints);

    return PINT_client_state_machine_post(smcb,
                                          op_id,
                                          user_ptr);
}

/** Set a run-time parameter on a list of servers.
 */
PVFS_error PVFS_mgmt_getparam(
        PVFS_fs_id fs_id,
        const PVFS_credential *credential,
        PVFS_BMI_addr_t *addr_array,
        int count,
        struct PVFS_mgmtresp_getparam *getparam_out,
        PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "%s entered\n", __func__);

    ret = PVFS_imgmt_getparam(fs_id,
                              credential,
                              addr_array,
                              count,
                              getparam_out,
                              hints,
                              &op_id,
                              NULL);

    if (ret)
    {
        PVFS_perror_gossip("PVFS_imgmt_getparam call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_mgmt_wait(op_id, "getparam", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_mgmt_wait call", ret);
            error = ret;
        }
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG, "%s completed\n", __func__);

    PINT_mgmt_release(op_id);
    return error;
}

static int mgmt_getparam_init(struct PINT_smcb *smcb,
                              job_status_s *js_p)
{    
    int ret = 0;
    struct PINT_client_sm *sm_p;
    PVFS_capability capability;
    
    gossip_debug(GOSSIP_CLIENT_DEBUG, "mgmt_getparam_init called\n");

    PINT_null_capability(&capability);
    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT); 
    PINT_sm_msgpair_state *msg_p = NULL;

    ret = PINT_msgpairarray_init(&sm_p->msgarray_op,
                                  sm_p->u.getparam.count);
    if(ret != 0)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    msg_p = &((&sm_p->msgarray_op)->msgarray[0]);

    PINT_SERVREQ_MGMT_GETPARAM_FILL(msg_p->req,
	                            capability,
                                    sm_p->hints);

    msg_p->fs_id = sm_p->u.getparam.fs_id;
    msg_p->handle = PVFS_HANDLE_NULL;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = getparam_comp_fn;
    //for single server using 0, else i to be used below
    msg_p->svr_addr = sm_p->u.getparam.addr_array[0];

    PINT_cleanup_capability(&capability);

    /*immediate return: next state jumps to msgpairarray machine i*/
    js_p->error_code = 0;

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static int getparam_comp_fn(void* v_p,
                            struct PVFS_server_resp *resp_p,
                            int i) //in case trying for multiple servers
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM);

    assert(resp_p->op == PVFS_SERV_MGMT_GETPARAM);

    if(resp_p->status == 0)
    {
        sm_p->u.getparam.stats->history = resp_p->u.mgmt_getparam.history;
        sm_p->u.getparam.stats->interval = resp_p->u.mgmt_getparam.interval;
        sm_p->u.getparam.stats->key_count = resp_p->u.mgmt_getparam.key_count;
    }

    return resp_p->status;
}

static PINT_sm_action mgmt_getparam_cleanup(struct PINT_smcb *smcb,
                                            job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_error error = js_p->error_code;

    PINT_msgpairarray_destroy(&sm_p->msgarray_op);

    sm_p->error_code  = error;

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
