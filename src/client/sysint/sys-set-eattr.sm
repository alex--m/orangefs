/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>
#include <unistd.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "pvfs2-util.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-servreq.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

/* state function prototypes */
static int set_eattr_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int set_eattr_cleanup(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int set_eattr_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int i);

%%

machine pvfs2_client_set_eattr_sm(
    setup_msgpair,
    xfer_msgpair,
    cleanup)
{
    state setup_msgpair
    {
        run set_eattr_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run set_eattr_cleanup;
        default => terminate;
    }
}

%%

PVFS_error PVFS_isys_seteattr(
        PVFS_object_ref ref,
        PVFS_credentials *credentials,
        PVFS_ds_keyval *key_p,
        PVFS_ds_keyval *val_p,
        PVFS_sys_op_id *op_id,
        void *user_ptr)
{
    int ret = -PVFS_EINVAL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PINT_isys_set_eattr entered\n");

    if ((ref.handle == PVFS_HANDLE_NULL) ||
       (ref.fs_id == PVFS_FS_ID_NULL))
    {
        gossip_err("invalid (NULL) required argument\n");
	return ret;
    }

    sm_p = (PINT_client_sm *)malloc(sizeof(*sm_p));
    if (sm_p == NULL)
    {
        return -PVFS_ENOMEM;
    }
    memset(sm_p, 0, sizeof(*sm_p));

    PINT_init_msgarray_params(&sm_p->msgarray_params);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    sm_p->u.seteattr.key_p = key_p;
    sm_p->u.seteattr.val_p = val_p;
    sm_p->error_code = 0;
    sm_p->object_ref = ref;

    return PINT_client_state_machine_post(
            sm_p, PVFS_SYS_SETEATTR, op_id, user_ptr);
}

PVFS_error PVFS_sys_seteattr(
        PVFS_object_ref ref,
        PVFS_credentials *credentials,
        PVFS_ds_keyval *key_p,
        PVFS_ds_keyval *val_p)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_seteattr entered\n");

    ret = PVFS_isys_seteattr(ref, credentials,
            key_p, val_p, &op_id, NULL);

    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_seteattr call", ret);
        error = ret;
    }
    else
    {
        ret = PINT_sys_wait(op_id, "seteattr", &error);
        if (ret)
        {
             PVFS_perror_gossip("PVFS_sys_wait call", ret);
             error = ret;
        }
    }

    PINT_sys_release(op_id);
    return error;
}

static int set_eattr_setup_msgpair(PINT_client_sm *sm_p,
                                           job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
		"get_eattr state: set_eattr_setup_msgpair\n");

    PINT_SERVREQ_SETEATTR_FILL(
            sm_p->msgpair.req,
            (*sm_p->cred_p),
            sm_p->object_ref.fs_id,
            sm_p->object_ref.handle,
            (*sm_p->u.seteattr.key_p),
            (*sm_p->u.seteattr.val_p)
            );

    sm_p->msgarray = &(sm_p->msgpair);
    sm_p->msgarray_count = 1;
    sm_p->msgpair.fs_id = sm_p->object_ref.fs_id;
    sm_p->msgpair.handle = sm_p->object_ref.handle;
    sm_p->msgpair.retry_flag = PVFS_MSGPAIR_RETRY;
    sm_p->msgpair.comp_fn = set_eattr_comp_fn;

    ret = PINT_cached_config_map_to_server(
            &sm_p->msgpair.svr_addr,
            sm_p->msgpair.handle,
            sm_p->msgpair.fs_id);

    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = 0;
    }
    return 1;
}

static int set_eattr_cleanup(PINT_client_sm *sm_p,
                                    job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG,
		"get_eattr state: set_eattr_cleanup\n");
    sm_p->error_code  = js_p->error_code;
    sm_p->op_complete = 1;

    return 0;
}

static int set_eattr_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i)
{
    int j = 0;
    int ret = 0;
    gossip_debug(GOSSIP_CLIENT_DEBUG,
		"set_eattr completion fn: set_eattr_comp_fn\n");
    PINT_client_sm *sm_p = (PINT_client_sm *)v_p;

    /* only posted one msgpair */
    assert(i==0);

    /* no return value from set eattrib so just check status */

    if (sm_p->msgarray[i].op_status != 0)
    {
        ret = sm_p->msgarray[i].op_status;
    }

    /* if this is the last response, check all of the status values
     * and return error code if any requests failed
     */
    if (i == (sm_p->msgarray_count -1))
    {
	for (j=0; j < sm_p->msgarray_count; j++)
	{
	    if (sm_p->msgarray[j].op_status != 0)
	    {
		return(sm_p->msgarray[j].op_status);
	    }
	}
    }
    return ret;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
