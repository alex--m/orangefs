/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 *
 * PVFS2 system interface routines for 4 different operations that
 * support data versioning for the client.
 */

#include <string.h>
#include <assert.h>
#include <unistd.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "pvfs2-util.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

/* state function prototypes */
static PINT_sm_action version_init(
    struct PINT_smcb *smcb, job_status_s *js_p);
static PINT_sm_action version_setup_msgpair(
    struct PINT_smcb *smcb, job_status_s *js_p);
static PINT_sm_action version_cleanup(
    struct PINT_smcb *smcb, job_status_s *js_p);
static int version_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int i);

%%

nested machine pvfs2_client_version_sm
{
    state init
    {
	run version_init;
	default => getattr;
    }

    state getattr
    {
	jump pvfs2_client_getattr_sm;
	success => setup_msgpair;
        default => cleanup;
    }

    state setup_msgpair
    {
        run version_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run version_cleanup;
        default => terminate;
    }
}

%%

PVFS_error PVFS_isys_version(
    PVFS_object_ref ref,
    const PVFS_credentials *credentials,
    enum PVFS_version_op_type op_type,
    PVFS_sysresp_version *resp_p,
    bit_array_t *server_bit_arr,
    PVFS_id_gen_t op_var,
    PVFS_sys_op_id *op_id,
    void *user_ptr)
{
    int ret = -PVFS_EINVAL;
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;
    
    gossip_debug(GOSSIP_CLIENT_DEBUG,
		 "PINT_isys_version entered\n");
    
    if ((ref.handle == PVFS_HANDLE_NULL) ||
       (ref.fs_id == PVFS_FS_ID_NULL) || (resp_p == NULL))
    {
	gossip_err("invalid (NULL) required argument\n");
	return ret;
    }
    
    PINT_smcb_alloc(&smcb, PVFS_SYS_VERSION,
		    sizeof(struct PINT_client_sm),
		    client_op_state_get_machine,
		    client_state_machine_terminate,
		    pint_client_sm_context);
    if (smcb == NULL)
    {
        return -PVFS_ENOMEM;
    }
    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(&sm_p->msgarray_params, ref.fs_id);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    
/* AC - forget what this is for.  I believe it is necessary to copy to
 * state machine so that you have a copy */
    sm_p->u.version.op_type = op_type;
    sm_p->version.server_bit_array = server_bit_arr;
    sm_p->u.version.resp_p = resp_p;
    sm_p->u.version.op_var = op_var;
    sm_p->object_ref = ref;

    return PINT_client_state_machine_post(smcb,  op_id, user_ptr);
}

PVFS_error PVFS_sys_version(
    PVFS_object_ref ref,
    const PVFS_credentials *credentials,
    enum PVFS_version_op_type op_type,
    bit_array_t *server_bit_arr,
    PVFS_id_gen_t op_var,
    PVFS_sysresp_version *resp_p)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;
    
    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_version entered\n");
    
    ret = PVFS_isys_version(ref, credentials, op_type, resp_p, 
			    server_bit_arr, op_var,
			    &op_id, NULL);
    
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_version call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_sys_wait(op_id, "version", &error);
        if (ret)
{
	    PVFS_perror_gossip("PVFS_sys_wait call", ret);
	    error = ret;
        }
    }
    
    PINT_sys_release(op_id);
    return error;
}

static PINT_sm_action version_init(struct PINT_smcb *smcb,
				   job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "(%p) version state: "
		 "version_init\n", sm_p);

    assert(js_p->error_code == 0);

    PINT_SM_GETATTR_STATE_FILL(
	sm_p->getattr,
	sm_p->object_ref,
	PVFS_ATTR_META_ALL|PVFS_ATTR_COMMON_TYPE,
	PVFS_TYPE_METAFILE,
	0);

    return SM_ACTION_COMPLETE;
}


static PINT_sm_action version_setup_msgpair(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PVFS_object_attr *attr = NULL;

    attr = &sm_p->getattr.attr;
    assert(attr);

    sm_p->version.server_count = attr->u.meta.dfile_count;
    gossip_debug(GOSSIP_CLIENT_DEBUG,
		"version state: version_setup_msgpair\n");

    PINT_SERVREQ_VERSION_FILL(
            sm_p->msgpair.req,
            (*sm_p->cred_p),
            sm_p->object_ref.fs_id,
            sm_p->object_ref.handle,
            sm_p->u.version.op_type,
	    (uint32_t) sm_p->u.version.op_var,
	    sm_p->u.version.op_var,
	    sm_p->version.server_count,
	    sm_p->version.server_bit_array->numBits,
	    sm_p->version.server_bit_array->array);

    sm_p->msgarray = &(sm_p->msgpair);
    sm_p->msgarray_count = 1;
    sm_p->msgpair.fs_id = sm_p->object_ref.fs_id;
    sm_p->msgpair.handle = sm_p->object_ref.handle;
    sm_p->msgpair.retry_flag = PVFS_MSGPAIR_RETRY;
    sm_p->msgpair.comp_fn = version_comp_fn;

    ret = PINT_cached_config_map_to_server(
            &sm_p->msgpair.svr_addr,
            sm_p->msgpair.handle,
            sm_p->msgpair.fs_id);

    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = 0;
    }
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action version_cleanup(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_CLIENT_DEBUG,
		 "version state: version_cleanup\n");
    sm_p->error_code  = js_p->error_code;
    if(sm_p->error_code != 0)
    {
        PINT_acache_invalidate(sm_p->object_ref);
    }
    
    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

static int version_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i)
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    
    gossip_debug(GOSSIP_CLIENT_DEBUG,
		 "version completion fn: version_comp_fn\n");

    /* only posted one msgpair */
    assert(i==0);
    assert(resp_p->op == PVFS_SERV_VERSION);
    
    if(resp_p->status != 0)
        return resp_p->status;

    /* Copy the req to the PINT_client_sm */
    switch (sm_p->u.version.op_type)
    {
	case PVFS_GET_UNIQUE_ID:
	    sm_p->u.version.resp_p->u.unique_id_range.start = 
		resp_p->u.version.unique_id_start;
	    sm_p->u.version.resp_p->u.unique_id_range.count = 
		resp_p->u.version.unique_id_count;
	    break;
	case PVFS_GET_SNAPSHOT:
	    sm_p->version.snapshot.snapshot_id = 
		resp_p->u.version.snapshot_id;
	    sm_p->version.snapshot.min_snapshot_id = 
		resp_p->u.version.min_snapshot_id;
	    sm_p->version.snapshot.commit_tuple_count = 
		resp_p->u.version.commit_tuple_count;
	    assert(sm_p->version.snapshot.tmp_id_arr != NULL);
	    assert(sm_p->version.snapshot.commit_id_arr != NULL);
	    if ((sm_p->version.snapshot.tmp_id_arr = malloc(
		     sm_p->version.snapshot.commit_tuple_count * 
		     sizeof(PVFS_id_gen_t))) == NULL)
	    {
		gossip_err("version_comp_fn: malloc tmp_id_arr failed\n");
		return -1;
	    }
	    if ((sm_p->version.snapshot.commit_id_arr = malloc(
		     sm_p->version.snapshot.commit_tuple_count * 
		     sizeof(PVFS_id_gen_t))) == NULL)
	    {
		gossip_err("version_comp_fn: malloc commit_id_arr failed\n");
		return -1;
	    }
	    memcpy(sm_p->version.snapshot.tmp_id_arr,
		   resp_p->u.version.tmp_id_arr,  
		   sm_p->version.snapshot.commit_tuple_count *
		   sizeof(PVFS_id_gen_t));
	    memcpy(sm_p->version.snapshot.commit_id_arr,
		   resp_p->u.version.commit_id_arr,  
		   sm_p->version.snapshot.commit_tuple_count *
		   sizeof(PVFS_id_gen_t));
	    break;
	case PVFS_REMOVE_SNAPSHOT:
	case PVFS_COMMIT:
	    sm_p->u.version.resp_p->u.commit_id = resp_p->u.version.commit_id;
	    break;
	default:
	    break;
    }

    return 0;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
