/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-servreq.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"

/*
  PVFS_{i}sys_remove takes the following steps:

  - rmdirent the entry from the parent directory
  - getattr on the object to be removed
  - if the object is a directory
    - check if the dir is empty
    - if so, continue
    - if not, crdirent the previously rmdirent'd
      entry and return -PVFS_ENOTEMPTY
  - if the object is a metafile
    - remove all associated data files
  - remove the actual object specified
*/

extern job_context_id pint_client_sm_context;

enum
{
    MSGPAIR_RETURN_SUCCESS = 1,
    RMDIRENT_RETRY,
    CRDIRENT_RETRY
};

static int remove_init(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int remove_rmdirent_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int remove_generic_timer(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int remove_rmdirent_retry_or_fail(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int remove_crdirent_retry_or_fail(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int remove_crdirent_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int remove_cleanup(
    PINT_client_sm *sm_p, job_status_s *js_p);

static int remove_rmdirent_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int i);
static int remove_crdirent_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int i);

%%

machine pvfs2_client_remove_sm(
    init,
    cleanup,
    do_remove,
    rmdirent_setup_msgpair,
    rmdirent_xfer_msgpair,
    rmdirent_retry_or_fail,
    rmdirent_timer,
    crdirent_timer,
    crdirent_retry_or_fail,
    crdirent_setup_msgpair,
    crdirent_xfer_msgpair,
    crdirent_failure)
{
    state init
    {
        run remove_init;
        default => rmdirent_setup_msgpair;
    }

    state rmdirent_setup_msgpair
    {
        run remove_rmdirent_setup_msgpair;
        success => rmdirent_xfer_msgpair;
        default => rmdirent_retry_or_fail;
    }

    state rmdirent_xfer_msgpair
    {
        jump pvfs2_client_msgpairarray_sm;
        success => do_remove;
        MSGPAIR_RETURN_SUCCESS => do_remove;
        default => rmdirent_retry_or_fail;
    }

    state rmdirent_retry_or_fail
    {
        run remove_rmdirent_retry_or_fail;
	RMDIRENT_RETRY => rmdirent_timer;
        default => cleanup;
    }

    state do_remove
    {
        jump pvfs2_client_remove_helper_sm;
        success => cleanup;
        default => crdirent_setup_msgpair;
    }

    state crdirent_retry_or_fail
    {
        run remove_crdirent_retry_or_fail;
	CRDIRENT_RETRY => crdirent_timer;
        default => cleanup;
    }

    state crdirent_timer
    {
        run remove_generic_timer;
        default => crdirent_setup_msgpair;
    }

    state rmdirent_timer
    {
        run remove_generic_timer;
        default => rmdirent_setup_msgpair;
    }

    state crdirent_setup_msgpair
    {
        run remove_crdirent_setup_msgpair;
        success => crdirent_xfer_msgpair;
        default => crdirent_retry_or_fail;
    }

    state crdirent_xfer_msgpair
    {
        jump pvfs2_client_msgpairarray_sm;
        success => cleanup;
        MSGPAIR_RETURN_SUCCESS => cleanup;
        default => crdirent_retry_or_fail;
    }

    state cleanup
    {
        run remove_cleanup;
        default => terminate;
    }
}

%%

int PVFS_isys_remove(
    char *object_name,
    PVFS_object_ref parent_ref, 
    PVFS_credentials *credentials,
    PVFS_sys_op_id *op_id,
    void *user_ptr)
{
    int ret = -PVFS_EINVAL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_isys_remove entered\n");

    if (object_name == NULL)
    {
        return ret;
    }

    sm_p = (PINT_client_sm *)malloc(sizeof(*sm_p));
    if (sm_p == NULL)
    {
        return -PVFS_ENOMEM;
    }
    memset(sm_p, 0, sizeof(*sm_p));

    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    sm_p->u.remove.object_name = object_name;
    sm_p->parent_ref  = parent_ref;
    sm_p->u.remove.stored_error_code = 0;

    gossip_debug(
        GOSSIP_CLIENT_DEBUG, "Trying to remove entry %s under %Lu,%d\n",
        object_name, Lu(parent_ref.handle), parent_ref.fs_id);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_remove calling "
                 "PINT_client_state_machine_post()\n");

    return PINT_client_state_machine_post(
        sm_p, PVFS_SYS_REMOVE, op_id, user_ptr);
}

int PVFS_sys_remove(
    char *object_name,
    PVFS_object_ref parent_ref, 
    PVFS_credentials *credentials)
{
    int ret = -PVFS_EINVAL;
    PVFS_error error;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_remove entered\n");

    ret = PVFS_isys_remove(object_name, parent_ref,
                           credentials, &op_id, NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_remove call", ret);
        error = ret;
    }
    else
    {
        ret = PINT_sys_wait(op_id, "remove", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
    }

    PINT_sys_release(op_id);
    return error;
}


/****************************************************************/

static int remove_init(PINT_client_sm *sm_p,
		       job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "remove state: init\n");

    assert(js_p->error_code == 0);

    return 1;
}

static int remove_rmdirent_setup_msgpair(PINT_client_sm *sm_p,
					 job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;

    /* NOTE: we remove the dirent first because this gets the object
     * out of the system fastest.
     */
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "remove state: rmdirent_setup_msgpair\n");

    js_p->error_code = 0;

    PINT_SERVREQ_RMDIRENT_FILL(sm_p->msgpair.req,
			       *sm_p->cred_p,
			       sm_p->parent_ref.fs_id,
			       sm_p->parent_ref.handle,
			       sm_p->u.remove.object_name);

    gossip_debug(GOSSIP_REMOVE_DEBUG, "- doing RMDIRENT on %s "
                 "under %Lu,%d\n", sm_p->u.remove.object_name,
                 Lu(sm_p->parent_ref.handle),
                 sm_p->parent_ref.fs_id);

    /* fill in msgpair structure components */
    sm_p->msgpair.fs_id   = sm_p->parent_ref.fs_id;
    sm_p->msgpair.handle  = sm_p->parent_ref.handle;
    sm_p->msgpair.retry_flag = PVFS_MSGPAIR_NO_RETRY;
    sm_p->msgpair.comp_fn = remove_rmdirent_comp_fn;

    ret = PINT_cached_config_map_to_server(&sm_p->msgpair.svr_addr,
                                    sm_p->msgpair.handle,
                                    sm_p->msgpair.fs_id);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
	js_p->error_code = ret;
    }

    if (sm_p->msgarray && (sm_p->msgarray != &sm_p->msgpair))
    {
        free(sm_p->msgarray);
    }
    sm_p->msgarray = &(sm_p->msgpair);
    sm_p->msgarray_count = 1;

    return 1;
}

static int remove_crdirent_setup_msgpair(PINT_client_sm *sm_p,
					 job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "remove state: crdirent_setup_msgpair\n");

    sm_p->u.remove.stored_error_code = js_p->error_code;

    js_p->error_code = 0;

    PINT_SERVREQ_CRDIRENT_FILL(
        sm_p->msgpair.req,
        *sm_p->cred_p,
        sm_p->u.remove.object_name,
        sm_p->object_ref.handle,
        sm_p->parent_ref.handle,
        sm_p->parent_ref.fs_id);

    gossip_debug(GOSSIP_REMOVE_DEBUG, "- doing CRDIRENT on %s (%Lu,%d) "
                 "under %Lu,%d\n", sm_p->u.remove.object_name,
                 Lu(sm_p->object_ref.handle),
                 sm_p->object_ref.fs_id,
                 Lu(sm_p->parent_ref.handle),
                 sm_p->parent_ref.fs_id);

    /* fill in msgpair structure components */
    sm_p->msgpair.fs_id   = sm_p->parent_ref.fs_id;
    sm_p->msgpair.handle  = sm_p->object_ref.handle;
    sm_p->msgpair.retry_flag = PVFS_MSGPAIR_NO_RETRY;
    sm_p->msgpair.comp_fn = remove_crdirent_comp_fn;

    ret = PINT_cached_config_map_to_server(&sm_p->msgpair.svr_addr,
                                    sm_p->msgpair.handle,
                                    sm_p->msgpair.fs_id);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }

    if (sm_p->msgarray && (sm_p->msgarray != &sm_p->msgpair))
    {
        free(sm_p->msgarray);
    }
    sm_p->msgarray = &(sm_p->msgpair);
    sm_p->msgarray_count = 1;

    return 1;
}

static int remove_rmdirent_comp_fn(void *v_p,
				   struct PVFS_server_resp *resp_p,
				   int index)
{
    PINT_client_sm *sm_p = (PINT_client_sm *) v_p;

    assert(resp_p->op == PVFS_SERV_RMDIRENT);

    /* don't attempt to parse the response if there was an error */
    if (resp_p->status != 0)
    {
	assert(resp_p->status < 0); /* parameter range check */
	return resp_p->status;
    }

    assert(resp_p->u.rmdirent.entry_handle != 0);
    assert(sm_p->parent_ref.fs_id != 0);

    /* pull handle out of response, also copy in fs_id from before */
    sm_p->object_ref.handle = resp_p->u.rmdirent.entry_handle;
    sm_p->object_ref.fs_id  = sm_p->parent_ref.fs_id;

    gossip_debug(
        GOSSIP_CLIENT_DEBUG,
        "  remove_rmdirent_comp_fn: metafile handle = %Lu\n",
        Lu(sm_p->object_ref.handle));

    return 0;
}

static int remove_crdirent_comp_fn(void *v_p,
				   struct PVFS_server_resp *resp_p,
				   int index)
{
    assert(resp_p->op == PVFS_SERV_CRDIRENT);

    if (resp_p->status != 0)
    {
	return resp_p->status;
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG, "  remove_crdirent_comp_fn: OK\n");

    return 0;
}

static int remove_cleanup(PINT_client_sm *sm_p,
			  job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "remove state: cleanup\n");

    /* store enough information in the sm structure that the caller
     * can tell what happened.
     */
    sm_p->error_code = (sm_p->u.remove.stored_error_code ?
                        sm_p->u.remove.stored_error_code :
                        js_p->error_code);

    /* if we acache entry, release it */
    if (sm_p->acache_hit)
    {
	PINT_acache_release(sm_p->pinode);
    }

    if (sm_p->msgarray && (sm_p->msgarray != &sm_p->msgpair))
    {
        free(sm_p->msgarray);
    }

    sm_p->op_complete = 1;
    return 0;
}

static int remove_generic_timer(PINT_client_sm *sm_p,
                                job_status_s *js_p)
{
    job_id_t tmp_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "remove state: generic_timer\n");

    return job_req_sched_post_timer(
	PVFS2_CLIENT_RETRY_DELAY,
	sm_p,
	0,
	js_p,
	&tmp_id,
	pint_client_sm_context);
}

static int remove_crdirent_retry_or_fail(PINT_client_sm *sm_p,
                                         job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "remove state: crdirent_retry_or_fail\n");

    /* try again (up to a point) if we get a comm. failure. */
    if ((PVFS_ERROR_CLASS(-js_p->error_code) == PVFS_ERROR_BMI) &&
	(sm_p->u.remove.retry_count < PVFS2_CLIENT_RETRY_LIMIT))
    {
	sm_p->u.remove.retry_count++;
	js_p->error_code = CRDIRENT_RETRY;
	return(1);
    }

    if ((js_p->error_code == -PVFS_EEXIST) &&
        (sm_p->u.remove.retry_count > 0))
    {
	/* assume everything worked out ok and we got the right directory
	 * entry back.  there was just a transient network problem along the
	 * way
	 */
	js_p->error_code = 0;
	return(1);
    }

    sm_p->u.remove.stored_error_code = js_p->error_code;
    PVFS_perror_gossip("Error: could not replace directory entry!",
                       js_p->error_code);
    gossip_err("WARNING: PVFS_sys_remove() encountered an error which "
               "may lead to inconsistent state.\n");
    gossip_err("WARNING: PVFS2 fsck (if available) may be needed.\n");

    return 1;
}


static int remove_rmdirent_retry_or_fail(PINT_client_sm *sm_p,
                                         job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "remove state: rmdirent_retry_or_fail\n");

    /* try again (up to a point) if we get a comm. failure. */
    if((PVFS_ERROR_CLASS(-js_p->error_code) == PVFS_ERROR_BMI) &&
	(sm_p->u.remove.retry_count < PVFS2_CLIENT_RETRY_LIMIT))
    {
	sm_p->u.remove.retry_count++;
	js_p->error_code = RMDIRENT_RETRY;
	return(1);
    }

    if(js_p->error_code == -PVFS_ENOENT && sm_p->u.remove.retry_count > 0)
    {
	/* this is a tricky error case.  Server reports ENOENT, but
	 * this is not the first time we attempted the rmdirent.  It
	 * may be the case that it is reporting ENOENT because one of
	 * the earlier retries possibly completed.  We will treat this
	 * as success, but put out an error message.  This could
	 * strand objects, or remove non-empty directories, for
	 * example.
	 */
	 gossip_err("WARNING: PVFS_sys_remove() encountered an error which "
	    "may lead to inconsistent state.\n");
	 gossip_err("WARNING: PVFS2 fsck (if available) may be needed.\n");
	 js_p->error_code = 0;
	 return(1);
    }

    /* any other errors we just preserve and pass along to the next state */

    return 1;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
