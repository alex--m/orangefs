/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"

#include "pinode-helper.h"
#include "pint-dcache.h"
#include "pint-servreq.h"
#include "pint-bucket.h"
#include "pcache.h"
#include "PINT-reqproto-encode.h"
#include "shared-state-methods.h"

extern job_context_id pint_client_sm_context;

/* state function prototypes */
static int readdir_init(PINT_client_sm *sm_p,
                        job_status_s *js_p);
static int readdir_msg_setup_msgpair(PINT_client_sm *sm_p,
                                     job_status_s *js_p);
static int readdir_msg_failure(PINT_client_sm *sm_p,
                               job_status_s *js_p);
static int readdir_cleanup(PINT_client_sm *sm_p,
                           job_status_s *js_p);

/* completion function prototypes */
static int readdir_msg_comp_fn(void *v_p,
                               struct PVFS_server_resp *resp_p,
                               int index);

%%

machine pvfs2_client_readdir_sm(init,
                                readdir_getattr_setup_msgpair,
                                readdir_getattr_xfer_msgpair,
                                readdir_getattr_failure,
                                readdir_msg_setup_msgpair,
                                readdir_msg_xfer_msgpair,
                                readdir_msg_failure,
                                cleanup)
{
    state init {
	run readdir_init;
	default => readdir_getattr_setup_msgpair;
    }

    state readdir_getattr_setup_msgpair {
	run PINT_sm_common_parent_getattr_setup_msgpair;
        success => readdir_getattr_xfer_msgpair;
	default => readdir_getattr_failure;
    }

    state readdir_getattr_xfer_msgpair {
	jump pvfs2_client_getattr_pcache_sm;
        success => readdir_msg_setup_msgpair;
	default => readdir_getattr_failure;
    }

    state readdir_getattr_failure {
	run PINT_sm_common_parent_getattr_failure;
	default => cleanup;
    }

    state readdir_msg_setup_msgpair {
	run readdir_msg_setup_msgpair;
	success => readdir_msg_xfer_msgpair;
        default => readdir_msg_failure;
    }

    state readdir_msg_xfer_msgpair {
	jump pvfs2_client_msgpair_sm;
        success => cleanup;
	default => readdir_msg_failure;
    }

    state readdir_msg_failure {
	run readdir_msg_failure;
	default => cleanup;
    }

    state cleanup {
        run readdir_cleanup;
        default => init;
    }
}

%%

int PVFS_sys_readdir(
    PVFS_pinode_reference pinode_refn,
    PVFS_ds_position token, 
    int pvfs_dirent_incount,
    PVFS_credentials credentials,
    PVFS_sysresp_readdir *resp)
{
    int ret = -PVFS_EINVAL;
    PINT_client_sm *sm_p = NULL;
    PVFS_error error;

    gossip_debug(CLIENT_DEBUG, "PVFS_sys_readdir entered\n");

    /* parameter checking goes here.  assume everything from the user
     * is ok past this point.
     */
    if ((pvfs_dirent_incount > PVFS_REQ_LIMIT_DIRENT_COUNT) ||
        (resp == NULL))
    {
        gossip_lerr("Error: PVFS_sys_readdir unable to handle request "
                    "for %d entries.\n", pvfs_dirent_incount);
        return ret;
    }

    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL)
    {
        return -PVFS_ENOMEM;
    }
    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;
    sm_p->u.readdir.pos_token = token;
    sm_p->u.readdir.dirent_limit = pvfs_dirent_incount;
    sm_p->u.readdir.readdir_resp = resp;
    /*
      set the parent ref to the passed in dir pinode_refn
      only for using the sm_common method for getattr
    */
    sm_p->parent_ref = pinode_refn;
    sm_p->u.readdir.object_ref = pinode_refn;

    gossip_debug(CLIENT_DEBUG, "Doing readdir on parent handle "
                 "%Lu on fs %d\n", Lu(pinode_refn.handle),
                 pinode_refn.fs_id);

    ret = PINT_client_state_machine_post(sm_p, PVFS_SYS_READDIR);
    assert(ret == 0);

    /* while !done call progress function */
    while (!sm_p->op_complete && ret == 0)
    {
	gossip_debug(CLIENT_DEBUG, "PVFS_sys_readdir calling "
                     "PINT_client_state_machine_test()\n");
	ret = PINT_client_state_machine_test();
    }
    assert(ret == 0);

    gossip_debug(CLIENT_DEBUG, "PVFS_sys_readdir completed\n");

    /* save our return value */
    error = sm_p->error_code;

    /* clean up after ourselves */
    free(sm_p);
    return error;
}

/****************************************************************/

static int readdir_init(PINT_client_sm *sm_p,
                        job_status_s *js_p)
{
    gossip_debug(CLIENT_DEBUG, "readdir state: init\n");

    assert(js_p->error_code == 0);

    /* do the request scheduler thing, if necessary */

    return 1;
}

static int readdir_msg_setup_msgpair(PINT_client_sm *sm_p,
                                     job_status_s *js_p)
{
    int ret = -1;
    bmi_addr_t server_addr;
    PINT_client_sm_msgpair_state *msg_p = NULL;

    gossip_debug(CLIENT_DEBUG, "readdir state: "
                 "readdir_msg_setup_msgpair\n");

    /* clear error field in job */
    js_p->error_code = 0;

    /* determine the metadata server to contact */
    ret = PINT_bucket_map_to_server(
        &server_addr, sm_p->u.readdir.object_ref.handle,
        sm_p->u.readdir.object_ref.fs_id);
    if (ret < 0)
    {
        gossip_err("Failed to get meta server information\n");
        assert(0);
    }

    gossip_debug(CLIENT_DEBUG," readdir: posting readdir req\n");

    msg_p = &sm_p->msgpair;
    memset(msg_p, 0, sizeof(PINT_client_sm_msgpair_state));

    gossip_debug(CLIENT_DEBUG, "%Lu|%d | token is %d | limit is %d\n",
                 Lu(sm_p->u.readdir.object_ref.handle),
                 sm_p->u.readdir.object_ref.fs_id,
                 sm_p->u.readdir.pos_token,
                 sm_p->u.readdir.dirent_limit);

    PINT_SERVREQ_READDIR_FILL(msg_p->req,
                              *sm_p->cred_p,
                              sm_p->u.readdir.object_ref.fs_id,
                              sm_p->u.readdir.object_ref.handle,
                              sm_p->u.readdir.pos_token,
                              sm_p->u.readdir.dirent_limit);

    /* fill in msgpair structure components */
    msg_p->fs_id = sm_p->u.readdir.object_ref.fs_id;
    msg_p->handle = sm_p->u.readdir.object_ref.handle;
    msg_p->comp_fn = readdir_msg_comp_fn;

    /* we've already resolved the appropriate meta server */
    msg_p->svr_addr = server_addr;

    return 1;
}

static int readdir_msg_comp_fn(void *v_p,
                               struct PVFS_server_resp *resp_p,
                               int index)
{
    PINT_client_sm *sm_p = (PINT_client_sm *) v_p;
    
    gossip_debug(CLIENT_DEBUG, "readdir_msg_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_READDIR);

    /* if we get an error, just return immediately, don't try to
     * actually fill anything in.
     */
    if (resp_p->status != 0)
    {
	return resp_p->status;
    }

    /* convert servresp_readdir response to a sysresp_readdir obj */
    assert(sm_p->u.readdir.readdir_resp);

    sm_p->u.readdir.readdir_resp->token = resp_p->u.readdir.token;
    sm_p->u.readdir.readdir_resp->pvfs_dirent_outcount =
        resp_p->u.readdir.dirent_count;
    if (sm_p->u.readdir.readdir_resp->pvfs_dirent_outcount > 0)
    {
        int dirent_array_len =
            (sizeof(PVFS_dirent) *
             sm_p->u.readdir.readdir_resp->pvfs_dirent_outcount);
        sm_p->u.readdir.readdir_resp->dirent_array =
            malloc(dirent_array_len);
        assert(sm_p->u.readdir.readdir_resp->dirent_array);

        memcpy(sm_p->u.readdir.readdir_resp->dirent_array,
               resp_p->u.readdir.dirent_array, dirent_array_len);
    }
    gossip_debug(CLIENT_DEBUG, "*** Got %d directory entries\n",
                 sm_p->u.readdir.readdir_resp->pvfs_dirent_outcount);

    return 0;
}

static int readdir_msg_failure(PINT_client_sm *sm_p,
                                      job_status_s *js_p)
{
    gossip_debug(CLIENT_DEBUG, "readdir state: readdir_msg_failure\n");

    /* FIXME: do real error handling */
    js_p->error_code = -EINVAL;

    return 1;
}

static int readdir_cleanup(PINT_client_sm *sm_p,
                           job_status_s *js_p)
{
    gossip_debug(CLIENT_DEBUG, "readdir state: cleanup\n");

    sm_p->error_code = js_p->error_code;

    /* mark operation as complete */
    sm_p->op_complete = 1;

    return 0;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
