/* 
 * Author julian M. Kunkel
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */


#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "bmi.h"
#include "pvfs2-internal.h"
#include "pint-util.h"

extern job_context_id pint_client_sm_context;

static int mgmt_migrate_create_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
    
static int mgmt_migrate_delete_new_datafile(
    PINT_client_sm *sm_p, job_status_s *js_p);

static int mgmt_migrate_get_datafile_array_setup(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mgmt_migrate_find_target_datafile(
    PINT_client_sm *sm_p, job_status_s *js_p);  
static int mgmt_migrate_start_transfer(
    PINT_client_sm *sm_p, job_status_s *js_p);  
static int mgmt_migrate_acknowledge_delete_old_datafile(
    PINT_client_sm *sm_p, job_status_s *js_p);  

static int mgmt_migrate_notify_metadata_server(
    PINT_client_sm *sm_p, job_status_s *js_p);  

static int mgmt_migrate_cleanup(
    PINT_client_sm *sm_p, job_status_s *js_p);

/* completion functions: */
static int create_datafile_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);

%%

/*
 * Steps:
 *  create new datafile on new datafile server 
 *  start transfer between olddataserver and newdataserver 
 *  modify metadata to write new data to new datafile server
 *  delete old datafile (automatically done on olddataserver on completion to avoid invalid
 *  file content
 */

machine pvfs2_client_mgmt_migrate_sm(
    get_datafile_array_setup,
    get_datafile_array,
    find_target_datafile,
    create_msgpair,
    create_xfer_msgpair,
    start_transfer,
    start_transfer_xfer_msgpair,
    notify_metadata_server,
    notify_metadata_server_xfer_msgpair,
    acknowledge_delete_old_datafile, 
    delete_new_datafile_msgpair,
    delete_new_datafile_xfer_msgpair,
    cleanup)
{   
    state get_datafile_array_setup
    {
        run mgmt_migrate_get_datafile_array_setup;
        success => get_datafile_array;
        default => cleanup;
    }
    
    state get_datafile_array
    {
        jump pvfs2_client_getattr_sm;
        success => find_target_datafile;
        default => cleanup;
    }
    
    /* 
     * now datafiles are available in:
     * attr->u.meta.dfile_array and attr->u.meta.dfile_count 
     */
    
    state find_target_datafile
    {
        run mgmt_migrate_find_target_datafile;
        success => create_msgpair;
        default => cleanup;
    }
    
    state create_msgpair
    {
        run mgmt_migrate_create_setup_msgpair;
        success => create_xfer_msgpair;
        default => cleanup;
    }
    
    state create_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => start_transfer;
        default => cleanup; /* failure */
    }
    
    state start_transfer
    {
        run mgmt_migrate_start_transfer;
        success => start_transfer_xfer_msgpair;
        default => delete_new_datafile_msgpair;
    }
    
    state start_transfer_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => notify_metadata_server;
        default => delete_new_datafile_msgpair;
    }
    
    state notify_metadata_server
    {
        run mgmt_migrate_notify_metadata_server;
        success => notify_metadata_server_xfer_msgpair;
        default => delete_new_datafile_msgpair;
    }

    state notify_metadata_server_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => acknowledge_delete_old_datafile;
        default => delete_new_datafile_msgpair; /* failure */
    }
    
    state acknowledge_delete_old_datafile
    {
        run mgmt_migrate_acknowledge_delete_old_datafile;
        success => cleanup;
        default => delete_new_datafile_msgpair;        
    }
    
    /* if an error occurs delete new create new created datafile */
    state delete_new_datafile_msgpair
    {
        run mgmt_migrate_delete_new_datafile;
        default => delete_new_datafile_xfer_msgpair;
    }
    
    state delete_new_datafile_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => cleanup;
        default => cleanup; /* failure */
    }
    
    state cleanup
    {
        run mgmt_migrate_cleanup;
        default => terminate;
    }
}

%%

/***********************************************************+*/

int mgmt_migrate_get_datafile_array_setup(
    PINT_client_sm *sm_p, job_status_s *js_p)
{
    PVFS_object_ref ref;
    js_p->error_code = 0;
    
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "migrate state: mgmt_migrate_find_target_datafile\n");
                 
    ref.handle = sm_p->u.mgmt_migrate.target_metafile;
    ref.fs_id = sm_p->u.mgmt_migrate.fs_id;
     
    sm_p->object_ref = ref;
    
    PINT_SM_GETATTR_STATE_FILL(
        sm_p->getattr,
        ref,
        PVFS_ATTR_META_ALL|PVFS_ATTR_COMMON_TYPE,
        PVFS_TYPE_METAFILE, 
        0);
    return 1;
}

static int mgmt_migrate_find_target_datafile(
    PINT_client_sm *sm_p, job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "migrate state: mgmt_migrate_find_target_datafile\n");
    if (js_p->error_code == 0)
    {
        int i;
        PVFS_object_attr *attr;        
        
        attr = &sm_p->getattr.attr;
        assert(attr);
        assert(attr->mask & PVFS_ATTR_META_DFILES);
        assert(attr->u.meta.dfile_count > 0);
        
        for(i=0; i < attr->u.meta.dfile_count; i++)
        {
            if ( attr->u.meta.dfile_array[i] == 
                sm_p->u.mgmt_migrate.target_datafile )
            {
                sm_p->u.mgmt_migrate.target_datafile_number = i;
                break;
            }
        }  
        if (i == attr->u.meta.dfile_count )
        {
            /* whoops we can't find datafile */
            js_p->error_code = PVFS_EINVAL;
        }
    }
    else
    {
        PINT_acache_invalidate(sm_p->object_ref);
    }
    
    return 1;
}

static int mgmt_migrate_start_transfer(
    PINT_client_sm *sm_p, job_status_s *js_p)
{
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_BMI_addr_t  old_dataserver;
    int ret;
    
    js_p->error_code = 0;
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "migrate state: mgmt_migrate_start_transfer\n");
    PVFS_handle handle = sm_p->u.mgmt_migrate.target_datafile;
    PVFS_fs_id  fs_id = sm_p->u.mgmt_migrate.fs_id ;

    ret = PINT_cached_config_map_to_server( & old_dataserver,
        handle, fs_id);
    if( ret != 0)
    {
        js_p->error_code = ret;
        return 1;        
    }
    
    PINT_init_msgpair(sm_p, msg_p);

    PINT_SERVREQ_MGMT_MIGRATE_FILL(
        msg_p->req,
        *sm_p->cred_p,
        fs_id,
        sm_p->u.mgmt_migrate.target_metafile,
        sm_p->u.mgmt_migrate.target_datafile,
        sm_p->u.mgmt_migrate.new_datafile,
        sm_p->u.mgmt_migrate.target_datafile_number,
        PVFS_MIGRATE_ROLE_SOURCE_DATA_SERVER);

    msg_p->fs_id = fs_id;
    msg_p->handle = sm_p->u.mgmt_migrate.new_datafile;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn =  NULL;    
    msg_p->svr_addr = old_dataserver;
    return 1;
}

/* TODO: successful write of datafile to new server should
 * initiate metadata server rewrite first. And once datafile array is 
 * rewritten acknowledge deletion to old datafile server. 
 * Right now there is a possible race condition between other clients 
 * and the update of the datafile array. */  
static int mgmt_migrate_acknowledge_delete_old_datafile(
    PINT_client_sm *sm_p, job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "migrate state: mgmt_migrate_acknowledge_delete_old_datafile\n");
                     
    js_p->error_code = 0;
    return 1;
}  


static int mgmt_migrate_notify_metadata_server(PINT_client_sm *sm_p,
                                   job_status_s *js_p)
{
    PINT_sm_msgpair_state *msg_p = NULL;

    js_p->error_code = 0;
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "migrate state: mgmt_migrate_notify_metadata_server\n");

    PINT_init_msgpair(sm_p, msg_p);
    
    PINT_SERVREQ_MGMT_MIGRATE_FILL(
        msg_p->req,
        *sm_p->cred_p,
        sm_p->u.mgmt_migrate.fs_id,
        sm_p->u.mgmt_migrate.target_metafile,
        sm_p->u.mgmt_migrate.target_datafile,
        sm_p->u.mgmt_migrate.new_datafile,
        sm_p->u.mgmt_migrate.target_datafile_number,
        PVFS_MIGRATE_ROLE_METASERVER);    
    
    msg_p->fs_id = sm_p->u.mgmt_migrate.fs_id;
    msg_p->handle = sm_p->u.mgmt_migrate.target_metafile;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn =  NULL;    
    msg_p->svr_addr = sm_p->u.mgmt_migrate.metaserver_addr;

    return 1;
}


static int mgmt_migrate_create_setup_msgpair(PINT_client_sm *sm_p,
                                   job_status_s *js_p)
{
    const char * bmi_address;
    int ret; 
    PVFS_handle_extent_array handle_extent;
    PINT_sm_msgpair_state *msg_p = NULL;
    struct server_configuration_s *server_config = NULL;
    char* out_alias;
    
    js_p->error_code = 0;
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "migrate state: mgmt_migrate_create_setup_msgpair\n");

    PINT_init_msgpair(sm_p, msg_p);
    
    bmi_address = BMI_addr_rev_lookup(sm_p->u.mgmt_migrate.target_dataserver);
       
    server_config = PINT_get_server_config_struct(
       sm_p->u.mgmt_migrate.fs_id);
    ret = PINT_cached_config_get_one_server_alias(bmi_address, server_config, 
            sm_p->u.mgmt_migrate.fs_id, & handle_extent, & out_alias, 1);
    PINT_put_server_config_struct(server_config);            
    if (ret != 0)
    {
        js_p->error_code = ret;
        return 1;
    }
     
    PINT_SERVREQ_CREATE_FILL(
        msg_p->req,
        *sm_p->cred_p,
        sm_p->u.mgmt_migrate.fs_id,
        PVFS_TYPE_DATAFILE,
        sm_p->u.mgmt_migrate.target_metafile,        
        handle_extent);

    gossip_debug(GOSSIP_CLIENT_DEBUG,  "posting datafile create "
                 "with extents %llu-%llu\n", 
                 llu(handle_extent.extent_array[0].first),
                 llu(handle_extent.extent_array[0].last));

    msg_p->fs_id = sm_p->u.mgmt_migrate.fs_id;
    msg_p->handle = handle_extent.extent_array[0].first;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn =  create_datafile_comp_fn;    
    msg_p->svr_addr = sm_p->u.mgmt_migrate.target_dataserver;

    return 1;
}

static int mgmt_migrate_delete_new_datafile(PINT_client_sm *sm_p,
                          job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "remove state: mgmt_migrate_delete_new_datafile\n");
    
    sm_p->u.mgmt_migrate.stored_error_code = js_p->error_code; 
     
    js_p->error_code = 0;

    PINT_init_msgpair(sm_p, msg_p);

    PINT_SERVREQ_REMOVE_FILL(
        msg_p->req,
        *sm_p->cred_p,
        sm_p->u.mgmt_migrate.fs_id,
        sm_p->u.mgmt_migrate.new_datafile);

    msg_p->fs_id = sm_p->object_ref.fs_id;
    msg_p->handle = sm_p->u.mgmt_migrate.new_datafile;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = NULL;
    msg_p->svr_addr = sm_p->u.mgmt_migrate.target_dataserver;

    ret = PINT_cached_config_map_to_server(
        &msg_p->svr_addr, msg_p->handle, msg_p->fs_id);

    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }
    return 1;    
}

static int create_datafile_comp_fn(void *v_p,
                                    struct PVFS_server_resp *resp_p,
                                    int index)
{
    PINT_client_sm *sm_p = (PINT_client_sm *) v_p;
    
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "create_datafile_comp_fn[%d]\n",index);

    assert(resp_p->op == PVFS_SERV_CREATE);

    if (resp_p->status != 0)
    {
        gossip_err("%s: Failed to create data handle %d\n", __func__, index);
        PVFS_perror_gossip("Creation failure", resp_p->status);
        sm_p->u.mgmt_migrate.stored_error_code = resp_p->status;
        return resp_p->status;
    }

    sm_p->u.mgmt_migrate.new_datafile = resp_p->u.create.handle;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "Datafile handle %d is %llu\n",
                 index, llu(sm_p->u.mgmt_migrate.new_datafile));
    return 0;
}

static int mgmt_migrate_cleanup(PINT_client_sm *sm_p,
                             job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "migrate state: mgmt_migrate_cleanup\n");

    sm_p->error_code = (sm_p->u.mgmt_migrate.stored_error_code != 0 ?
                        sm_p->u.mgmt_migrate.stored_error_code :
                        js_p->error_code);
    js_p->error_code = sm_p->error_code ; 
    
    PINT_SM_GETATTR_STATE_CLEAR(sm_p->getattr);
                        
    sm_p->op_complete = 1;
    return 0;
}


PVFS_error PVFS_imgmt_migrate(
    PVFS_fs_id fs_id,
    PVFS_credentials *credentials,
    PVFS_BMI_addr_t metaserver_addr,
    PVFS_handle     target_metafile,
    PVFS_handle     target_datafile,
    PVFS_BMI_addr_t source_dataserver,
    PVFS_BMI_addr_t target_dataserver, 
    PVFS_mgmt_op_id *op_id,
    void *user_ptr)
{
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_imgmt_migrate entered\n");

    sm_p = (PINT_client_sm *)malloc(sizeof(*sm_p));
    if (!sm_p)
    {
        return -PVFS_ENOMEM;
    }
    memset(sm_p, 0, sizeof(*sm_p));
    
    PINT_init_msgarray_params(&sm_p->msgarray_params, fs_id);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    
    sm_p->object_ref.fs_id = fs_id;
        
    sm_p->u.mgmt_migrate.fs_id = fs_id;
    sm_p->u.mgmt_migrate.metaserver_addr = metaserver_addr;
    sm_p->u.mgmt_migrate.target_datafile = target_datafile;
    sm_p->u.mgmt_migrate.target_metafile = target_metafile;
    sm_p->u.mgmt_migrate.source_dataserver = source_dataserver;
    sm_p->u.mgmt_migrate.target_dataserver = target_dataserver;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_migrate calling "
                 "PINT_client_state_machine_post()\n");
                 
    return PINT_client_state_machine_post(
        sm_p, PVFS_MGMT_MIGRATE, op_id, user_ptr);
}

/*****************************************************************************/

PVFS_error PVFS_mgmt_migrate(
    PVFS_fs_id fs_id,
    PVFS_credentials *credentials,
    PVFS_BMI_addr_t metaserver_addr,
    PVFS_handle     target_metafile,
    PVFS_handle     target_datafile,
    PVFS_BMI_addr_t source_dataserver,
    PVFS_BMI_addr_t target_dataserver)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_mgmt_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_migrate entered\n");

    ret = PVFS_imgmt_migrate(fs_id, credentials, metaserver_addr,
        target_metafile, target_datafile, source_dataserver, target_dataserver, 
        &op_id, NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_imgmt_migrate call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_mgmt_wait(op_id, "migrate", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_mgmt_wait call", ret);
            error = ret;
        }
    }

    PVFS_mgmt_release(op_id);
    return error;
}

/*****************************************************************************/
 

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
