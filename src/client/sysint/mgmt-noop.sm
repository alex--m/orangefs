/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/** \file
 *  \ingroup mgmtint
 *
 *  PVFS2 management interface routines for sending "no operation"
 *  (no-op) requests.  This is primarily used for verifying connectivity
 *  to servers.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-servreq.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "bmi.h"

extern job_context_id pint_client_sm_context;

static PINT_sm_action mgmt_noop_setup_msgpair(
    struct PINT_smcb *smcb, job_status_s *js_p);
static PINT_sm_action mgmt_noop_cleanup(
    struct PINT_smcb *smcb, job_status_s *js_p);

%%

machine pvfs2_client_mgmt_noop_sm(
    setup_msgpair,
    xfer_msgpair,
    cleanup)
{
    state setup_msgpair
    {
        run mgmt_noop_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_noop_cleanup;
        default => terminate;
    }
}

%%

/** Initiate sending of no-op request to a specific server.
 */
PVFS_error PVFS_imgmt_noop(
    PVFS_fs_id fs_id,
    PVFS_credentials *credentials,
    PVFS_BMI_addr_t addr,
    PVFS_mgmt_op_id *op_id,
    void *user_ptr)
{
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_imgmt_noop entered\n");

    PINT_smcb_alloc(&smcb, PVFS_MGMT_NOOP,
             sizeof(struct PINT_client_sm), client_op_state_get_machine);
    if (!smcb)
    {
        return -PVFS_ENOMEM;
    }
    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(&sm_p->msgarray_params, fs_id);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    sm_p->msgpair.fs_id = fs_id;
    sm_p->msgpair.retry_flag = PVFS_MSGPAIR_NO_RETRY;
    sm_p->msgpair.svr_addr = addr;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_noop calling "
                 "PINT_client_state_machine_post()\n");

    return PINT_client_state_machine_post(
        smcb,  op_id, user_ptr);
}

/** Send a no-op request to a specific server and receive response.
 */
PVFS_error PVFS_mgmt_noop(
    PVFS_fs_id fs_id,
    PVFS_credentials *credentials,
    PVFS_BMI_addr_t addr)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_mgmt_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_noop entered\n");

    ret = PVFS_imgmt_noop(fs_id, credentials, addr, &op_id, NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_imgmt_noop call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_mgmt_wait(op_id, "noop", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_mgmt_wait call", ret);
            error = ret;
        }
    }

    PVFS_mgmt_release(op_id);
    return error;
}

static PINT_sm_action mgmt_noop_setup_msgpair(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "noop state: mgmt_noop_setup_msgpair\n");

    PINT_SERVREQ_MGMT_NOOP_FILL(sm_p->msgpair.req, *sm_p->cred_p);

    sm_p->msgarray = &(sm_p->msgpair);
    sm_p->msgarray_count = 1;

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_noop_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_CLIENT_DEBUG, "noop state: mgmt_noop_cleanup\n");

    PINT_SET_OP_COMPLETE;
    sm_p->error_code = js_p->error_code;
    return SM_ACTION_DEFERRED;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
