/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pvfs2-mgmt.h"

#include "pinode-helper.h"
#include "pint-dcache.h"
#include "pint-servreq.h"
#include "pint-bucket.h"
#include "pcache.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;
extern struct server_configuration_s g_server_config;

/* state function prototypes */
static int mgmt_statfs_all_setup_msgpair(PINT_client_sm *sm_p,
					job_status_s *js_p);
static int mgmt_statfs_all_cleanup(PINT_client_sm *sm_p,
			  job_status_s *js_p);
static int statfs_all_comp_fn(void* v_p, struct PVFS_server_resp* resp_p,
    int i);

%%

machine pvfs2_client_mgmt_statfs_all_sm(
    setup_msgpair,
    xfer_msgpair,
    cleanup)
{

    state setup_msgpair {
	run mgmt_statfs_all_setup_msgpair;
	success => xfer_msgpair;
	default => cleanup;
    }

    state xfer_msgpair {
	jump pvfs2_client_msgpairarray_sm;
	default => cleanup;
    }

    state cleanup {
	run mgmt_statfs_all_cleanup;
	default => setup_msgpair;
    }
}

%%

int PVFS_mgmt_statfs_all(
    PVFS_fs_id fs_id,
    PVFS_credentials credentials,
    int incount,
    int* outcount,
    int* overflow_flag,
    struct PVFS_mgmt_server_stat* stat_array)
{
    int ret;
    PINT_client_sm *sm_p;
    PVFS_error error;

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_statfs_all entered\n");

    if(incount < 1 || !stat_array)
    {
	return(-PVFS_EINVAL);
    }

    /* build PINT_client_sm structure */
    /* TODO: KEEP A CACHE OF THESE AROUND SO WE'RE NOT ALWAYS MALLOC'ING? */
    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL) return -PVFS_ENOMEM;

    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;
    sm_p->u.statfs_all.fs_id = fs_id;
    sm_p->u.statfs_all.stat_array = stat_array;
    sm_p->u.statfs_all.incount = incount;
    sm_p->u.statfs_all.outcount = outcount;
    sm_p->u.statfs_all.overflow_flag = overflow_flag;

    /* safety */
    memset(sm_p->u.statfs_all.stat_array, 0, incount*sizeof(struct PVFS_mgmt_server_stat));

    gossip_debug(CLIENT_DEBUG,
		 "PVFS_mgmt_statfs_all calling PINT_client_state_machine_post()\n");

    /* do something to kick off processing */
    ret = PINT_client_state_machine_post(sm_p, PVFS_MGMT_STATFS_ALL);
    if(ret < 0)
    {
	/* this should not fail under normal conditions */
	assert(0);
	gossip_lerr("Error: PINT_client_state_machine_post() failure.\n");
	return(ret);
    }

    /* while !done call progress function */
    while (!sm_p->op_complete && ret == 0) {
	gossip_debug(CLIENT_DEBUG,
		     "PVFS_mgmt_statfs_all calling PINT_client_state_machine_test()\n");
	ret = PINT_client_state_machine_test();
    }
    if(ret < 0)
    {
	gossip_lerr("Error: PINT_client_state_machine_test() failure.\n");
	return(ret);
    }

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_statfs_all completed\n");

    /* save our return value */
    error = sm_p->error_code;

    /* clean up after ourselves */
    free(sm_p);
    return error;
}

static int mgmt_statfs_all_setup_msgpair(PINT_client_sm *sm_p,
					job_status_s *js_p)
{
    int ret = -1;
    int num_phys_servers = 0;
    struct PINT_bucket_server_info* info_array;
    int i;
    PINT_client_sm_msgpair_state *msg_p;

    gossip_debug(CLIENT_DEBUG, "statfs_all state: mgmt_statfs_all_setup_msgpair\n");

    /* the first thing we have to do is find out how many physical servers
     * are present, and build and array of addresses to reach them
     */
    ret = PINT_collect_physical_server_info(sm_p->u.statfs_all.fs_id,
	&num_phys_servers, &info_array);
    if(ret < 0)
    {
	js_p->error_code = ret;
	return(1);
    }

    gossip_debug(CLIENT_DEBUG,
	"PVFS_mgmt_statfs_all found %d servers.\n", num_phys_servers);

    if(num_phys_servers <= sm_p->u.statfs_all.incount)
    {
	*sm_p->u.statfs_all.outcount = num_phys_servers;
	*sm_p->u.statfs_all.overflow_flag = 0;
    }
    else
    {
	*sm_p->u.statfs_all.outcount = sm_p->u.statfs_all.incount;
	*sm_p->u.statfs_all.overflow_flag = 1;
    }
    
    /* go ahead and fill in the information that is available locally */
    for(i=0; i < *sm_p->u.statfs_all.outcount; i++)
    {
	sm_p->u.statfs_all.stat_array[i].fs_id = sm_p->u.statfs_all.fs_id;
	sm_p->u.statfs_all.stat_array[i].bmi_address = info_array[i].addr_string;
	if(info_array[i].server_type & PINT_BUCKET_META)
	    sm_p->u.statfs_all.stat_array[i].flags += PVFS_MGMT_META_SERVER;
	if(info_array[i].server_type & PINT_BUCKET_IO)
	    sm_p->u.statfs_all.stat_array[i].flags += PVFS_MGMT_IO_SERVER;
    }

    /* allocate memory for msgpair array */
    sm_p->msgarray_count = *sm_p->u.statfs_all.outcount;
    sm_p->msgarray = (PINT_client_sm_msgpair_state *)
    malloc((*sm_p->u.statfs_all.outcount)*sizeof(PINT_client_sm_msgpair_state));
    if(!sm_p->msgarray)
    {
	free(info_array);
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    /* setup msgpair array */
    for(i=0; i<sm_p->msgarray_count; i++)
    {
	msg_p = &sm_p->msgarray[i];

	PINT_SERVREQ_STATFS_FILL(msg_p->req,
	    *sm_p->cred_p,
	    sm_p->u.statfs_all.fs_id);

	msg_p->fs_id = sm_p->u.statfs_all.fs_id;
	msg_p->handle = PVFS_HANDLE_NULL;
	msg_p->comp_fn = statfs_all_comp_fn;
	msg_p->svr_addr = info_array[i].addr;
    }

    free(info_array);

    /* immediate return: next state jumps to msgpairarray machine */
    js_p->error_code = 0;
    return(1);
}

static int mgmt_statfs_all_cleanup(PINT_client_sm *sm_p,
			  job_status_s *js_p)
{
    if(sm_p->msgarray)
	free(sm_p->msgarray);

    sm_p->error_code = js_p->error_code;
    sm_p->op_complete = 1;

    return(0);
}

static int statfs_all_comp_fn(void* v_p, struct PVFS_server_resp* resp_p,
    int i)
{
    int j = 0;
    PINT_client_sm* sm_p = (PINT_client_sm*)v_p;

    /* if this particular request was successful, then store the 
     * statfs information in an array to be returned to caller
     */
    if(sm_p->msgarray[i].op_status == 0)
    {
	sm_p->u.statfs_all.stat_array[i].bytes_available = 
	    resp_p->u.statfs.stat.bytes_available;
	sm_p->u.statfs_all.stat_array[i].bytes_total = 
	    resp_p->u.statfs.stat.bytes_total;
    }
 
    /* if this is the last response, check all of the status values and 
     * return error code if any requests failed 
     */
    if(i == (sm_p->msgarray_count -1))
    {
	for(j=0; j<sm_p->msgarray_count; j++)
	{
	    if(sm_p->msgarray[j].op_status != 0)
	    {
		return(sm_p->msgarray[j].op_status);
	    }
	}
    }
   
    return(0);
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
