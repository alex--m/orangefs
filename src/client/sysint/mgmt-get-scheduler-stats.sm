/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */


#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pvfs2-mgmt.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

static int mgmt_get_scheduler_stats_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mgmt_get_scheduler_stats_cleanup(
    PINT_client_sm *sm_p, job_status_s *js_p);

/* completion function prototypes */
static int mgmt_get_scheduler_comp_fn(
    void* v_p, struct PVFS_server_resp* resp_p, int i);

%%

machine pvfs2_client_mgmt_get_scheduler_stats_sm(
    setup_msgpair,
    xfer_msgpair,
    cleanup)
{
    state setup_msgpair
    {
        run mgmt_get_scheduler_stats_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_get_scheduler_stats_cleanup;
        default => terminate;
    }
}

%%

PVFS_error PVFS_imgmt_get_scheduler_stats(
    PVFS_fs_id fs_id,
    PVFS_credentials *credentials,
    PVFS_BMI_addr_t addr,
    int max_count,
    PVFS_sysresp_mgmt_get_scheduler_stats * resp,
    PVFS_mgmt_op_id *op_id,
    PVFS_hint * hints,
    void *user_ptr)
{
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_imgmt_get_scheduler_stats entered\n");

    sm_p = (PINT_client_sm *)malloc(sizeof(*sm_p));
    if (!sm_p)
    {
        return -PVFS_ENOMEM;
    }
    memset(sm_p, 0, sizeof(*sm_p));

    PINT_init_msgarray_params(&sm_p->msgarray_params, fs_id);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    
    sm_p->u.mgmt_get_scheduler_stats.max_count = max_count;
    sm_p->u.mgmt_get_scheduler_stats.fs_id = fs_id;
    sm_p->u.mgmt_get_scheduler_stats.resp = resp;
    sm_p->hints = hints;

    sm_p->msgpair.fs_id = fs_id;
    sm_p->msgpair.retry_flag = PVFS_MSGPAIR_NO_RETRY;
    sm_p->msgpair.svr_addr = addr;

    return PINT_client_state_machine_post(
        sm_p, PVFS_MGMT_GET_SCHEDULER_STATS, op_id, user_ptr);
}

PVFS_error PVFS_mgmt_get_scheduler_stats(
    PVFS_fs_id fs_id,
    PVFS_credentials *credentials,
    PVFS_BMI_addr_t addr,
    int max_count,
    PVFS_sysresp_mgmt_get_scheduler_stats * resp,
    PVFS_hint * hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_mgmt_op_id op_id;
    
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_mgmt_get_scheduler_stats entered\n");

    ret = PVFS_imgmt_get_scheduler_stats(
        fs_id, credentials, addr, max_count, resp, &op_id, hints, NULL);

    if (ret)
    {
        PVFS_perror_gossip("PVFS_imgmt_get_scheduler_stats call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_mgmt_wait(op_id, "get_scheduler_stats", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_mgmt_wait call", ret);
            error = ret;
        }
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_mgmt_get_scheduler_stats completed\n");

    PVFS_mgmt_release(op_id);
    return error;
}

static int mgmt_get_scheduler_stats_setup_msgpair(PINT_client_sm *sm_p,
                                             job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_get_scheduler_stats state: "
                 "mgmt_get_scheduler_stats_setup_msgpair\n");

    js_p->error_code = 0;
    
    sm_p->msgarray = &(sm_p->msgpair);
    sm_p->msgarray_count = 1;

    PINT_SERVREQ_GET_SCHED_STATS_FILL(
        sm_p->msgpair.req,
        *sm_p->cred_p,
        sm_p->u.mgmt_get_scheduler_stats.fs_id,
        sm_p->u.mgmt_get_scheduler_stats.max_count,
        sm_p->hints);
    
    sm_p->msgpair.comp_fn = mgmt_get_scheduler_comp_fn;
    sm_p->u.mgmt_get_scheduler_stats.resp->handle_stats.count = 0;
    return 1;
}

static int mgmt_get_scheduler_stats_cleanup(PINT_client_sm *sm_p,
                                       job_status_s *js_p)
{

    sm_p->error_code = sm_p->u.mgmt_get_scheduler_stats.stored_error_code;
    sm_p->op_complete = 1;
    return 0;
}

static int mgmt_get_scheduler_comp_fn(void* v_p,
                                  struct PVFS_server_resp* res_p,
                                  int i)
{
    PINT_client_sm *sm_p = (PINT_client_sm *) v_p;

    if ( res_p->status == 0)
    {
        int count = res_p->u.get_sched_stats.handle_stats.count; 
        memcpy(& sm_p->u.mgmt_get_scheduler_stats.resp->fs_stats, 
            & res_p->u.get_sched_stats.fs_stat,
            sizeof(PVFS_request_statistics));
        
        sm_p->u.mgmt_get_scheduler_stats.resp->handle_stats.count = count;
        memcpy(sm_p->u.mgmt_get_scheduler_stats.resp->handle_stats.stats,
            res_p->u.get_sched_stats.handle_stats.stats,
            count * sizeof(PVFS_handle_request_statistics));
    }
    sm_p->u.mgmt_get_scheduler_stats.stored_error_code = res_p->status;

    return 1;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
