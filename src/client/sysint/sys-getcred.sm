/*
 * Copyright 2008 Clemson University and The University of Chicago
 *
 * See COPYING in top-level directory.
 */

#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/bio.h>
#include <openssl/pem.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "pint-util.h"
#include "pvfs2-internal.h"
#include "security-util.h"

extern job_context_id pint_client_sm_context;

static int getcred_comp_fn(void *v_p, struct PVFS_server_resp *resp_p, 
                           int index);

%%

machine pvfs2_client_getcred_sm
{

    state generate_signature
    {
        run getcred_generate_signature;
        success => setup_msgpair;
        default => cleanup;
    }

    state setup_msgpair
    {
        run getcred_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run getcred_cleanup;
        default => terminate;
    }
}

%%

/* nlmills: TODO: document. esp. requirement on PEM format strings */
PVFS_error PVFS_isys_getcred(PVFS_fs_id fs_id,
                             const char *certificate,
                             const char *key,
                             PVFS_BMI_addr_t addr,
                             PVFS_sysresp_getcred *resp_p,
                             PVFS_sys_op_id *op_id,
                             void *user_ptr)
{
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_isys_getcred entered\n");

    if ((fs_id == PVFS_FS_ID_NULL) || !certificate || !key || !resp_p)
    {
        gossip_err("invalid (NULL) argument\n");
        return -PVFS_EINVAL;
    }

    PINT_smcb_alloc(&smcb, PVFS_SYS_GETCRED,
                    sizeof(struct PINT_client_sm),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);
    if (!smcb)
    {
        return -PVFS_ENOMEM;
    }
    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, fs_id);

    sm_p->object_ref.fs_id = fs_id;

    sm_p->u.getcred.certificate = strdup(certificate);
    sm_p->u.getcred.key = strdup(key);

    sm_p->u.getcred.getcred_resp = resp_p;

    PINT_msgpair_init(&sm_p->msgarray_op);
    sm_p->msgarray_op.msgpair.fs_id = fs_id;
    sm_p->msgarray_op.msgpair.retry_flag = PVFS_MSGPAIR_RETRY;
    sm_p->msgarray_op.msgpair.comp_fn = getcred_comp_fn;
    sm_p->msgarray_op.msgpair.svr_addr = addr;

    return PINT_client_state_machine_post(smcb, op_id, user_ptr);
}

PVFS_error PVFS_sys_getcred(PVFS_fs_id fs_id,
                            const char *certificate,
                            const char *key,
                            PVFS_BMI_addr_t addr,
                            PVFS_sysresp_getcred *resp_p)
{
    PVFS_error ret = -PVFS_EINVAL;
    PVFS_error error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_getcred entered\n");

    ret = PVFS_isys_getcred(fs_id, certificate, key, addr, resp_p, 
                            &op_id, NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_getcred call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_sys_wait(op_id, "getcred", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
    }

    PINT_sys_release(op_id);
    return error;
}

static int getcred_generate_signature(struct PINT_smcb *smcb,
                                      job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    char buf[256];
    BIO *keybio;
    EVP_PKEY *privkey;
    EVP_MD_CTX mdctx;
    const EVP_MD *md = NULL;
    int ret;

    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "getcred state: getcred_generate_signature\n");

    keybio = BIO_new_mem_buf(sm_p->u.getcred.key, -1);
    if (!keybio)
    {
        js_p->error_code = -PVFS_EINVAL;
        return SM_ACTION_COMPLETE;
    }

    privkey = PEM_read_bio_PrivateKey(keybio, NULL, NULL, NULL);
    if (!privkey)
    {
        /* nlmills: TODO: error handling */
        ERR_error_string_n(ERR_get_error(), buf, 256);
        gossip_debug(GOSSIP_CLIENT_DEBUG, "Error reading private key: %s\n",
                     buf);
        js_p->error_code = -PVFS_EINVAL;
        BIO_vfree(keybio);
        return SM_ACTION_COMPLETE;
    }

#if defined(SECURITY_ENCRYPTION_RSA)
    md = EVP_sha1();
#elif defined(SECURITY_ENCRYPTION_DSA)
    md = EVP_dss1();
#endif

    EVP_MD_CTX_init(&mdctx);

    ret = EVP_SignInit_ex(&mdctx, md, NULL);
    if (!ret)
    {
        /* nlmills: TODO: error handling */
        js_p->error_code = -PVFS_EINVAL;
        EVP_MD_CTX_cleanup(&mdctx);
        EVP_PKEY_free(privkey);
        BIO_vfree(keybio);
        return SM_ACTION_COMPLETE;
    }

    ret = EVP_SignUpdate(&mdctx, sm_p->u.getcred.certificate,
                         strlen(sm_p->u.getcred.certificate) * sizeof(char));
    if (!ret)
    {
        /* nlmills: TOOD: error handling */
        js_p->error_code = -PVFS_EINVAL;
        EVP_MD_CTX_cleanup(&mdctx);
        EVP_PKEY_free(privkey);
        BIO_vfree(keybio);
        return SM_ACTION_COMPLETE;
    }

    sm_p->u.getcred.signature = malloc(EVP_PKEY_size(privkey));
    if (!sm_p->u.getcred.signature)
    {
        js_p->error_code = -PVFS_ENOMEM;
        EVP_MD_CTX_cleanup(&mdctx);
        EVP_PKEY_free(privkey);
        BIO_vfree(keybio);
        return SM_ACTION_COMPLETE;
    }

    ret = EVP_SignFinal(&mdctx, sm_p->u.getcred.signature, 
                        &sm_p->u.getcred.sig_size, privkey);
    EVP_MD_CTX_cleanup(&mdctx);
    EVP_PKEY_free(privkey);
    BIO_vfree(keybio);
    if (!ret)
    {
        /* nlmills: TODO: error handling */
        js_p->error_code = -PVFS_EINVAL;
        return SM_ACTION_COMPLETE;
    }

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static int getcred_setup_msgpair(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_capability capability;

    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "getcred state: getcred_setup_msgpair\n");
    
    PINT_null_capability(&capability);

    PINT_SERVREQ_GETCRED_FILL(sm_p->msgarray_op.msgpair.req,
                              capability,
                              sm_p->object_ref.fs_id,
                              sm_p->u.getcred.certificate,
                              sm_p->u.getcred.sig_size,
                              sm_p->u.getcred.signature,
                              sm_p->hints);

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static int getcred_comp_fn(void *v_p, struct PVFS_server_resp *resp_p, 
                           int index)
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM);
    int ret;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "getcred_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_GETCRED);

    if (resp_p->status)
    {
        return resp_p->status;
    }

    ret = PINT_copy_credential(&resp_p->u.getcred.credential,
                               &sm_p->u.getcred.getcred_resp->credential);

    return ret;
}

static int getcred_cleanup(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "getcred state: getcred_cleanup\n");

    free(sm_p->u.getcred.signature);
    free(sm_p->u.getcred.key);
    free(sm_p->u.getcred.certificate);

    sm_p->error_code = js_p->error_code;

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
