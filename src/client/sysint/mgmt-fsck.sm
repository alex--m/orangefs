/* 
 * (C) 2009 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include "client-state-machine.h"
#include "gossip.h"
#include "bmi.h"

extern job_context_id pint_client_sm_context;

/*
 * Local Prototypes
 */
static int mgmt_fsck_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int index);

/*
 * State Machine Definition
 */

%%

machine pvfs2_client_mgmt_fsck_sm
{
    state setup_msgpair
    {
        run mgmt_fsck_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_fsck_cleanup;
        default => terminate;
    }
}

%%

/*
 *
 */
PVFS_error PVFS_imgmt_fsck(
    PVFS_fs_id fs_id,
    PVFS_credentials *credentials,
    PVFS_BMI_addr_t *addr,
    PVFS_mgmt_fsck_op operation,
    int64_t uid,
    PVFS_ds_position *position,
    uint64_t *log_count,
    PVFS_mgmt_fsck_resp *resp,
    PVFS_mgmt_op_id *op_id,
    PVFS_hint hints,
    void *user_ptr)
{
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "%s entered\n", __func__);

    PINT_smcb_alloc(&smcb, PVFS_MGMT_FSCK,
             sizeof(struct PINT_client_sm),
             client_op_state_get_machine,
             client_state_machine_terminate,
             pint_client_sm_context);
    if (!smcb)
    {
        return -PVFS_ENOMEM;
    }
    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    PINT_init_msgarray_params(sm_p, fs_id);
    PINT_msgpair_init(&sm_p->msgarray_op);

    sm_p->msgarray_op.msgpair.fs_id      = fs_id;
    sm_p->msgarray_op.msgpair.handle     = PVFS_HANDLE_NULL;
    sm_p->msgarray_op.msgpair.retry_flag = PVFS_MSGPAIR_RETRY;
    sm_p->msgarray_op.msgpair.svr_addr   = *addr;

    sm_p->u.mgmt_fsck.fs_id     = fs_id;
    sm_p->u.mgmt_fsck.operation = operation;
    sm_p->u.mgmt_fsck.uid       = uid;
    sm_p->u.mgmt_fsck.position  = position;
    sm_p->u.mgmt_fsck.count     = log_count;
    sm_p->u.mgmt_fsck.resp      = resp;

    PVFS_hint_copy(hints, &sm_p->hints);

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "%s calling PINT_client_state_machine_post()\n",
                 __func__);

    return PINT_client_state_machine_post(
        smcb,  op_id, user_ptr);
}

/*
 *
 */
PVFS_error PVFS_mgmt_fsck(
    PVFS_fs_id fs_id,
    PVFS_credentials *credentials,
    PVFS_BMI_addr_t *addr,
    PVFS_mgmt_fsck_op operation,
    int64_t uid,
    PVFS_ds_position *position,
    uint64_t *log_count,
    PVFS_mgmt_fsck_resp *resp,
    PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL;
    PVFS_error error = 0;
    PVFS_mgmt_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "%s entered\n", __func__);

    ret = PVFS_imgmt_fsck(fs_id,
                          credentials,
                          addr,
                          operation,
                          uid,
                          position,
                          log_count,
                          resp,
                          &op_id,
                          hints,
                          NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_imgmt_fsck_single call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_mgmt_wait(op_id, "fsck", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_mgmt_wait call", ret);
            error = ret;
        }
    }

    PINT_mgmt_release(op_id);
    return error;
}

/*
 * State Machine Operations
 */

static PINT_sm_action mgmt_fsck_setup_msgpair(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
    PINT_sm_msgpair_state *msg_p;
    struct PINT_client_sm *sm_p;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "%s\n", __func__);

    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    msg_p = &sm_p->msgarray_op.msgpair;

    PINT_SERVREQ_MGMT_FSCK_FILL(sm_p->msgarray_op.msgpair.req,
                                *sm_p->cred_p,
                                sm_p->u.mgmt_fsck.fs_id,
                                sm_p->u.mgmt_fsck.operation,
                                sm_p->u.mgmt_fsck.uid,
                                *sm_p->u.mgmt_fsck.position,
                                *sm_p->u.mgmt_fsck.count,
                                sm_p->hints); 
    msg_p->comp_fn    = mgmt_fsck_comp_fn;

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_fsck_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_CLIENT_DEBUG, "%s\n", __func__); 
    sm_p->error_code = js_p->error_code;

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

/*
 * Completion Function
 */
static int mgmt_fsck_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index)
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM);

    assert(resp_p->op == PVFS_SERV_MGMT_FSCK);

    if (resp_p->status == 0)
    {
        sm_p->u.mgmt_fsck.resp->state = resp_p->u.mgmt_fsck.state;
        sm_p->u.mgmt_fsck.resp->phase = resp_p->u.mgmt_fsck.phase;
        sm_p->u.mgmt_fsck.resp->time  = (double)resp_p->u.mgmt_fsck.time_s +
            (double)resp_p->u.mgmt_fsck.time_us/1e6;
        *sm_p->u.mgmt_fsck.position   = resp_p->u.mgmt_fsck.position;
        *sm_p->u.mgmt_fsck.count      = resp_p->u.mgmt_fsck.count;
        if (resp_p->u.mgmt_fsck.count > 0)
        {
            memcpy(sm_p->u.mgmt_fsck.resp->log,
                   resp_p->u.mgmt_fsck.log,
                   (resp_p->u.mgmt_fsck.count*
                    sizeof(*resp_p->u.mgmt_fsck.log)));
        }
    }

    return resp_p->status;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
