/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-servreq.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "shared-state-methods.h"
#include "pint-util.h"

extern job_context_id pint_client_sm_context;

enum
{
    MKDIR_RETRY = 180
};

static int mkdir_init(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mkdir_msg_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mkdir_msg_failure(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mkdir_crdirent_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mkdir_crdirent_failure(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mkdir_delete_handle_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mkdir_cleanup(
    PINT_client_sm *sm_p, job_status_s *js_p);

static int mkdir_msg_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);
static int mkdir_crdirent_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);
static int mkdir_delete_handle_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);

%%

machine pvfs2_client_mkdir_sm(
    init,
    mkdir_parent_getattr_setup_msgpair,
    mkdir_parent_getattr_xfer_msgpair,
    mkdir_parent_getattr_failure,
    mkdir_msg_setup_msgpair,
    mkdir_msg_xfer_msgpair,
    mkdir_msg_failure,
    mkdir_crdirent_setup_msgpair,
    mkdir_crdirent_xfer_msgpair,
    mkdir_crdirent_failure,
    delete_handle_setup_msgpair,
    delete_handle_xfer_msgpair,
    cleanup)
{
    state init
    {
        run mkdir_init;
        default => mkdir_parent_getattr_setup_msgpair;
    }

    state mkdir_parent_getattr_setup_msgpair
    {
        run PINT_sm_common_parent_getattr_setup_msgpair;
        success => mkdir_parent_getattr_xfer_msgpair;
        default => mkdir_parent_getattr_failure;
    }

    state mkdir_parent_getattr_xfer_msgpair
    {
        jump pvfs2_client_getattr_acache_sm;
        success => mkdir_msg_setup_msgpair;
        default => mkdir_parent_getattr_failure;
    }

    state mkdir_parent_getattr_failure
    {
        run PINT_sm_common_parent_getattr_failure;
        default => cleanup;
    }

    state mkdir_msg_setup_msgpair
    {
        run mkdir_msg_setup_msgpair;
        success => mkdir_msg_xfer_msgpair;
        default => mkdir_msg_failure;
    }

    state mkdir_msg_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => mkdir_crdirent_setup_msgpair;
        default => mkdir_msg_failure;
    }

    state mkdir_msg_failure
    {
        run mkdir_msg_failure;
        default => cleanup;
    }

    state mkdir_crdirent_setup_msgpair
    {
        run mkdir_crdirent_setup_msgpair;
        success => mkdir_crdirent_xfer_msgpair;
        default => mkdir_crdirent_failure;
    }

    state mkdir_crdirent_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => cleanup;
        default => mkdir_crdirent_failure;
    }

    state mkdir_crdirent_failure
    {
        run mkdir_crdirent_failure;
        default => delete_handle_setup_msgpair;
    }

    state delete_handle_setup_msgpair
    {
        run mkdir_delete_handle_setup_msgpair;
        success => delete_handle_xfer_msgpair;
        default => cleanup;
    }

    state delete_handle_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mkdir_cleanup;
        MKDIR_RETRY => init;
        default => terminate;
    }
}

%%

int PVFS_isys_mkdir(
    char *object_name,
    PVFS_object_ref parent_ref,
    PVFS_sys_attr attr,
    PVFS_credentials *credentials,
    PVFS_sysresp_mkdir *resp,
    PVFS_sys_op_id *op_id,
    void *user_ptr)
{
    int ret = -PVFS_EINVAL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_isys_mkdir entered\n");

    if ((object_name == NULL) || (resp == NULL))
    {
        return ret;
    }

    if ((strlen(object_name) + 1) > PVFS_REQ_LIMIT_SEGMENT_BYTES)
    {
        return -PVFS_ENAMETOOLONG;
    }

    if ((attr.mask & PVFS_ATTR_SYS_ALL_SETABLE) !=
        PVFS_ATTR_SYS_ALL_SETABLE)
    {
        gossip_lerr("Error: Attribute sanity check failed\n");
        return ret;
    }

    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL)
    {
        return -PVFS_ENOMEM;
    }
    memset(sm_p, 0, sizeof(*sm_p));

    PINT_init_msgarray_params(&sm_p->msgarray_params);
    PINT_init_sysint_credentials(sm_p->cred_p, credentials);
    sm_p->u.mkdir.object_name = object_name;
    sm_p->parent_ref = parent_ref;
    PVFS_util_copy_sys_attr(&sm_p->u.mkdir.sys_attr, &attr);
    sm_p->u.mkdir.mkdir_resp = resp;
    sm_p->u.mkdir.stored_error_code = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "Creating directory named %s "
                 "under parent handle %Lu on fs %d\n", object_name,
                 Lu(parent_ref.handle), parent_ref.fs_id);

    return PINT_client_state_machine_post(
        sm_p, PVFS_SYS_MKDIR, op_id, user_ptr);
}

int PVFS_sys_mkdir(
    char *object_name,
    PVFS_object_ref parent_ref,
    PVFS_sys_attr attr,
    PVFS_credentials *credentials,
    PVFS_sysresp_mkdir *resp)
{
    int ret = -PVFS_EINVAL;
    PVFS_error error;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_mkdir entered\n");

    ret = PVFS_isys_mkdir(object_name, parent_ref, attr,
                          credentials, resp, &op_id, NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_mkdir call", ret);
        error = ret;
    }
    else
    {
        ret = PINT_sys_wait(op_id, "mkdir", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
    }

    PINT_sys_release(op_id);
    return error;
}

/****************************************************************/

static int mkdir_init(PINT_client_sm *sm_p,
                      job_status_s *js_p)
{
    job_id_t tmp_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: init\n");

    assert((js_p->error_code == 0) ||
           (js_p->error_code == MKDIR_RETRY));

    if (js_p->error_code == MKDIR_RETRY)
    {
        js_p->error_code = 0;

        return job_req_sched_post_timer(
            PVFS2_CLIENT_RETRY_DELAY, sm_p, 0, js_p, &tmp_id,
            pint_client_sm_context);
    }
    return 1;
}

static int mkdir_msg_comp_fn(void *v_p,
                             struct PVFS_server_resp *resp_p,
                             int index)
{
    PINT_client_sm *sm_p = (PINT_client_sm *) v_p;
    
    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir_msg_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_MKDIR);

    if (resp_p->status != 0)
    {
	return resp_p->status;
    }

    /* otherwise, just stash the newly created meta handle */
    sm_p->u.mkdir.metafile_handle = resp_p->u.mkdir.handle;

    gossip_debug(
        GOSSIP_CLIENT_DEBUG, "*** Got newly created dir handle %Lu\n",
        Lu(sm_p->u.mkdir.metafile_handle));

    return 0;
}

static int mkdir_crdirent_comp_fn(void *v_p,
                                  struct PVFS_server_resp *resp_p,
                                  int index)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir_crdirent_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_CRDIRENT);

    if (resp_p->status != 0)
    {
	return resp_p->status;
    }
    return 0;
}

static int mkdir_delete_handle_comp_fn(void *v_p,
                                       struct PVFS_server_resp *resp_p,
                                       int index)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir_delete_handle_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_REMOVE);

    if (resp_p->status != 0)
    {
	return resp_p->status;
    }
    return 0;
}

static int mkdir_msg_setup_msgpair(PINT_client_sm *sm_p,
                                   job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    PVFS_handle_extent_array meta_handle_extent_array;
    PINT_sm_msgpair_state *msg_p = NULL;
    struct server_configuration_s *server_config = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "mkdir state: mkdir_msg_setup_msgpair\n");

    js_p->error_code = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG," mkdir: posting mkdir req\n");

    msg_p = &sm_p->msgpair;
    memset(msg_p, 0, sizeof(PINT_sm_msgpair_state));

    server_config = PINT_get_server_config_struct(
        sm_p->parent_ref.fs_id);

    ret = PINT_cached_config_get_next_meta(
        server_config, sm_p->parent_ref.fs_id,
        &msg_p->svr_addr, &meta_handle_extent_array);

    PINT_put_server_config_struct(server_config);

    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
        return 1;
    }

    PINT_SERVREQ_MKDIR_FILL(
        msg_p->req,
        *sm_p->cred_p,
        sm_p->parent_ref.fs_id,
        meta_handle_extent_array,
        sm_p->u.mkdir.sys_attr,
        PVFS_ATTR_SYS_ALL_NOSIZE);

    /* fill in msgpair structure components */
    msg_p->fs_id = sm_p->parent_ref.fs_id;
    msg_p->handle = meta_handle_extent_array.extent_array[0].first;
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = mkdir_msg_comp_fn;

    sm_p->msgarray = msg_p;
    sm_p->msgarray_count = 1;

    return 1;
}

static int mkdir_msg_failure(PINT_client_sm *sm_p,
                             job_status_s *js_p)
{
    sm_p->u.mkdir.stored_error_code = js_p->error_code;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: mkdir_msg_failure\n");
    return 1;
}

static int mkdir_crdirent_setup_msgpair(PINT_client_sm *sm_p,
                                        job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "mkdir state: crdirent_setup_msgpair\n");

    js_p->error_code = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG," mkdir: posting crdirent req\n");

    msg_p = &sm_p->msgpair;
    memset(msg_p, 0, sizeof(PINT_sm_msgpair_state));

    gossip_debug(GOSSIP_CLIENT_DEBUG, "hooking dirent %s (%Lu) under "
                 "parent handle %Lu\n", sm_p->u.mkdir.object_name,
                 Lu(sm_p->u.mkdir.metafile_handle),
                 Lu(sm_p->parent_ref.handle));

    PINT_SERVREQ_CRDIRENT_FILL(
        msg_p->req,
        *sm_p->cred_p,
        sm_p->u.mkdir.object_name,
        sm_p->u.mkdir.metafile_handle,
        sm_p->parent_ref.handle,
        sm_p->parent_ref.fs_id);

    /* fill in msgpair structure components */
    msg_p->fs_id = sm_p->parent_ref.fs_id;
    msg_p->handle = sm_p->u.mkdir.metafile_handle;
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = mkdir_crdirent_comp_fn;

    ret = PINT_cached_config_map_to_server(&msg_p->svr_addr,
                                    sm_p->parent_ref.handle,
                                    sm_p->parent_ref.fs_id);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }

    sm_p->msgarray = msg_p;
    sm_p->msgarray_count = 1;

    return 1;
}

static int mkdir_crdirent_failure(PINT_client_sm *sm_p,
				   job_status_s *js_p)
{
    sm_p->u.mkdir.stored_error_code = js_p->error_code;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: crdirent_failure\n");

    PVFS_perror_gossip("mkdir crdirent failed", js_p->error_code);
    return 1;
}

static int mkdir_delete_handle_setup_msgpair(PINT_client_sm *sm_p,
                                             job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    PVFS_BMI_addr_t metafile_server_addr;
    PINT_sm_msgpair_state *msg_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: "
                 "delete_handle_setup_msgpair_array\n");

    js_p->error_code = 0;

    msg_p = &sm_p->msgpair;
    memset(msg_p, 0, sizeof(PINT_sm_msgpair_state));

    sm_p->msgarray = msg_p;
    sm_p->msgarray_count = 1;

    ret = PINT_cached_config_map_to_server(&metafile_server_addr,
                                    sm_p->u.mkdir.metafile_handle,
                                    sm_p->parent_ref.fs_id);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
        return 1;
    }

    PINT_SERVREQ_REMOVE_FILL(
        msg_p->req,
        *sm_p->cred_p,
        sm_p->parent_ref.fs_id,
        sm_p->u.mkdir.metafile_handle);

    msg_p->fs_id = sm_p->parent_ref.fs_id;
    msg_p->handle = sm_p->u.mkdir.metafile_handle;
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = mkdir_delete_handle_comp_fn;
    msg_p->svr_addr = metafile_server_addr;

    gossip_debug(GOSSIP_CLIENT_DEBUG, " Preparing to remove "
                 "directory handle %Lu\n", Lu(msg_p->handle));
    return 1;
}

static int mkdir_cleanup(PINT_client_sm *sm_p,
                         job_status_s *js_p)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: cleanup\n");

    PVFS_util_release_sys_attr(&sm_p->u.mkdir.sys_attr);

    sm_p->error_code = (sm_p->u.mkdir.stored_error_code ?
                        sm_p->u.mkdir.stored_error_code :
                        js_p->error_code);

    if (sm_p->error_code == 0)
    {
        sm_p->u.mkdir.mkdir_resp->ref.handle =
            sm_p->u.mkdir.metafile_handle;
        sm_p->u.mkdir.mkdir_resp->ref.fs_id =
            sm_p->parent_ref.fs_id;
    }
    else if ((PVFS_ERROR_CLASS(-sm_p->error_code) == PVFS_ERROR_BMI) &&
             (sm_p->u.mkdir.retry_count < PVFS2_CLIENT_RETRY_LIMIT))
    {
        if ((sm_p->acache_hit != 0) || (sm_p->pinode != NULL))
        {
            PINT_acache_release(sm_p->pinode);
            sm_p->acache_hit = 0;
            sm_p->pinode = NULL;
        }

        sm_p->u.mkdir.stored_error_code = 0;
        sm_p->u.mkdir.retry_count++;

        gossip_debug(GOSSIP_CLIENT_DEBUG, "Retrying mkdir operation "
                     "(attempt number %d)\n", sm_p->u.mkdir.retry_count);

        js_p->error_code = MKDIR_RETRY;
        return 1;
    }
    else
    {
        PVFS_perror_gossip("mkdir failed with error", sm_p->error_code);
    }

    sm_p->op_complete = 1;
    return 0;
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
