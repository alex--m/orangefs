/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-servreq.h"
#include "pint-bucket.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

/* values greater than zero are usable here */
/* TODO: this is a hack, duplicated in msgpair.sm, sort out later... */
enum
{
    MSGPAIR_RETURN_SUCCESS = 2
};

/* state function prototypes */
static int mgmt_get_dfile_array_getattr_setup_msgpair(
    PINT_client_sm * sm_p,
    job_status_s * js_p);

static int mgmt_get_dfile_array_cleanup(
    PINT_client_sm * sm_p,
    job_status_s * js_p);

/* completion function prototypes */
static int getattr_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int i);

%%

machine pvfs2_client_mgmt_get_dfile_array_sm(getattr_setup_msgpair,
                                             getattr_xfer_msgpair,
                                             cleanup)
{
    state getattr_setup_msgpair
    {
	run mgmt_get_dfile_array_getattr_setup_msgpair;
	success => getattr_xfer_msgpair;
	default => cleanup;
    }
    state getattr_xfer_msgpair
    {
	jump pvfs2_client_getattr_acache_sm;
	default => cleanup;
    }
    state cleanup
    {
	run mgmt_get_dfile_array_cleanup;
	default => getattr_setup_msgpair;
    }
}

%%

int PVFS_mgmt_get_dfile_array(
    PVFS_pinode_reference pinode_refn,
    PVFS_credentials credentials,
    PVFS_handle * dfile_array,
    int dfile_count)
{
    int ret;
    PINT_client_sm *sm_p;

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_get_dfile_array entered\n");

    /* do parameter checking here, then assume things are ok below.
     * assert()s are still ok of course :).
     */
    if (!dfile_array)
	return -PVFS_EINVAL;

    /* build PINT_client_sm structure */
    /* TODO: KEEP A CACHE OF THESE AROUND SO WE'RE NOT ALWAYS MALLOC'ING? */
    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL)
	return -PVFS_ENOMEM;

    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;
    sm_p->u.get_dfile_array.pinode_refn = pinode_refn;
    sm_p->u.get_dfile_array.dfile_array = dfile_array;
    sm_p->u.get_dfile_array.dfile_count = dfile_count;

    gossip_debug(CLIENT_DEBUG,
		 "PVFS_mgmt_get_dfile_array calling PINT_client_state_machine_post()\n");

    /* do something to kick off processing */
    ret = PINT_client_state_machine_post(sm_p, PVFS_MGMT_GET_DFILE_ARRAY);
    if(ret < 0)
    {
	gossip_lerr("Error: PINT_client_state_machine_post() failure.\n");
	free(sm_p);
	return(ret);
    }

    /* while !done call progress function */
    while (!sm_p->op_complete && ret == 0)
    {
	gossip_debug(CLIENT_DEBUG,
		     "PVFS_mgmt_get_dfile_array calling PINT_client_state_machine_test()\n");
	ret = PINT_client_state_machine_test();
    }
    if(ret < 0)
    {
	gossip_lerr("Error: PINT_client_state_machine_test() failure.\n");
	free(sm_p);
	return(ret);
    }

    gossip_debug(CLIENT_DEBUG, "PVFS_mgmt_get_dfile_array completed\n");

    /* save our return value */
    ret = sm_p->error_code;

    /* clean up after ourselves */
    free(sm_p);
    return (ret);
}


/****************************************************************/

/* mgmt_get_dfile_array_getattr_setup_msgpair()
 *
 */
static int mgmt_get_dfile_array_getattr_setup_msgpair(
    PINT_client_sm * sm_p,
    job_status_s * js_p)
{
    int ret = -1;

    gossip_debug(CLIENT_DEBUG,
		 "mgmt_get_dfile_array state: getattr_setup_msgpair\n");

    /* parameter range checks */
    assert(sm_p->u.get_dfile_array.pinode_refn.handle != PVFS_HANDLE_NULL);
    /* TODO: do we have some defined value to check for here? */
    assert(sm_p->u.get_dfile_array.pinode_refn.fs_id != 0);

    /* fill in getattr request */
    PINT_SERVREQ_GETATTR_FILL(sm_p->msgpair.req,
			      *sm_p->cred_p,
			      sm_p->u.get_dfile_array.pinode_refn.fs_id,
			      sm_p->u.get_dfile_array.pinode_refn.handle,
			      PVFS_ATTR_COMMON_ALL | PVFS_ATTR_META_DFILES);

    /* fill in msgpair structure components */
    sm_p->msgpair.fs_id = sm_p->u.get_dfile_array.pinode_refn.fs_id;
    sm_p->msgpair.handle = sm_p->u.get_dfile_array.pinode_refn.handle;
    sm_p->msgpair.comp_fn = getattr_comp_fn;
    ret = PINT_bucket_map_to_server(&sm_p->msgpair.svr_addr,
				    sm_p->msgpair.handle, sm_p->msgpair.fs_id);
    if (ret < 0)
    {
	gossip_err("Error: failure mapping to server.\n");
	js_p->error_code = ret;
	return(1);
    }

    js_p->error_code = 0;
    return(1);
}

/* getattr_comp_fn()
 *
 * Called to copy data from getattr response into the
 * mgmt_get_dfile_array-specific portion of the PINT_client_sm structure,
 * so we can use the data after returning to this state
 * machine.
 *
 * Return value is returned in job status, so it affects the
 * resulting state coming back from the nested state machine.
 */
static int getattr_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int index)
{
    PINT_client_sm *sm_p = (PINT_client_sm *) v_p;
    PVFS_object_attr* r_attr_p;

    assert(resp_p->op == PVFS_SERV_GETATTR);	/* sanity check */

    /* if we get an error, just return immediately, don't try to
     * actually fill anything in.
     */
    if (resp_p->status != 0)
    {
	return resp_p->status;
    }

    r_attr_p = (sm_p->acache_hit ?
	&sm_p->pinode->attr :
	&resp_p->u.getattr.attr);

    /* make sure the caller asked about the right type of object */
    if(r_attr_p->objtype != PVFS_TYPE_METAFILE)
    {
	return (-PVFS_EINVAL);
    }

    /* sanity checks */
    assert(r_attr_p->mask & PVFS_ATTR_META_DFILES);
    assert(r_attr_p->u.meta.dfile_count > 0);

    /* make sure the caller provided a large enough array */
    if(r_attr_p->u.meta.dfile_count >
	sm_p->u.get_dfile_array.dfile_count)
    {
	return (-PVFS_EMSGSIZE);
    }

    /* copy out dfile count and array */
    sm_p->u.get_dfile_array.dfile_count =
	r_attr_p->u.meta.dfile_count;
    memcpy(sm_p->u.get_dfile_array.dfile_array,
	   r_attr_p->u.meta.dfile_array,
	   (r_attr_p->u.meta.dfile_count * sizeof(PVFS_handle)));

    return (0);
}

/* mgmt_get_dfile_array_cleanup()
 */
static int mgmt_get_dfile_array_cleanup(
    PINT_client_sm * sm_p,
    job_status_s * js_p)
{
    gossip_debug(CLIENT_DEBUG, "mgmt_get_dfile_array state: cleanup\n");

    /* store enough information in the sm structure that the caller
     * can tell what happened.
     */
    sm_p->error_code = js_p->error_code;

    /* if we acache entry, release it */
    if (sm_p->acache_hit)
    {
	PINT_acache_release(sm_p->pinode);
    }

    /* mark operation as complete */
    sm_p->op_complete = 1;

    return 0;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
