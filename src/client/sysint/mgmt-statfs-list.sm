/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "state-machine-fns.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pvfs2-mgmt.h"
#include "pint-servreq.h"
#include "pint-bucket.h"
#include "PINT-reqproto-encode.h"

extern job_context_id pint_client_sm_context;

/* state function prototypes */
static int mgmt_statfs_list_setup_msgpair(
    PINT_client_sm *sm_p, job_status_s *js_p);
static int mgmt_statfs_list_cleanup(
    PINT_client_sm *sm_p, job_status_s *js_p);

static int statfs_list_comp_fn(
    void *v_p,
    struct PVFS_server_resp *resp_p,
    int index);

%%

machine pvfs2_client_mgmt_statfs_list_sm(
    setup_msgpair,
    xfer_msgpair,
    cleanup)
{
    state setup_msgpair
    {
        run mgmt_statfs_list_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_client_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_statfs_list_cleanup;
        default => terminate;
    }
}

%%

int PVFS_mgmt_statfs_list(PVFS_fs_id fs_id,
			  PVFS_credentials credentials,
			  struct PVFS_mgmt_server_stat *stat_array,
			  PVFS_BMI_addr_t *addr_array,
			  int *error_array,
			  int count)
{
    int ret = -PVFS_EINVAL, i = 0;
    PINT_client_sm *sm_p = NULL;
    PVFS_error error;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_statfs_list entered\n");

    if ((count < 1) || !stat_array || !addr_array)
    {
	return -PVFS_EINVAL;
    }

    sm_p = (PINT_client_sm *) malloc(sizeof(*sm_p));
    if (sm_p == NULL)
    {
	error = -PVFS_ENOMEM;
	goto cleanup;
    }

    memset(sm_p, 0, sizeof(*sm_p));

    sm_p->cred_p = &credentials;
    sm_p->u.statfs_list.fs_id      = fs_id;
    sm_p->u.statfs_list.stat_array = stat_array;
    sm_p->u.statfs_list.count      = count;
    sm_p->u.statfs_list.addr_array = addr_array;

    memset(sm_p->u.statfs_list.stat_array, 0,
           (count * sizeof(struct PVFS_mgmt_server_stat)));

    sm_p->msgarray_count = count;
    sm_p->msgarray = (PINT_client_sm_msgpair_state *)malloc(
        count * sizeof(PINT_client_sm_msgpair_state));
    if (sm_p->msgarray == NULL)
    {
	error = -PVFS_ENOMEM;
	goto cleanup;
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_statfs_list calling "
                 "PINT_client_state_machine_post()\n");

    ret = PINT_client_state_machine_post(sm_p, PVFS_MGMT_STATFS_LIST);
    if (ret < 0)
    {
	PVFS_perror("Error: PINT_client_state_machine_post() "
                    "failure.\n",ret);
	error = ret;
	goto cleanup;
    }

    while (!sm_p->op_complete && (ret == 0))
    {
	gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_statfs_list calling "
                     "PINT_client_state_machine_test()\n");
	ret = PINT_client_state_machine_test();
    }

    if (ret < 0)
    {
	gossip_lerr("Error: PINT_client_state_machine_test() failure.\n");
	error = ret;
	goto cleanup;
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_statfs_list completed\n");

    error = sm_p->error_code;

    if ((error != 0) && (error_array != NULL))
    {
	/* store server-specific errors in error_array */
	for (i=0; i < count; i++)
        {
	    error_array[i] = sm_p->msgarray[i].op_status;
	}
	error = -PVFS_EPARTIAL;
    }

 cleanup:

    if (sm_p->msgarray != NULL)
    {
        free(sm_p->msgarray);
    }

    if (sm_p != NULL)
    {
        free(sm_p);
    }
    return error;
}

static int mgmt_statfs_list_setup_msgpair(PINT_client_sm *sm_p,
                                          job_status_s *js_p)
{
    int i = 0;
    PINT_client_sm_msgpair_state *msg_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "statfs_list state: mgmt_statfs_list_setup_msgpair\n");

    for(i=0; i<sm_p->msgarray_count; i++)
    {
	msg_p = &sm_p->msgarray[i];

	PINT_SERVREQ_STATFS_FILL(msg_p->req,
				 *sm_p->cred_p,
				 sm_p->u.statfs_list.fs_id);

	msg_p->fs_id = sm_p->u.statfs_list.fs_id;
	msg_p->handle = PVFS_HANDLE_NULL;
	msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
	msg_p->comp_fn = statfs_list_comp_fn;
	msg_p->svr_addr = sm_p->u.statfs_list.addr_array[i];
    }

    /* immediate return: next state jumps to msgpairarray machine */
    js_p->error_code = 0;
    return 1;
}

static int mgmt_statfs_list_cleanup(PINT_client_sm *sm_p,
                                    job_status_s *js_p)
{
    sm_p->error_code  = js_p->error_code;
    sm_p->op_complete = 1;

    return 0;
}

static int statfs_list_comp_fn(void *v_p,
			       struct PVFS_server_resp *resp_p,
			       int i)
{
    int ret = -PVFS_EINVAL, j = 0;
    PINT_client_sm *sm_p = (PINT_client_sm *)v_p;

    /* if this particular request was successful, then store the
     * statfs information in an array to be returned to caller
     */
    if (sm_p->msgarray[i].op_status == 0)
    {
	struct PVFS_mgmt_server_stat *sm_stat =
	    &sm_p->u.statfs_list.stat_array[i];
	PVFS_statfs *resp_stat = &resp_p->u.statfs.stat;

	sm_stat->fs_id = resp_stat->fs_id;
	sm_stat->bytes_available = resp_stat->bytes_available;
	sm_stat->bytes_total = resp_stat->bytes_total;
	sm_stat->ram_total_bytes = resp_stat->ram_total_bytes;
	sm_stat->ram_free_bytes = resp_stat->ram_free_bytes;
	sm_stat->uptime_seconds = resp_stat->uptime_seconds;
	sm_stat->handles_available_count =
            resp_stat->handles_available_count;

	sm_stat->bmi_address = PVFS_mgmt_map_addr(
            sm_p->u.statfs_list.fs_id, *sm_p->cred_p,
            sm_p->msgarray[i].svr_addr, &sm_stat->server_type);
	assert(sm_stat->bmi_address);

	ret = PINT_bucket_get_server_handle_count(
            sm_stat->bmi_address, sm_p->u.statfs_list.fs_id,
            &sm_stat->handles_total_count);

        if (ret)
        {
            PVFS_perror("PINT_bucket_get_server_handle_count failed ",
                        ret);
            return ret;
        }
	assert(sm_stat->handles_total_count >=
	       sm_stat->handles_available_count);
    }
 
    /* if this is the last response, check all of the status values
     * and return error code if any requests failed
     */
    if (i == (sm_p->msgarray_count -1))
    {
	for (j=0; j < sm_p->msgarray_count; j++)
	{
	    if (sm_p->msgarray[j].op_status != 0)
	    {
		return(sm_p->msgarray[j].op_status);
	    }
	}
    }
    return 0;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
