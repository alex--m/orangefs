/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include "pvfs2-server.h"

static int statfs_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int statfs_fake(PINT_server_op *s_op, job_status_s* js_p);

%%

machine pvfs2_statfs_sm(prelude, fake, final_response, cleanup)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		default => fake;
	}

	state fake
	{
		run statfs_fake;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run statfs_cleanup;
		default => prelude;
	}
}

%%

/* statfs_fake()
 *
 * just sets an error code- this isn't implemented yet
 */
static int statfs_fake(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("fake");
    js_p->error_code = -PVFS_ENOSYS;
    return(1);
}


/* statfs_cleanup()
 *
 * cleans up any resources consumed by this state machine and ends
 * execution of the machine
 */
static int statfs_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("cleanup");
    return(server_state_machine_complete(s_op));
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */

