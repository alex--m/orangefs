/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"

enum {
    STATE_METAFILE = 7,
    STATE_DATAFILE = 8,
};


static int getattr_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int getattr_verify_attribs(PINT_server_op *s_op, job_status_s* js_p);
static int getattr_read_datafile_size(PINT_server_op *s_op, job_status_s* js_p);
static int getattr_read_metafile_datafile_handles_if_required(
    PINT_server_op *s_op, job_status_s* js_p);
static int getattr_read_metafile_distribution_if_required(
    PINT_server_op *s_op, job_status_s* js_p);
static int getattr_setup_resp(PINT_server_op *s_op, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];
extern job_context_id PINT_server_job_context;

%%

machine pvfs2_get_attr_sm(prelude,
		 cleanup,
		 setup_resp,
		 final_response,
		 verify_attribs,
		 read_datafile_size,
		 read_metafile_datafile_handles_if_required,
		 read_metafile_distribution_if_required)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		success => verify_attribs;
		default => final_response;
	}

	state verify_attribs
	{
		run getattr_verify_attribs;
                STATE_DATAFILE => read_datafile_size;
		STATE_METAFILE => read_metafile_datafile_handles_if_required;
		default => setup_resp;
	}

	state read_datafile_size
	{
		run getattr_read_datafile_size;
		default => setup_resp;
	}

	state read_metafile_datafile_handles_if_required
	{
		run getattr_read_metafile_datafile_handles_if_required;
		default => read_metafile_distribution_if_required;
	}

	state read_metafile_distribution_if_required
	{
		run getattr_read_metafile_distribution_if_required;
		default => setup_resp;
	}

	state setup_resp
	{
		run getattr_setup_resp;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run getattr_cleanup;
		default => prelude;
	}
}

%%


/* getattr_verify_attribs
 */
static int getattr_verify_attribs(PINT_server_op *s_op, job_status_s* js_p)
{
    PVFS_object_attr *a_p;

    gossip_debug(SERVER_DEBUG, "getattr state: verify_attribs\n");

    /* copy basic attributes structure into response */
    s_op->resp.u.getattr.attr = s_op->attr;
    a_p = &s_op->resp.u.getattr.attr;

    gossip_debug(SERVER_DEBUG,
		 "  attrs read from dspace = (owner = %d, group = %d, perms = %o, type = %d, atime = %lld, mtime = %lld, ctime = %lld)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype,
		 (long long)a_p->atime,
		 (long long)a_p->mtime,
		 (long long)a_p->ctime);

    js_p->error_code = 0;

    if (a_p->objtype == PVFS_TYPE_METAFILE)
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to a metafile\n",
		     s_op->req->u.getattr.handle);

	js_p->error_code = STATE_METAFILE;

        if (s_op->resp.u.getattr.attr.mask & PVFS_ATTR_META_DFILES)
        {
            /* save # of datafiles so we know the size for reading later */
            s_op->resp.u.getattr.attr.u.meta.dfile_count =
                a_p->u.meta.dfile_count;

            /* TODO: put in real error handling for this condition: */
            assert(s_op->resp.u.getattr.attr.u.meta.dfile_count 
                   < PVFS_REQ_LIMIT_DFILE_COUNT);
            /* TODO: keep distribution size in here too */
        }
    }
    else if (a_p->objtype == PVFS_TYPE_DATAFILE)
    {
	gossip_debug(SERVER_DEBUG, "  handle 0x%08Lx refers to "
                     "a directory. doing nothing special\n",
		     s_op->req->u.getattr.handle);
    }
    else if (a_p->objtype == PVFS_TYPE_DIRECTORY)
    {
	gossip_debug(SERVER_DEBUG, "  handle 0x%08Lx refers to "
                     "a directory. doing nothing special\n",
		     s_op->req->u.getattr.handle);
    }
    else if (a_p->objtype == PVFS_TYPE_DIRDATA)
    {
	gossip_debug(SERVER_DEBUG, "  handle 0x%08Lx refers to "
                     "a dirdata object. doing nothing special\n",
		     s_op->req->u.getattr.handle);
    }
    else if (a_p->objtype == PVFS_TYPE_SYMLINK)
    {
	gossip_debug(SERVER_DEBUG, "  handle 0x%08Lx refers to "
                     "a symlink. doing nothing special\n",
		     s_op->req->u.getattr.handle);
    }
    else
    {
	gossip_debug(SERVER_DEBUG, "  handle 0x%08Lx refers to something "
                     "other than a metafile\n\t-- assuming datafile!\n",
		     s_op->req->u.getattr.handle);

        a_p->objtype = PVFS_TYPE_DATAFILE;
        a_p->mask |= PVFS_ATTR_SYS_SIZE;
        a_p->mask |= PVFS_ATTR_DATA_ALL;

        js_p->error_code = STATE_DATAFILE;
    }
    return 1;
}

/* getattr_read_datafile_size
 */
static int getattr_read_datafile_size(PINT_server_op *s_op, job_status_s* js_p)
{
    int ret;
    job_id_t tmp_id;

    gossip_debug(SERVER_DEBUG, "getattr state: "
                 "getattr_read_datafile_size\n");

    ret = job_trove_dspace_getattr(s_op->req->u.getattr.fs_id,
                                   s_op->req->u.getattr.handle,
                                   s_op,
                                   js_p,
                                   &tmp_id,
                                   PINT_server_job_context);

    return ret;
}


/* getattr_read_metafile_datafile_handles_if_required
 */
static int getattr_read_metafile_datafile_handles_if_required(
    PINT_server_op *s_op, job_status_s* js_p)
{
    int dfile_count;
    int ret;
    job_id_t i;

    gossip_debug(SERVER_DEBUG, "getattr state: "
                 "read_metafile_datafile_handles_if_required\n");

    /* if we don't need to fill in the dfiles, skip them */
    if (!(s_op->req->u.getattr.attrmask & PVFS_ATTR_META_DFILES))
    {
        gossip_debug(SERVER_DEBUG, "skipping data handle read\n");
        js_p->error_code = 0;
        return 1;
    }

    dfile_count = s_op->resp.u.getattr.attr.u.meta.dfile_count;

    s_op->key.buffer    = Trove_Common_Keys[METAFILE_HANDLES_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_HANDLES_KEY].size;

    /* should be more than one datafile. */
    assert(dfile_count > 0);

    /* add mask value to indicate the data file array is filled */
    s_op->resp.u.getattr.attr.mask |= PVFS_ATTR_META_DFILES;

    /* NOTE: ALLOCATING MEMORY HERE */
    s_op->resp.u.getattr.attr.u.meta.dfile_array = malloc(dfile_count * sizeof(PVFS_handle));
    if(!s_op->resp.u.getattr.attr.u.meta.dfile_array)
    {
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    s_op->val.buffer    = s_op->resp.u.getattr.attr.u.meta.dfile_array;
    s_op->val.buffer_sz = dfile_count * sizeof(PVFS_handle);

    gossip_debug(SERVER_DEBUG,
		 "  reading %d datafile handles (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 dfile_count,
		 s_op->req->u.getattr.fs_id,
		 s_op->req->u.getattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_read(s_op->req->u.getattr.fs_id,
					 s_op->req->u.getattr.handle,
					 &s_op->key,
					 &s_op->val,
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &i,
					 PINT_server_job_context);

    return ret;
}

/* getattr_read_metafile_distribution_if_required
 */
static int getattr_read_metafile_distribution_if_required(
    PINT_server_op *s_op, job_status_s* js_p)
{
    int ret;
    job_id_t i;

    gossip_debug(SERVER_DEBUG, "getattr state: "
                 "read_metafile_distribution_if_required\n");

    /* if we don't need to fill in the distribution, skip it */
    if (!(s_op->req->u.getattr.attrmask & PVFS_ATTR_META_DIST))
    {
        gossip_debug(SERVER_DEBUG, "skipping data handle read\n");
        js_p->error_code = 0;
        return 1;
    }

    s_op->key.buffer    = Trove_Common_Keys[METAFILE_DIST_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_DIST_KEY].size;

    /* should be some distribution information. */
    assert(s_op->resp.u.getattr.attr.u.meta.dist_size > 0);

    /* add mask value to indicate the distribution is filled */
    s_op->resp.u.getattr.attr.mask |= PVFS_ATTR_META_DIST;

    /* NOTE: allocating memory here, free'd in last state */
    s_op->resp.u.getattr.attr.u.meta.dist =
	malloc(s_op->resp.u.getattr.attr.u.meta.dist_size);
    if(!s_op->resp.u.getattr.attr.u.meta.dist)
    {
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    s_op->val.buffer    = s_op->resp.u.getattr.attr.u.meta.dist;
    s_op->val.buffer_sz = s_op->resp.u.getattr.attr.u.meta.dist_size;

    ret = job_trove_keyval_read(s_op->req->u.getattr.fs_id,
					 s_op->req->u.getattr.handle,
					 &(s_op->key),
					 &(s_op->val),
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &i,
					 PINT_server_job_context);
    return ret;
}

/* getattr_setup_resp()
 *
 * fills in the response structure based on results of previous 
 * operations
 */
static int getattr_setup_resp(PINT_server_op *s_op, job_status_s* js_p)
{
    PVFS_object_attr *a_p;

    gossip_debug(SERVER_DEBUG, "getattr state: setup_resp\n");

    a_p = &s_op->resp.u.getattr.attr;
    
    /* TODO: figure out if we need a different packing mechanism here */
    if ((a_p->objtype == PVFS_TYPE_METAFILE) &&
        (a_p->mask & PVFS_ATTR_META_DIST))
    {
        gossip_err("KLUDGE: reading distribution on disk in "
                   "network encoded format.\n");
        PINT_Dist_decode(a_p->u.meta.dist, NULL);
    }

    gossip_debug(SERVER_DEBUG,
		 "  sending attrs (owner = %d, group = %d, perms = %o, "
		 "type = %d, atime = %lld, mtime = %lld, ctime = %lld)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype,
		 (long long)a_p->atime,
		 (long long)a_p->mtime,
		 (long long)a_p->ctime);

    if ((a_p->objtype == PVFS_TYPE_METAFILE) &&
        (a_p->mask & PVFS_ATTR_META_DFILES))
    {
	gossip_debug(SERVER_DEBUG,
		     "  also returning %d datafile handles\n",
		     a_p->u.meta.dfile_count);
    }

    if ((a_p->objtype == PVFS_TYPE_DATAFILE) &&
        (a_p->mask & PVFS_ATTR_SYS_SIZE))
    {
        if (js_p->error_code != 0)
        {
            gossip_err("*** dspace size read failed.\n");
        }
        else
        {
            /* assign properly retrieved size value to response */
            a_p->u.data.size = js_p->ds_attr.b_size;

            gossip_debug(SERVER_DEBUG,
                         "  also returning data size of %Ld\n",
                         a_p->u.data.size);
        }
    }

    gossip_debug(SERVER_DEBUG,
		 "  sending status %d\n",
		 s_op->resp.status);

    /* NOTE: we _intentionally_ preserve the error_code so that the 
     * following states can use it to set the status field in the
     * response
     */
    return(1);
}


/*
 * Function: getattr_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      Memory has been allocated
 *
 * Post:     All Allocated memory has been freed.
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static int getattr_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{

    gossip_debug(SERVER_DEBUG, "getattr state: cleanup\n");

    /*
      if this is a metafile, we may have allocated space
      for the datafile handles; free that.
    */
    if (s_op->resp.u.getattr.attr.objtype == PVFS_TYPE_METAFILE)
    {
        if (s_op->resp.u.getattr.attr.mask & PVFS_ATTR_META_DFILES)
            free(s_op->resp.u.getattr.attr.u.meta.dfile_array);

        if (s_op->resp.u.getattr.attr.mask & PVFS_ATTR_META_DIST)
            free(s_op->resp.u.getattr.attr.u.meta.dist);
    }

    return(PINT_state_machine_complete(s_op));
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */

