/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"

enum {
    STATE_METAFILE = 7,
};


static int getattr_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int getattr_getobj_attribs(PINT_server_op *s_op, job_status_s* js_p);
static int getattr_release_posted_job(PINT_server_op *s_op, job_status_s* js_p);
static int getattr_send_bmi(PINT_server_op *s_op, job_status_s* js_p);
static int getattr_verify_attribs(PINT_server_op *s_op, job_status_s* js_p);
static int getattr_read_metafile_datafile_handles_if_required(
    PINT_server_op *s_op, job_status_s* js_p);
static int getattr_read_metafile_distribution_if_required(
    PINT_server_op *s_op, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];
extern job_context_id PINT_server_job_context;

/* TODO: need error transition from prelude */

%%

machine pvfs2_get_attr_sm(prelude,
		 cleanup,
		 getobj_attrib,
		 send_bmi,
		 release,
		 verify_attribs,
		 read_metafile_datafile_handles_if_required,
		 read_metafile_distribution_if_required)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		default => getobj_attrib;
	}

	state getobj_attrib
	{
		run getattr_getobj_attribs;
		default => verify_attribs;
	}

	state verify_attribs
	{
		run getattr_verify_attribs;
		STATE_METAFILE => read_metafile_datafile_handles_if_required;
		default => send_bmi;
	}

	state read_metafile_datafile_handles_if_required
	{
		run getattr_read_metafile_datafile_handles_if_required;
		default => read_metafile_distribution_if_required;
	}

	state read_metafile_distribution_if_required
	{
		run getattr_read_metafile_distribution_if_required;
		default => send_bmi;
	}

	state send_bmi
	{
		run getattr_send_bmi;
		default => release;
	}

	state release
	{
		run getattr_release_posted_job;
		default => cleanup;
	}

	state cleanup
	{
		run getattr_cleanup;
		default => prelude;
	}
}

%%


/*
 * Function: getattr_getobj_attrib
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: Post a trove operation to fetch the attributes
 *           
 *           
 */

static int getattr_getobj_attribs(PINT_server_op *s_op, job_status_s* js_p)
{
    int ret;
    job_id_t i;

    gossip_debug(SERVER_DEBUG, "getattr state: getobj_attribs\n");

    s_op->key.buffer    = Trove_Common_Keys[METADATA_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METADATA_KEY].size;

    /* TODO: READ INTO A TEMPORARY BUFFER AND THEN EXTRACT JUST WHAT THEY WANT */
    s_op->val.buffer    = &s_op->resp.u.getattr.attr;
    s_op->val.buffer_sz = sizeof(PVFS_object_attr);

    gossip_debug(SERVER_DEBUG,
		 "  reading attributes (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.getattr.fs_id,
		 s_op->req->u.getattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_read(s_op->req->u.getattr.fs_id,
					 s_op->req->u.getattr.handle,
					 &(s_op->key),
					 &(s_op->val),
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &i,
					 PINT_server_job_context);
    return(ret);
}

/* getattr_verify_attribs
 */
static int getattr_verify_attribs(PINT_server_op *s_op, job_status_s* js_p)
{
    PVFS_object_attr *a_p;

    gossip_debug(SERVER_DEBUG, "getattr state: verify_attribs\n");

    /* attributes were read into s_op->val.buffer in previous state,
     * which was pointing to s_op->resp.u.getattr.attr;
     */
    a_p = (PVFS_object_attr *) s_op->val.buffer;
    a_p = &s_op->resp.u.getattr.attr;

    if (js_p->error_code != 0)
    {
	gossip_debug(SERVER_DEBUG, "  previous keyval read had "
                     "an error (new metafile?); data is useless\n");
    }
    else
    {
	gossip_debug(SERVER_DEBUG,
		     "  attrs read from dspace = (owner = %d, group = %d, perms = %o, type = %d, atime = %lld, mtime = %lld, ctime = %lld)\n",
		     a_p->owner,
		     a_p->group,
		     a_p->perms,
		     a_p->objtype,
		     (long long)a_p->atime,
		     (long long)a_p->mtime,
		     (long long)a_p->ctime);
    }

    /* TODO: HANDLE TYPES OTHER THAN METAFILES TOO, SOME DAY... */
    if ((js_p->error_code != 0 &&
         s_op->resp.u.getattr.attr.objtype == PVFS_TYPE_METAFILE) ||
        a_p->objtype == PVFS_TYPE_METAFILE)
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to a metafile\n",
		     s_op->req->u.getattr.handle);
	js_p->error_code = STATE_METAFILE;

        if (s_op->resp.u.getattr.attr.mask & PVFS_ATTR_META_DFILES)
        {
            /* save # of datafiles so we know the size for reading later */
            s_op->resp.u.getattr.attr.u.meta.dfile_count =
                a_p->u.meta.dfile_count;

            /* TODO: put in real error handling for this condition: */
            assert(s_op->resp.u.getattr.attr.u.meta.dfile_count 
                   < PVFS_REQ_LIMIT_DFILE_COUNT);
            /* TODO: keep distribution size in here too */
        }
    }
    else if (js_p->error_code == 0)
    {
	gossip_debug(SERVER_DEBUG, "  handle 0x%08Lx refers to "
                     "something other than a metafile\n",
		     s_op->req->u.getattr.handle);
    }
    else
    {
	/* got an error reading */
	gossip_debug(SERVER_DEBUG,
		     "  error reading attributes for handle 0x%08Lx; "
                     "sending response\n", s_op->req->u.getattr.handle);
    }
    return 1;
}

/* getattr_read_metafile_datafile_handles_if_required
 */
static int getattr_read_metafile_datafile_handles_if_required(
    PINT_server_op *s_op, job_status_s* js_p)
{
    int dfile_count;
    int ret;
    job_id_t i;

    gossip_debug(SERVER_DEBUG, "getattr state: "
                 "read_metafile_datafile_handles_if_required\n");

    if (!(s_op->req->u.getattr.attrmask & PVFS_ATTR_META_DFILES))
    {
        /* if we don't need to fill in the dfiles, skip them */
        js_p->error_code = 0;
        return 1;
    }
    dfile_count = s_op->resp.u.getattr.attr.u.meta.dfile_count;

    s_op->key.buffer    = Trove_Common_Keys[METAFILE_HANDLES_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_HANDLES_KEY].size;

    /* should be more than one datafile. */
    assert(dfile_count > 0);

    /* add mask value to indicate the data file array is filled */
    s_op->resp.u.getattr.attr.mask |= PVFS_ATTR_META_DFILES;

    /* NOTE: ALLOCATING MEMORY HERE */
    s_op->resp.u.getattr.attr.u.meta.dfile_array = malloc(dfile_count * sizeof(PVFS_handle));
    if(!s_op->resp.u.getattr.attr.u.meta.dfile_array)
    {
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    s_op->val.buffer    = s_op->resp.u.getattr.attr.u.meta.dfile_array;
    s_op->val.buffer_sz = dfile_count * sizeof(PVFS_handle);

    gossip_debug(SERVER_DEBUG,
		 "  reading %d datafile handles (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 dfile_count,
		 s_op->req->u.getattr.fs_id,
		 s_op->req->u.getattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_read(s_op->req->u.getattr.fs_id,
					 s_op->req->u.getattr.handle,
					 &s_op->key,
					 &s_op->val,
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &i,
					 PINT_server_job_context);

    return ret;
}

/* getattr_read_metafile_distribution_if_required
 */
static int getattr_read_metafile_distribution_if_required(
    PINT_server_op *s_op, job_status_s* js_p)
{
    int ret;
    job_id_t i;

    if (!(s_op->req->u.getattr.attrmask & PVFS_ATTR_META_DIST))
    {
        /* if we don't need to fill in the distribution, skip it */
        js_p->error_code = 0;
        return 1;
    }

    s_op->key.buffer    = Trove_Common_Keys[METAFILE_DIST_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_DIST_KEY].size;

    /* should be some distribution information. */
    assert(s_op->resp.u.getattr.attr.u.meta.dist_size > 0);

    /* add mask value to indicate the distribution is filled */
    s_op->resp.u.getattr.attr.mask |= PVFS_ATTR_META_DIST;

    /* NOTE: allocating memory here, free'd in last state */
    s_op->resp.u.getattr.attr.u.meta.dist =
	malloc(s_op->resp.u.getattr.attr.u.meta.dist_size);
    if(!s_op->resp.u.getattr.attr.u.meta.dist)
    {
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }

    s_op->val.buffer    = s_op->resp.u.getattr.attr.u.meta.dist;
    s_op->val.buffer_sz = s_op->resp.u.getattr.attr.u.meta.dist_size;

    ret = job_trove_keyval_read(s_op->req->u.getattr.fs_id,
					 s_op->req->u.getattr.handle,
					 &(s_op->key),
					 &(s_op->val),
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &i,
					 PINT_server_job_context);
    return ret;
}

/*
 * Function: getattr_send_bmi
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: Send the message and resulting data to the client.
 *           
 */

static int getattr_send_bmi(PINT_server_op *s_op, job_status_s* js_p)
{
    PVFS_object_attr *a_p;
    int ret=0;
    job_id_t i;

    gossip_debug(SERVER_DEBUG, "getattr state: send_bmi\n");

    a_p = &s_op->resp.u.getattr.attr;
    
    /* TODO: figure out if we need a different packing mechanism here */
    if ((a_p->objtype == PVFS_TYPE_METAFILE) &&
        (a_p->mask & PVFS_ATTR_META_DIST))
    {
        gossip_err("KLUDGE: reading distribution on disk in "
                   "network encoded format.\n");
        PINT_Dist_decode(a_p->u.meta.dist, NULL);
    }

    gossip_debug(SERVER_DEBUG,
		 "  sending attrs (owner = %d, group = %d, perms = %o, "
		 "type = %d, atime = %lld, mtime = %lld, ctime = %lld)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype,
		 (long long)a_p->atime,
		 (long long)a_p->mtime,
		 (long long)a_p->ctime);

    /*
      fill in response -- status field is the only generic
      one we should have to set
    */
    s_op->resp.status = js_p->error_code;

    if ((a_p->objtype == PVFS_TYPE_METAFILE) &&
        (a_p->mask & PVFS_ATTR_META_DFILES))
    {
	gossip_debug(SERVER_DEBUG,
		     "  also returning %d datafile handles\n",
		     a_p->u.meta.dfile_count);
    }

    gossip_debug(SERVER_DEBUG,
		 "  sending status %d\n",
		 s_op->resp.status);

    ret = PINT_encode(&s_op->resp,
			       PINT_ENCODE_RESP,
			       &(s_op->encoded),
			       s_op->addr,
			       s_op->decoded.enc_type);

    assert(ret == 0);

    /* Post message */
#ifndef PVFS2_SERVER_DEBUG_BMI

    ret = job_bmi_send_list(
				     s_op->addr,
				     s_op->encoded.buffer_list,
				     s_op->encoded.size_list,
				     s_op->encoded.list_count,
				     s_op->encoded.total_size,
				     s_op->tag,
				     s_op->encoded.buffer_type,
				     0,
				     s_op, 
				     js_p, 
				     &i,
				     PINT_server_job_context);

#else

    ret = job_bmi_send(
				s_op->addr,
				s_op->encoded.buffer_list[0],
				s_op->encoded.total_size,
				s_op->tag,
				s_op->encoded.buffer_type,
				0,
				s_op,
				js_p,
				&i);

#endif

    return(ret);

}


/*
 * Function: getattr_release_posted_job
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      We are done!
 *
 * Post:     We need to let the next operation go.
 *
 * Returns:  int
 *
 * Synopsis: Free the job from the scheduler to allow next job to proceed.
 */

static int getattr_release_posted_job(PINT_server_op *s_op, job_status_s* js_p)
{

    int ret=0;
    job_id_t i;

    ret = job_req_sched_release(s_op->scheduled_id,
	    s_op,
	    js_p,
	    &i,
	    PINT_server_job_context);
    return ret;
}


/*
 * Function: getattr_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      Memory has been allocated
 *
 * Post:     All Allocated memory has been freed.
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */


static int getattr_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{

    gossip_debug(SERVER_DEBUG, "getattr state: cleanup\n");

    /* free encoded response */
    PINT_encode_release(&(s_op->encoded),PINT_ENCODE_RESP);

    /*
      if this is a metafile, we may have allocated space
      for the datafile handles; free that.
    */
    if (s_op->resp.u.getattr.attr.objtype == PVFS_TYPE_METAFILE)
    {
        if (s_op->resp.u.getattr.attr.mask & PVFS_ATTR_META_DFILES)
            free(s_op->resp.u.getattr.attr.u.meta.dfile_array);

        if (s_op->resp.u.getattr.attr.mask & PVFS_ATTR_META_DIST)
            free(s_op->resp.u.getattr.attr.u.meta.dist);
    }

    return(PINT_state_machine_completion(s_op));
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */

