/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <stdlib.h>
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#endif
#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pint-cached-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-internal.h"
#include "trove.h"
#include "pint-security.h"

/* This is a test change to readdir.sm. I will later decide this was a very bad change that I wish hadn't been made. */

enum
{
    STATE_ENOTDIR = 7
};

%%

machine pvfs2_readdir_sm
{
    state prelude
    {
	jump pvfs2_prelude_sm;
	success => verify_directory_metadata;
	default => final_response;
    }

    state verify_directory_metadata
    {
	run readdir_verify_directory_metadata;
	success => iterate_on_entries;
	default => setup_resp;
    }

    state iterate_on_entries
    {
	run readdir_iterate_on_entries;
	default => setup_resp;
    }

    state setup_resp
    {
	run readdir_setup_resp;
	default => final_response;
    }

    state final_response 
    {
	jump pvfs2_final_response_sm;
	default => cleanup;
    }

    state cleanup
    {
	run readdir_cleanup;
	default => terminate;
    }
}

%%

static PINT_sm_action readdir_verify_directory_metadata(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr = &s_op->attr;

    js_p->error_code = 0;
    PINT_perf_count(PINT_server_pc, PINT_PERF_READDIR, 1, PINT_PERF_ADD);

    gossip_debug(GOSSIP_READDIR_DEBUG, " - attrs: owner=%d, group=%d, "
                 "perms=%d\n\ttype=%d, mtime=%llu\n", attr->owner,
                 attr->group, attr->perms, attr->objtype,
                 llu(attr->mtime));

    s_op->u.readdir.directory_version = (uint64_t)attr->mtime;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action readdir_iterate_on_entries(struct PINT_smcb *smcb,
                                                 job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    int j = 0, memory_size = 0, kv_array_size = 0;
    char *memory_buffer = NULL;
    job_id_t j_id;

    /*
      if a client issues a readdir but asks for no entries, we can
      skip doing anything here
    */
    if (s_op->req->u.readdir.dirent_count == 0)
    {
        js_p->error_code = 0;
        return SM_ACTION_COMPLETE;
    }

    if (s_op->req->u.readdir.dirent_count > PVFS_REQ_LIMIT_DIRENT_COUNT)
    {
        js_p->error_code = -PVFS_EINVAL;
        return SM_ACTION_COMPLETE;
    }

    /*
      calculate total memory needed:
      - 2 * dirent_count keyval structures to pass to iterate function
      - dirent_count dirent structures to hold the results
      - dirent_count * metadata_sid_count SIDs
    */

    /* TJS: make sure this is where we get the config for metadata replication */
    ret = PINT_cached_config_get_metadata_sid_count(
                                         s_op->req->u.readdir.fs_id, 
                                         &(s_op->metasidcnt));

    if (ret)
    {
        js_p->error_code = -PVFS_EINVAL;
        return SM_ACTION_COMPLETE;
    }
    s_op->resp.u.readdir.sid_count = s_op->metasidcnt *
                                     s_op->req->u.readdir.dirent_count;


    kv_array_size = (s_op->req->u.readdir.dirent_count *
                     sizeof(PVFS_ds_keyval));

    s_op->u.readdir.keyval_db_entries = (PVFS_ID *) malloc(
                    OSASZ(s_op->req->u.readdir.dirent_count, s_op->metasidcnt));

    memory_size = (2 * kv_array_size +
                   OSASZ(s_op->req->u.readdir.dirent_count,
                         s_op->resp.u.readdir.sid_count));

    memory_buffer = malloc(memory_size);
    if (!memory_buffer)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* set up all the pointers into the one big buffer */
    s_op->key_a = (PVFS_ds_keyval *)memory_buffer;
    memory_buffer += kv_array_size;

    s_op->val_a = (PVFS_ds_keyval *)memory_buffer;
    memory_buffer += kv_array_size;

    s_op->resp.u.readdir.dirent_array = (PVFS_dirent *)memory_buffer;

    memory_buffer += s_op->req->u.readdir.dirent_count *
                     sizeof(PVFS_dirent);

    s_op->resp.u.readdir.sid_array = (PVFS_SID *)memory_buffer;

/* V3 move to func decl */
    PVFS_ID *buffer_location = s_op->u.readdir.keyval_db_entries;

    for (j = 0; j < s_op->req->u.readdir.dirent_count; j++)
    {
    	s_op->key_a[j].buffer = s_op->resp.u.readdir.dirent_array[j].d_name;
    	s_op->key_a[j].buffer_sz = PVFS_NAME_MAX;
        //TJS: Change this to dump into the keyval_db_entries
    	s_op->val_a[j].buffer = &(buffer_location);
    	s_op->val_a[j].buffer_sz = s_op->metasidcnt + 1;

        buffer_location += s_op->metasidcnt + 1;
    }

    gossip_debug(
                GOSSIP_READDIR_DEBUG, " - iterating keyvals: [%s,%d], "
                "\n\ttoken=%llu, count=%d\n",
                PVFS_OID_str(&s_op->u.readdir.dirent_handle),
                s_op->req->u.readdir.fs_id,
                llu(s_op->req->u.readdir.token),
                s_op->req->u.readdir.dirent_count);

    ret = job_trove_keyval_iterate(
                s_op->req->u.readdir.fs_id,
                s_op->u.readdir.dirent_handle,
                s_op->req->u.readdir.token,
                s_op->key_a,
                s_op->val_a,
                s_op->req->u.readdir.dirent_count, 
                TROVE_KEYVAL_DIRECTORY_ENTRY, 
                NULL,
                smcb,
                0,
                js_p,
                &j_id,
                server_job_context,
                s_op->req->hints);
        
    return ret;
}

static PINT_sm_action readdir_setup_resp(struct PINT_smcb *smcb,
                                         job_status_s *js_p)
{
    int j, k;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_perf_timer_end(PINT_server_tpc, PINT_PERF_TREADDIR, &s_op->start_time);
    if (js_p->error_code == STATE_ENOTDIR)
    {
	gossip_debug(GOSSIP_READDIR_DEBUG,
		     "  handle didn't refer to a directory\n");

	js_p->error_code = -PVFS_EINVAL;
	return SM_ACTION_COMPLETE;
    }

    if(js_p->error_code != 0)
    {
        PVFS_perror_gossip("readdir_setup_resp failed: ", js_p->error_code);
        return SM_ACTION_COMPLETE;
    }

/* V3 move to func decl */

    /* Iterates over entries retrieved from database and copies them
     * to appropriate locations in response struct
     */
    for (j = 0; j < s_op->req->u.readdir.dirent_count; j++)
    {
        /* Get the handle from the appropriate entry in the keyval
         * temporary place holder */
        s_op->resp.u.readdir.dirent_array[j].handle = 
                s_op->u.readdir.keyval_db_entries[j * (s_op->metasidcnt + 1)].oid;

        /* Copy SIDs from appropriate index in keval temporary store into
            response buffer */
        for(k = 0; k < s_op->metasidcnt; k++){
            s_op->resp.u.readdir.sid_array[(j * s_op->metasidcnt) + k] =
                s_op->u.readdir.keyval_db_entries[j * (s_op->metasidcnt + 1) + 1 + k].sid;
        }
        
    }

    s_op->resp.u.readdir.directory_version =
                    s_op->u.readdir.directory_version;

    s_op->resp.u.readdir.dirent_count = js_p->count;
    s_op->resp.u.readdir.sid_count = s_op->metasidcnt;

    /*
     * Although, this is not as important to get ls
     * to work through the VFS readdir, it is important
     * to fill this and send it back because the system
     * interface users could break because of this...
     */
    s_op->resp.u.readdir.token = js_p->position;
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action readdir_cleanup(struct PINT_smcb *smcb,
                                      job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if (s_op->key_a)
    {
        free(s_op->key_a);
        s_op->key_a = NULL;
        s_op->val_a = NULL;
        s_op->resp.u.readdir.dirent_array = NULL;
    }
    if(s_op->u.readdir.keyval_db_entries)
    {
        free(s_op->u.readdir.keyval_db_entries);
    }
    return(server_state_machine_complete(smcb));
}

static int perm_readdir(PINT_server_op *s_op)
{
    int ret;

    if (s_op->req->capability.op_mask & PINT_CAP_READ)
    {
        ret = 0;
    }
    else
    {
        ret = -PVFS_EACCES;
    }

    return ret;
}

PINT_GET_OBJECT_REF_DEFINE(readdir);

struct PINT_server_req_params pvfs2_readdir_params =
{
    .string_name = "readdir",
    .perm = perm_readdir,
    .get_object_ref = PINT_get_object_ref_readdir,
    .state_machine = &pvfs2_readdir_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
