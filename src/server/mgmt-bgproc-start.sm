/*
 * Copyright 2014 Omnibond Systems, L.L.C.
 *
 * See COPYING in top-level directory.
 */

#include "pvfs2-server.h"
#include "pvfs2-internal.h"

#include "bgproc-pipe.h"

#include <assert.h>
#include <unistd.h>

%%

machine pvfs2_mgmt_bgproc_start_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        default => do_work;
    }
    state do_work
    {
        run mgmt_bgproc_start_do_work;
        default => final_response;
    }
    state final_response
    {
        jump pvfs2_final_response_sm;
        default => terminate;
    }
}

%%

static PINT_sm_action mgmt_bgproc_start_do_work(struct PINT_smcb *smcb,
                                                job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    long r;

    r = bgproc_start(s_op->req->u.mgmt_bgproc_start.name);
    if (r == -1)
        goto fail;

    s_op->resp.u.mgmt_bgproc_start.status = 1;
    s_op->resp.u.mgmt_bgproc_start.id = r;

    return SM_ACTION_COMPLETE;
fail:
    s_op->resp.u.mgmt_bgproc_start.status = 0;
    return SM_ACTION_COMPLETE;
}

struct PINT_server_req_params pvfs2_mgmt_bgproc_start_params =
{
    .string_name = "mgmt_bgproc_start",
    .state_machine = &pvfs2_mgmt_bgproc_start_sm
};
