/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include "pvfs2-server.h"

static int iterate_handles_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int iterate_handles_do_work(PINT_server_op *s_op, job_status_s* js_p);
static int iterate_handles_fill_resp(PINT_server_op *s_op, job_status_s* js_p);

%%

machine pvfs2_iterate_handles_sm(prelude, do_work, fill_resp, final_response, cleanup)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		default => do_work;
	}

	state do_work
	{
		run iterate_handles_do_work;
		default => fill_resp;
	}

	state fill_resp
	{
		run iterate_handles_fill_resp;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run iterate_handles_cleanup;
		default => prelude;
	}
}

%%

/* iterate_handles_cleanup()
 *
 * cleans up any resources consumed by this state machine and ends
 * execution of the machine
 */
static int iterate_handles_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("cleanup");

    if(s_op->resp.u.mgmt_iterate_handles.handle_array)
	free(s_op->resp.u.mgmt_iterate_handles.handle_array);

    return(server_state_machine_complete(s_op));
}


/* iterate_handles_do_work()
 *
 * actually performs work necessary to retrieve handles
 */
static int iterate_handles_do_work(PINT_server_op *s_op, job_status_s* js_p)
{
    job_id_t tmp_id;

    PINT_STATE_DEBUG("do_work");

    /* allocate memory to hold handles */
    s_op->resp.u.mgmt_iterate_handles.handle_array
	= (PVFS_handle*)malloc(s_op->req->u.mgmt_iterate_handles.handle_count *
	sizeof(PVFS_handle));
    if(!s_op->resp.u.mgmt_iterate_handles.handle_array)
    {
	js_p->error_code = -PVFS_ENOMEM;
	return(1);
    }
    
    s_op->resp.u.mgmt_iterate_handles.position
	= s_op->req->u.mgmt_iterate_handles.position;

    return(job_trove_dspace_iterate_handles(
	s_op->req->u.mgmt_iterate_handles.fs_id,
	s_op->resp.u.mgmt_iterate_handles.position,
	s_op->resp.u.mgmt_iterate_handles.handle_array,
	s_op->req->u.mgmt_iterate_handles.handle_count,
	0,
	NULL,
	s_op,
	0,
	js_p,
	&tmp_id,
	server_job_context));
}

/* iterate_handles_fill_resp()
 *
 * gathers results from job status for response
 */
static int iterate_handles_fill_resp(PINT_server_op *s_op, job_status_s* js_p)
{
    if(js_p->error_code != 0)
    {
	/* propigate error and let final_response handle it */
	return(1);
    }

    s_op->resp.u.mgmt_iterate_handles.handle_count = js_p->count;
    s_op->resp.u.mgmt_iterate_handles.position = js_p->position;

    return(1);
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */

