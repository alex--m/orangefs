/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include "server-config.h"
#include "pvfs2-server.h"

static int truncate_resize(PINT_server_op *s_op, job_status_s * js_p);
static int truncate_check_error(PINT_server_op *s_op, job_status_s *js_p);
static int truncate_cleanup(PINT_server_op *s_op, job_status_s *js_p);

/* pretty simple, really:  the client is doing all our computations for us. 
 * post a job asking trove to resize the bstream
 * it's called truncate, but it can make files bigger or smaller.
 * TODO: what if (somehow) we are fed a metafile?  
 * TODO: what other types of bogus data could we be asked to resize?
 */
%%

machine pvfs2_truncate_sm(prelude, 
		    resize,
		    check_error,
		    final_response, 
		    cleanup)
{
    state prelude
    {
	jump pvfs2_prelude_sm;
	success => resize;
	default => final_response;
    }
    
    state resize
    {
	run truncate_resize;
	default => check_error;
    }

    state check_error
    {
	run truncate_check_error;
	default => final_response;
    }
	
    state final_response
    {
	jump pvfs2_final_response_sm;
	default => cleanup;
    }
    
    state cleanup
    {
	run truncate_cleanup;
	default => terminate;
    }
}

%%

/*
 * truncate_resize:  send a bstream_resize request.  
 */
static int truncate_resize(PINT_server_op *s_op, job_status_s * js_p)
{
    int ret;
    job_id_t i;

    PINT_STATE_DEBUG("resize");

    ret = job_trove_bstream_resize(s_op->req->u.truncate.fs_id,
	    s_op->req->u.truncate.handle,
	    s_op->req->u.truncate.size,
	    s_op->req->u.truncate.flags,
	    NULL,
	    s_op,
	    0,
	    js_p,
	    &i,
	    server_job_context);
    return(ret);
}

/* truncate_check_error
 *  any error is a bad error, so just pass it on up.
 */
static int truncate_check_error(PINT_server_op *s_op, job_status_s *js_p)
{
    PINT_STATE_DEBUG("check_error");
    return (1);
}
/* cleanup
 */
static int truncate_cleanup(PINT_server_op *s_op, job_status_s *js_p)
{
    PINT_STATE_DEBUG("cleanup");

    return (server_state_machine_complete(s_op));
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

