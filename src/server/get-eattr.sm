/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/* pvfs2_get_eattr_sm
 *
 * This state machine handles incoming server geteattr operations.  These
 * are the operations sent by PVFS_sys_geteattr() among others.
 *
 * The pvfs2_prelude_sm is responsible for reading the actual metadata
 * to begin with, because it does this as part of the permission checking
 * process.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-types.h"
#include "pvfs2-util.h"
#include "pint-util.h"
#include "pint-eattr.h"

enum
{
    ACTIVE_DONE = 4,
    ACTIVE_FETCH_AND_ADD,
    ACTIVE_FETCH_AND_SUBTRACT,
    ACTIVE_COMPARE_AND_SWAP
};

%%

machine pvfs2_get_eattr_sm
{
    state setup
    {
        run geteattr_setup;
        PINT_EATTR_ACTIVE => active_setup;
        success => prelude;
        default => final_response;
    }

    state active_setup
    {
        run geteattr_active_setup;
        success => active_reqsched;
        default => final_response;
    }

    state active_reqsched
    {
        run geteattr_active_reqsched;
        success => next_active;
        default => final_response;
    }

    state next_active
    {
        run geteattr_next_active;
        ACTIVE_DONE => active_release;
        ACTIVE_FETCH_AND_ADD => active_faa;
        ACTIVE_FETCH_AND_SUBTRACT => active_fas;
        ACTIVE_COMPARE_AND_SWAP => active_cas;
        default => final_response;
    }

    state active_release
    {
        run geteattr_active_release;
        success => check_resp;
        default => final_response;
    }

    state active_faa
    {
        run geteattr_active_fetch;
        success => active_add;
        default => final_response;
    }

    state active_add
    {
        run geteattr_active_add;
        success => next_active;
        default => final_response;
    }

    state active_fas
    {
        run geteattr_active_fetch;
        success => active_subtract;
        default => final_response;
    }

    state active_subtract
    {
        run geteattr_active_subtract;
        success => next_active;
        default => final_response;
    }

    state active_cas
    {
        run geteattr_active_fetch;
        success => active_compare_and_swap;
        default => final_response;
    }

    state active_compare_and_swap
    {
        run geteattr_active_compare_and_swap;
        success => next_active;
        default => final_response;
    }

    state prelude
    {
        jump pvfs2_prelude_sm;
        success => read_eattrib;
        default => final_response;
    }

    state read_eattrib
    {
        run geteattr_read_eattrib;
        default => check_resp;
    }

    state check_resp
    {
        run geteattr_check_resp;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run geteattr_cleanup;
        default => terminate;
    }
}

%%

/*
 * geteattr_active_setup()
 * Handle active attributes
 */
static PINT_sm_action geteattr_active_setup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    int i, tsz;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    js_p->error_code = 0;

    /* TODO: check perms! */

    s_op->resp.u.geteattr.val =
        malloc(s_op->req->u.geteattr.nkey*sizeof(PVFS_ds_keyval));
    if (!s_op->resp.u.geteattr.val)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    s_op->resp.u.geteattr.err =
        malloc(s_op->req->u.geteattr.nkey*sizeof(PVFS_error));
    if (!s_op->resp.u.geteattr.err)
    {
        free(s_op->resp.u.geteattr.val);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    s_op->resp.u.geteattr.nkey = s_op->req->u.geteattr.nkey;
    for (i = 0, tsz = 0; i < s_op->req->u.geteattr.nkey; i++)
    {
        s_op->resp.u.geteattr.val[i].buffer = malloc(
            s_op->req->u.geteattr.valsz[i]);
        if (!s_op->resp.u.geteattr.val[i].buffer)
        {
            for(--i; i >= 0; --i)
            {
                free(s_op->resp.u.geteattr.val[i].buffer);
            }
            s_op->resp.u.geteattr.nkey = 0;
            free (s_op->resp.u.geteattr.val);
            free (s_op->resp.u.geteattr.err);
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        s_op->resp.u.geteattr.val[i].buffer_sz = s_op->req->u.geteattr.valsz[i];
        s_op->resp.u.geteattr.err[i] = 0;
    }

    s_op->u.eattr.active.index = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action geteattr_active_reqsched(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    js_p->error_code = 0;

    return job_req_sched_post(s_op->op,
                              s_op->req->u.geteattr.fs_id,
                              s_op->req->u.geteattr.handle,
                              PINT_SERVER_REQ_MODIFY,
                              PINT_SERVER_REQ_SCHEDULE,
                              smcb, 0, js_p,
                              &(s_op->scheduled_id), server_job_context);
}

static PINT_sm_action geteattr_active_release(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    job_id_t tmp_id;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    js_p->error_code = 0;

    return job_req_sched_release(s_op->scheduled_id,
                                 smcb, 0, js_p, &tmp_id, server_job_context);
}

#define FAA "active.faa("
#define FAS "active.fas("
#define CAS "active.cas("

static PINT_sm_action geteattr_next_active(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    char *key, *c, *xattr_key, *l, *valstr;
    int len, xattr_keylen, valstr_len;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    js_p->error_code = 0;

    if(s_op->u.eattr.active.index == s_op->req->u.geteattr.nkey)
    {
        js_p->error_code = ACTIVE_DONE;
        return SM_ACTION_COMPLETE;
    }

    key = s_op->req->u.geteattr.key[s_op->u.eattr.active.index].buffer;
    len = s_op->req->u.geteattr.key[s_op->u.eattr.active.index].buffer_sz;

    if(!strncmp(key, FAA, strlen(FAA)))
    {
        key += strlen(FAA);
        len -= strlen(FAA);
        key[len] = '\0';
        c = index(key, ',');
        xattr_keylen = c - key;
        len -= xattr_keylen;
        xattr_key = malloc(xattr_keylen + 1);
        if(!xattr_key)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        strncpy(xattr_key, key, xattr_keylen);
        xattr_key[xattr_keylen] = '\0';
        xattr_keylen++;

        l = rindex(xattr_key, ' ');
        while(l)
        {
            *l = '\0';
            xattr_keylen--;
            l = rindex(xattr_key, ' ');
        }
        key = c+1;
        l = index(key, ' ');
        while(l)
        {
            key++;
            len--;
            l = index(l+1, ' ');
        }
        key[len] = '\0';
        c = index(key, ')');
        l = rindex(key, ' ');
        while(l)
        {
            *l = '\0';
            c--;
            l = rindex(key, ' ');
        }
        valstr_len = c - key;
        valstr = malloc(valstr_len + 1);
        if(!valstr)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        strncpy(valstr, key, valstr_len);
        valstr[valstr_len] = '\0';
        sscanf(valstr, "%d", &s_op->u.eattr.active.value.add);
        js_p->error_code = ACTIVE_FETCH_AND_ADD;
    }
    else if(!strncmp(key, FAS, strlen(FAS)))
    {
        key += strlen(FAS);
        len -= strlen(FAS);
        c = index(key, ',');
        xattr_keylen = c - key;
        len -= xattr_keylen;
        xattr_key = malloc(xattr_keylen + 1);
        if(!xattr_key)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        strncpy(xattr_key, key, xattr_keylen);
        xattr_key[xattr_keylen] = '\0';
        xattr_keylen++;

        l = rindex(xattr_key, ' ');
        while(l)
        {
            *l = '\0';
            xattr_keylen--;
            l = rindex(xattr_key, ' ');
        }
        key = c+1;
        l = index(key, ' ');
        while(l)
        {
            key++;
            len--;
            l = index(l+1, ' ');
        }
        c = index(key, ')');
        l = rindex(key, ' ');
        while(l)
        {
            *l = '\0';
            c--;
            l = rindex(key, ' ');
        }
        valstr_len = c - key;
        valstr = malloc(valstr_len + 1);
        if(!valstr)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        strncpy(valstr, key, valstr_len);
        valstr[valstr_len] = '\0';
        sscanf(valstr, "%d", &s_op->u.eattr.active.value.subtract);

        js_p->error_code = ACTIVE_FETCH_AND_SUBTRACT;
    }
    else if(!strncmp(key, CAS, strlen(CAS)))
    {
        key += strlen(CAS);
        len -= strlen(CAS);
        c = index(key, ',');
        xattr_keylen = c - key;
        len -= xattr_keylen;
        xattr_key = malloc(xattr_keylen + 1);
        if(!xattr_key)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        strncpy(xattr_key, key, xattr_keylen);
        xattr_key[xattr_keylen] = '\0';
        xattr_keylen++;

        l = rindex(xattr_key, ' ');
        while(l)
        {
            *l = '\0';
            xattr_keylen--;
            l = rindex(xattr_key, ' ');
        }
        key = c+1;
        l = index(key, ' ');
        while(l)
        {
            key++;
            len--;
            l = index(l+1, ' ');
        }

        c = index(key, ',');
        len -= (int)(c - key);

        l = rindex(c, ' ');
        while(l)
        {
            *l = '\0';
            l = rindex(c, ' ');
        }
        sscanf(key, "%d", &s_op->u.eattr.active.value.compare);

        key = c+1;
        l = index(key, ' ');
        while(l)
        {
            key++;
            len--;
            l = index(l+1, ' ');
        }

        c = index(key, ')');
        l = rindex(key, ' ');
        while(l)
        {
            *l = '\0';
            c--;
            l = rindex(key, ' ');
        }
        valstr_len = c - key;
        sscanf(key, "%d", &s_op->u.eattr.active.value.swap);
        js_p->error_code = ACTIVE_COMPARE_AND_SWAP;
    }

    s_op->u.eattr.active.xattr_key.buffer = xattr_key;
    s_op->u.eattr.active.xattr_key.buffer_sz = xattr_keylen;

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action geteattr_active_fetch(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    job_id_t jid;
    int ret;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    js_p->error_code = 0;
    ret = job_trove_keyval_read(
        s_op->req->u.geteattr.fs_id,
        s_op->req->u.geteattr.handle,
        &s_op->u.eattr.active.xattr_key,
        &s_op->resp.u.geteattr.val[s_op->u.eattr.active.index],
        0,
        NULL,
        smcb,
        0,
        js_p,
        &jid,
        server_job_context,
        s_op->req->hints);

    return ret;
}

static PINT_sm_action geteattr_active_add(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    int ret;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    js_p->error_code = 0;
    int value;
    job_id_t jid;

    value = *(int *)s_op->resp.u.geteattr.val[s_op->u.eattr.active.index].buffer;

    s_op->u.eattr.active.xattr_value.buffer = malloc(sizeof(int));
    s_op->u.eattr.active.xattr_value.buffer_sz = sizeof(int);
    *(int *)(s_op->u.eattr.active.xattr_value.buffer) = value + s_op->u.eattr.active.value.add;

    s_op->u.eattr.active.index++;
    ret = job_trove_keyval_write(
        s_op->req->u.geteattr.fs_id,
        s_op->req->u.geteattr.handle,
        &s_op->u.eattr.active.xattr_key,
        &s_op->u.eattr.active.xattr_value,
        0,
        NULL,
        smcb,
        0,
        js_p,
        &jid,
        server_job_context,
        s_op->req->hints);
    return ret;
}


static PINT_sm_action geteattr_active_subtract(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int value, ret;
    job_id_t jid;
    js_p->error_code = 0;

    value = *(int *)s_op->resp.u.geteattr.val[s_op->u.eattr.active.index].buffer;

    s_op->u.eattr.active.xattr_value.buffer = malloc(sizeof(int));
    s_op->u.eattr.active.xattr_value.buffer_sz = sizeof(int);
    *(int *)(s_op->u.eattr.active.xattr_value.buffer) = value - s_op->u.eattr.active.value.subtract;

    s_op->u.eattr.active.index++;
    ret = job_trove_keyval_write(
        s_op->req->u.geteattr.fs_id,
        s_op->req->u.geteattr.handle,
        &s_op->u.eattr.active.xattr_key,
        &s_op->u.eattr.active.xattr_value,
        0,
        NULL,
        smcb,
        0,
        js_p,
        &jid,
        server_job_context,
        s_op->req->hints);
    return ret;
}

static PINT_sm_action geteattr_active_compare_and_swap(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int value;
    int ret;
    job_id_t jid;
    js_p->error_code = 0;

    value = *(int *)s_op->resp.u.geteattr.val[s_op->u.eattr.active.index].buffer;
    assert(s_op->resp.u.geteattr.val[s_op->u.eattr.active.index].read_sz == sizeof(int));

    s_op->u.eattr.active.index++;
    if(s_op->u.eattr.active.value.compare != value)
    {
        /* comparison failed */
        return SM_ACTION_COMPLETE;
    }
    else
    {
        s_op->u.eattr.active.xattr_value.buffer = malloc(sizeof(int));
        s_op->u.eattr.active.xattr_value.buffer_sz = sizeof(int);
        *(int *)(s_op->u.eattr.active.xattr_value.buffer) = s_op->u.eattr.active.value.swap;

        /* comparison succeeded!  swap! */
        ret = job_trove_keyval_write(
            s_op->req->u.geteattr.fs_id,
            s_op->req->u.geteattr.handle,
            &s_op->u.eattr.active.xattr_key,
            &s_op->u.eattr.active.xattr_value,
            0,
            NULL,
            smcb,
            0,
            js_p,
            &jid,
            server_job_context,
            s_op->req->hints);
        return ret;
    }
}

/*
 * geteattr_setup()
 * Set up the response - allocate needed resources
 */
static PINT_sm_action geteattr_setup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i, tsz;

    gossip_debug(GOSSIP_GETEATTR_DEBUG,"geteattr requesting %d keys\n",
            s_op->req->u.geteattr.nkey);

    js_p->error_code = 0;

    /* iterate through the keys and see if they fall into valid name spaces */
    for(i=0; i<s_op->req->u.geteattr.nkey; i++)
    {
        gossip_debug(GOSSIP_GETEATTR_DEBUG, "geteattr key %d : %s\n", i, 
                (char *) s_op->req->u.geteattr.key[i].buffer);

        js_p->error_code = PINT_eattr_check_access(
            &s_op->req->u.geteattr.key[i],
            NULL);
        if(js_p->error_code != 0)
        {
            /* not prefixed: treat this as if the key does not exist */
            return SM_ACTION_COMPLETE;
        }
    }

    s_op->resp.u.geteattr.val =
        malloc(s_op->req->u.geteattr.nkey*sizeof(PVFS_ds_keyval));
    if (!s_op->resp.u.geteattr.val)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    s_op->resp.u.geteattr.err =
        malloc(s_op->req->u.geteattr.nkey*sizeof(PVFS_error));
    if (!s_op->resp.u.geteattr.err)
    {
        free(s_op->resp.u.geteattr.val);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    s_op->resp.u.geteattr.nkey = s_op->req->u.geteattr.nkey;
    for (i = 0, tsz = 0; i < s_op->req->u.geteattr.nkey; i++)
    {
        s_op->resp.u.geteattr.val[i].buffer = malloc(
            s_op->req->u.geteattr.valsz[i]);
        if (!s_op->resp.u.geteattr.val[i].buffer)
        {
            for(--i; i >= 0; --i)
            {
                free(s_op->resp.u.geteattr.val[i].buffer);
            }
            s_op->resp.u.geteattr.nkey = 0;
            free (s_op->resp.u.geteattr.val);
            free (s_op->resp.u.geteattr.err);
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        s_op->resp.u.geteattr.val[i].buffer_sz = s_op->req->u.geteattr.valsz[i];
    }

    return SM_ACTION_COMPLETE;
}

/*
 * geteattr_read_eattrib()
 * Here is where the eattrib get read.  Not much to this.
 */
static PINT_sm_action geteattr_read_eattrib(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t i;

    js_p->error_code = 0;

    ret = job_trove_keyval_read_list(
        s_op->req->u.geteattr.fs_id,
        s_op->req->u.geteattr.handle,
        s_op->req->u.geteattr.key,
        s_op->resp.u.geteattr.val,
        s_op->resp.u.geteattr.err,
        s_op->req->u.geteattr.nkey,
        0,
        NULL,
        smcb,
        0,
        js_p,
        &i,
        server_job_context, s_op->req->hints);

    return ret;
}

/*
 * geteattr_check_resp()
 * Check the response - handle any errors
 */
static PINT_sm_action geteattr_check_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    int ret;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int k;

    if(js_p->error_code == ACTIVE_DONE)
    {
        js_p->error_code = 0;
    }

    gossip_debug(GOSSIP_GETEATTR_DEBUG,"geteattr returning %d values\n",
            s_op->resp.u.geteattr.nkey);
    /* put the returned read buffer size in buffer_sz */
    gossip_debug(GOSSIP_GETEATTR_DEBUG,"status %d error_code %d nkeys %d\n",
            s_op->resp.status, js_p->error_code, s_op->resp.u.geteattr.nkey);
    /* it is the only thing returned across the wire */
    for (k = 0; k < s_op->resp.u.geteattr.nkey; k++)
    {
        if (js_p->error_code == 0)
        {
            ret = PINT_eattr_encode(
                &s_op->req->u.geteattr.key[k],
                &s_op->resp.u.geteattr.val[k]);
            if(ret != 0)
            {
                gossip_err("%s: failed encoding extended attribute: %s\n",
                           __func__, (char *)s_op->req->u.geteattr.key[k].buffer);
                s_op->resp.u.geteattr.err[k] = ret;
            }

            s_op->resp.u.geteattr.val[k].buffer_sz =
                s_op->resp.u.geteattr.val[k].read_sz;
            gossip_debug(GOSSIP_GETEATTR_DEBUG, "key %s, read_sz = %d\n",
                (char *) s_op->req->u.geteattr.key[k].buffer, 
                s_op->resp.u.geteattr.val[k].buffer_sz);
        }
        /* in case of any errors, we initialize it to 0 */
        else {
            s_op->resp.u.geteattr.val[k].buffer_sz = 0;
        }
    }
    return SM_ACTION_COMPLETE;
}

/* geteattr_cleanup()
 * free resources alloc'd by state machine
 */
static PINT_sm_action geteattr_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    int i = 0;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    for(; i < s_op->resp.u.geteattr.nkey; ++i)
    {
        free(s_op->resp.u.geteattr.val[i].buffer);
    }
    if (s_op->resp.u.geteattr.val)
        free(s_op->resp.u.geteattr.val);
    if (s_op->resp.u.geteattr.err)
        free(s_op->resp.u.geteattr.err);
    return(server_state_machine_complete(smcb));
}

PINT_GET_OBJECT_REF_DEFINE(geteattr);

struct PINT_server_req_params pvfs2_get_eattr_params =
{
    .string_name = "get_eattr",
    .perm = PINT_SERVER_CHECK_ATTR,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .get_object_ref = PINT_get_object_ref_geteattr,
    .state_machine = &pvfs2_get_eattr_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

