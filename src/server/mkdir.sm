/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */


#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"

static int mkdir_create(PINT_server_op *s_op, job_status_s* js_p);
static int mkdir_setattrib(PINT_server_op *s_op, job_status_s* js_p);
static int mkdir_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int mkdir_error(PINT_server_op *s_op, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];

%%

machine pvfs2_mkdir_sm(prelude,
		       create,
		       set_attrib,
		       final_response,
		       err_msg,
		       cleanup)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		success => create;
		default => final_response;
	}

	state create
	{
		run mkdir_create;
		success => set_attrib;
		default => err_msg;
	}

	state set_attrib
	{
		run mkdir_setattrib;
		success => final_response;
		default => err_msg;
	}
	
	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state err_msg 
	{
	    run mkdir_error;
	    default => final_response;
	}

	state cleanup
	{
		run mkdir_cleanup;
		default => prelude;
	}
}

%%

/*
 * Function: mkdir_create
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: 
 *
 * NOTE: returned handle will pop out in js_p->handle (the job status struct).
 */
static int mkdir_create(PINT_server_op *s_op, job_status_s* js_p)
{

    int ret;
    job_id_t i;

    gossip_debug(SERVER_DEBUG, "mkdir state: create\n");

    ret = job_trove_dspace_create(s_op->req->u.mkdir.fs_id,
	    &s_op->req->u.mkdir.handle_extent_array,
	    PVFS_TYPE_DIRECTORY,
	    NULL,
	    s_op,
	    0,
	    js_p,
	    &i,
	    server_job_context);

    return(ret);
}


/*
 * Function: mkdir_setattrib
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: 
 *           
 */
static int mkdir_setattrib(PINT_server_op *s_op, job_status_s* js_p)
{
    PVFS_object_attr *a_p;
    int ret;
    job_id_t i;

    PINT_STATE_DEBUG("setattrib");

    /* save the handle from the create in the response */
    s_op->resp.u.mkdir.handle = js_p->handle;

    s_op->key.buffer    = Trove_Common_Keys[METADATA_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METADATA_KEY].size;

    s_op->val.buffer    = &(s_op->req->u.mkdir.attr);
    s_op->val.buffer_sz = sizeof(PVFS_object_attr);

    a_p = &(s_op->req->u.mkdir.attr);
    gossip_debug(SERVER_DEBUG,
		 "  attrs to write = (owner = %d, group = %d, perms = %o, type = %d)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype);

    gossip_debug(SERVER_DEBUG,
		 "  writing attributes (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.mkdir.fs_id,
		 s_op->resp.u.mkdir.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_write(s_op->req->u.mkdir.fs_id,
					  s_op->resp.u.mkdir.handle,
					  &(s_op->key),
					  &(s_op->val),
					  TROVE_SYNC,
					  NULL,
					  s_op,
					  0,
					  js_p,
					  &i,
					  server_job_context);

    return(ret);
}


/*
 * Function: mkdir_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static int mkdir_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("cleanup");

    return(server_state_machine_complete(s_op));
}

/* TODO: fix comment block */
static int mkdir_error(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("error");
    s_op->resp.u.mkdir.handle = 0;
    js_p->error_code = -1;
    return(1);
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */

