/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */


#include <string.h>
#include <assert.h>

#include "pvfs2-config.h"
#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-util.h"
#include "pvfs2-internal.h"
#include "pint-util.h"
#include "pint-security.h"
#include "pint-cached-config.h"
#include "pvfs2-dist-basic.h"
#include "dist-dir-utils.h"
#include "pint-uid-map.h"
#include "sid.h"

static int tree_setattr_comp_fn(
        void *v_p,
        struct PVFS_server_resp *resp_p,
        int index);

%%

nested machine pvfs2_mkdir_work_sm
{
    state create
    {
        run mkdir_create;
        success => set_attrib;
        default => err_msg;
    }

    state set_attrib
    {
        run mkdir_setattrib;
        success => create_dirdata;
        default => err_msg;
    }

    state create_dirdata
    {
        run mkdir_create_dirdata;
        success => write_keyval_to_meta_handle;
        default => err_msg;
    }

/*
    state remote_dirdata_attr_and_keyval_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => write_keyval_to_meta_handle;
        default => err_msg;
    }
*/

    state write_keyval_to_meta_handle
    {
        run mkdir_write_keyval_to_meta_handle;
        success => return;
        default => err_msg;
    }
    state err_msg 
    {
        run mkdir_error;
        default => return;
    }
}

machine pvfs2_mkdir_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => prep_sm;
        default => final_response;
    }

    state prep_sm
    {
        run mkdir_prep_sm;
        default => work;
    }

    state work
    {
        jump pvfs2_mkdir_work_sm;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mkdir_cleanup;
        default => terminate;
    }
}

%%

/*
 * Function: mkdir_create
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: 
 *
 */
static PINT_sm_action mkdir_create(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret;
    job_id_t i;

    gossip_debug(GOSSIP_MKDIR_DEBUG, " creating dspace on coll_id %d\n",
                 s_op->u.mkdir.fs_id);

    gossip_debug(GOSSIP_MKDIR_DEBUG, " directory handle will be %s\n",
                 PVFS_OID_str(&s_op->u.mkdir.handle));

    ret = job_trove_dspace_create(s_op->u.mkdir.fs_id,
                                  s_op->u.mkdir.handle,
                                  PVFS_TYPE_DIRECTORY,
                                  NULL,
                                  TROVE_SYNC,
                                  smcb,
                                  0,
                                  js_p,
                                  &i,
                                  server_job_context,
                                  s_op->req->hints);

    return ret;
}

/*
 * Function: mkdir_setattrib
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: Writes the ds_attr to the new directory dspace record
 *           
 */
static PINT_sm_action mkdir_setattrib(struct PINT_smcb *smcb,
                                      job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    PVFS_ds_attributes *ds_attr = NULL;

    ds_attr = (&s_op->ds_attr);
    PVFS_ds_init_time(ds_attr);

    gossip_debug(GOSSIP_MKDIR_DEBUG, " setting directory version to "
                 "%llu\n\tmtime is %llu\n", llu(ds_attr->mtime),
                 llu(PINT_util_mkversion_time(ds_attr->mtime)));

    ret = job_trove_dspace_setattr(s_op->u.mkdir.fs_id,
                                   s_op->u.mkdir.handle,
                                   ds_attr, 
                                   TROVE_SYNC,
                                   smcb,
                                   0,
                                   js_p,
                                   &j_id,
                                   server_job_context,
                                   s_op->req->hints);

    return ret;
}

/*
 * Function: mkdir_create_dirdata
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: Initialize dist_dir_struct in s_op->attr.u.dir and s_op->u.mkdir
 *           
 */
static PINT_sm_action mkdir_create_dirdata(struct PINT_smcb *smcb,
                                           job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr;
    int ret = -1;
    unsigned char *c;
    int i;
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_object_attr dirdata_attr;

    attr = (&s_op->attr);

    /* init meta handle dist_dir_struct */
    ret = PINT_init_dist_dir_state(&attr->u.dir.dist_dir_attr,
                                   &attr->u.dir.dist_dir_bitmap,
                                   s_op->req->u.mkdir.dirdata_count,
                                   s_op->req->u.mkdir.dirdata_sid_count,
                                   0,
                                   s_op->req->u.mkdir.dist_dir_servers_initial,
                                   s_op->req->u.mkdir.dist_dir_split_size);

    assert(ret == 0);

    gossip_debug(GOSSIP_MKDIR_DEBUG, 
            "mkdir: Init dist-dir-attr for dir meta handle %s "
            "with tree_height=%d, dirdata_count=%d, bitmap_size=%d, "
            "split_size=%d, server_no=%d and branch_level=%d\n",
            PVFS_OID_str(&s_op->u.mkdir.handle),
            attr->u.dir.dist_dir_attr.tree_height,
            attr->u.dir.dist_dir_attr.dirdata_count,
            attr->u.dir.dist_dir_attr.bitmap_size,
            s_op->req->u.mkdir.dist_dir_split_size,
            attr->u.dir.dist_dir_attr.server_no,
            attr->u.dir.dist_dir_attr.branch_level);

    /* gossip bitmap, may adjust later */
    gossip_debug(GOSSIP_MKDIR_DEBUG,
            "mkdir: Init dist_dir_bitmap as:\n");
    for(i = attr->u.dir.dist_dir_attr.bitmap_size - 1; i >= 0 ; i--)
    {
        c = (unsigned char *)(attr->u.dir.dist_dir_bitmap + i);
        gossip_debug(GOSSIP_MKDIR_DEBUG,
                " i=%d : %02x %02x %02x %02x\n",
                i, c[3], c[2], c[1], c[0]);
    }
    gossip_debug(GOSSIP_MKDIR_DEBUG, "\n");

    /* allocate dirdata handle space, similar to create.sm */
    attr->u.dir.dirdata_handles = malloc(
            sizeof(*attr->u.dir.dirdata_handles) *
            s_op->req->u.mkdir.dirdata_count);
    attr->u.dir.dirdata_sids = malloc(
            sizeof(*attr->u.dir.dirdata_sids) *
            s_op->req->u.mkdir.dirdata_sid_count);

    if (!attr->u.dir.dirdata_handles || !attr->u.dir.dirdata_sids)
    {
        if (attr->u.dir.dirdata_handles)
        {
            free(attr->u.dir.dirdata_handles);
        }
        if (attr->u.dir.dirdata_sids)
        {
            free(attr->u.dir.dirdata_sids);
        }
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* Copy OIDs and SIDs into the dist dir storage for these values. */
    memcpy(&attr->u.dir.dirdata_handles,
           s_op->req->u.mkdir.dirdata_handles,
           sizeof(*attr->u.dir.dirdata_handles) *
                  s_op->req->u.mkdir.dirdata_count);
    memcpy(&attr->u.dir.dirdata_sids,
           s_op->req->u.mkdir.dirdata_sid_array,
           sizeof(*attr->u.dir.dirdata_sids) *
                  s_op->req->u.mkdir.dirdata_sid_count);


    /* set dirdata attr, set all the static component */
    memcpy(&dirdata_attr, &s_op->req->u.mkdir.attr, sizeof(attr));
    dirdata_attr.objtype = PVFS_TYPE_DIRDATA;
    PINT_dist_dir_attr_copyto(dirdata_attr.u.dir.dist_dir_attr,
                              s_op->attr.u.dir.dist_dir_attr);
    /* V3 this should go in dirdata, not dir */
    dirdata_attr.u.dir.dirdata_handles = s_op->attr.u.dir.dirdata_handles;
    dirdata_attr.u.dir.dirdata_sids = s_op->attr.u.dir.dirdata_sids;
    dirdata_attr.u.dir.dist_dir_bitmap = s_op->attr.u.dir.dist_dir_bitmap;
    dirdata_attr.mask = PVFS_ATTR_COMMON_ALL;
    dirdata_attr.mask |= PVFS_ATTR_DISTDIR_ATTR;

    gossip_debug(
            GOSSIP_MKDIR_DEBUG,
            "  SENDING attrs: [owner = %d, group = %d\n\t"
            "perms = %o, type = %d, atime = %llu, mtime = %llu\n\t"
            "ctime = %llu ]\n",
            dirdata_attr.owner, dirdata_attr.group, dirdata_attr.perms,
            dirdata_attr.objtype, llu(dirdata_attr.atime),
            llu(PINT_util_mkversion_time(dirdata_attr.mtime)),
            llu(dirdata_attr.ctime));

    PINT_msgpair_init(&s_op->msgarray_op);
    msg_p = &s_op->msgarray_op.msgpair;
    PINT_serv_init_msgarray_params(s_op, s_op->u.mkdir.fs_id);

    PINT_SERVREQ_TREE_SETATTR_FILL(msg_p->req,
                                   s_op->req->capability,
                                   s_op->req->u.mkdir.credential,
                                   s_op->u.mkdir.fs_id,
                                   PVFS_TYPE_DIRDATA,
                                   dirdata_attr,
                                   0, /* caller_handle_index */
                                   s_op->attr.u.dir.dist_dir_attr.dirdata_count,
                                   s_op->attr.u.dir.dirdata_handles,
                                   s_op->attr.u.dir.dist_dir_attr.sid_count,
                                   s_op->attr.u.dir.dirdata_sids,
                                   NULL);

    /* save objects so they can be freed */
    s_op->u.mkdir.saved_attr = &msg_p->req.u.mkdir.attr;
    s_op->u.mkdir.saved_capability = &msg_p->req.capability;

    msg_p->fs_id = s_op->u.mkdir.fs_id;
    msg_p->handle = s_op->attr.u.dir.dirdata_handles[0];
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = tree_setattr_comp_fn;

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[0]);
    if (ret)
    {
        gossip_err("Failed to map dirdata server address\n");
        js_p->error_code = ret;
    }

    PINT_sm_push_frame(smcb, 0, &s_op->msgarray_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static int tree_setattr_comp_fn(void *v_p,
                                struct PVFS_server_resp *resp_p,
                                int index)
{
    PINT_smcb *smcb = v_p;
    PINT_sm_msgarray_op *mop = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PINT_sm_msgpair_state *msg_p = &mop->msgpair;;

    assert(msg_p->req.op == PVFS_SERV_TREE_SETATTR);
    PINT_free_object_attr(&(msg_p->req).u.tree_setattr.attr);
    return 0;
}

/* V3 SIDs will get added to the handles, possibly the bitmap too, and
 * the attr should be moved into the dspace record
 */
/** writes 3 keyvals for the new directory - the distdir attributes, the
 * bitmap, and the handles of the dirdata objects
 */
static PINT_sm_action mkdir_write_keyval_to_meta_handle(
                                            struct PINT_smcb *smcb,
                                            job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr;
    int ret = -1;
//    job_id_t j_id;

    /* total 3 keyvals,
     * PVFS_DIST_DIR_ATTR, PVFS_DIRDATA_BITMAP, PVFS_DIRDATA_HANDLES */
    int keyval_count = 3;

    /* free saved capability */
    PINT_cleanup_capability(s_op->u.mkdir.saved_capability);
    s_op->u.mkdir.saved_capability = NULL;

    /* !!!! this is to set meta handle keyval,
     * use dist_dir_attr in s_op->attr 
     */
    attr = &s_op->attr;

    s_op->key_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->key_a)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->val_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->val_a)
    {
        free(s_op->key_a);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    memset(s_op->val_a, 0, sizeof(PVFS_ds_keyval) * keyval_count);
//TODO: make sure this stuff is right
    s_op->key_a[0].buffer = Trove_Common_Keys[DIST_DIR_ATTR_KEY].key;
    s_op->key_a[0].buffer_sz = Trove_Common_Keys[DIST_DIR_ATTR_KEY].size;

    s_op->val_a[0].buffer = &attr->u.dir.dist_dir_attr;
    s_op->val_a[0].buffer_sz = sizeof(attr->u.dir.dist_dir_attr);

    s_op->key_a[1].buffer = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].key;
    s_op->key_a[1].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].size;

    s_op->val_a[1].buffer_sz = attr->u.dir.dist_dir_attr.bitmap_size * 
                               sizeof(PVFS_dist_dir_bitmap_basetype);
    s_op->val_a[1].buffer = attr->u.dir.dist_dir_bitmap;

    s_op->key_a[2].buffer = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].key;
    s_op->key_a[2].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].size;
//Make sure this attr fields get allocated contiguously
    s_op->val_a[2].buffer = attr->u.dir.dirdata_handles;
    s_op->val_a[2].buffer_sz = OSASZ(attr->u.dir.dist_dir_attr.dirdata_count,
                                     attr->u.dir.dist_dir_attr.sid_count);

#if 0
ECQ: Make it compile
    gossip_debug(GOSSIP_MKDIR_DEBUG, 
            "  writing dist-dir-struct keyvals for meta handle: %s "
            "\t with server_no=%d and branch_level=%d \n", 
            PVFS_OID_str(&s_op->resp.u.mkdir.handle),
            attr->u.dir.dist_dir_attr.server_no,
            attr->u.dir.dist_dir_attr.branch_level);


    ret = job_trove_keyval_write_list(
                                  s_op->req->u.mkdir.fs_id,
                                  s_op->resp.u.mkdir.handle, /* meta handle */
                                  s_op->key_a,
                                  s_op->val_a,
                                  keyval_count,
                                  TROVE_SYNC,
                                  NULL,
                                  smcb,
                                  0,
                                  js_p,
                                  &j_id,
                                  server_job_context,
                                  s_op->req->hints);

#endif
    return ret;
}

static int mkdir_error(struct PINT_smcb *smcb, job_status_s *js_p)
{
//    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
#if 0
ECQ: Make it compile
    s_op->resp.u.mkdir.handle = PVFS_HANDLE_NULL;
#endif

    if (js_p->error_code > -1)
    {
        js_p->error_code = -PVFS_EINVAL;
    }
    return 1;
}

/*
 * Function: mkdir_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static PINT_sm_action mkdir_cleanup(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    free(s_op->attr.u.dir.dirdata_handles);
    free(s_op->attr.u.dir.dist_dir_bitmap);
    free(s_op->key_a);
    free(s_op->val_a);
    free(s_op->error_a);
    if (s_op->msgarray_op.count > 0)
    {
        PINT_free_object_attr(&s_op->req->u.tree_setattr.attr);
    }
    return(server_state_machine_complete(smcb));
}

static PINT_sm_action mkdir_prep_sm(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *a_p = NULL;
    PVFS_ds_attributes *ds_attr = NULL;
    PVFS_uid uid;
    uint32_t num_groups;
    PVFS_gid group_array[PVFS_REQ_LIMIT_GROUPS];

    s_op->attr.u.dir.dirdata_handles = NULL;
    s_op->attr.u.dir.dist_dir_bitmap = NULL;
    s_op->key_a = NULL;
    s_op->val_a = NULL;
    s_op->error_a = NULL;

    s_op->u.mkdir.fs_id = s_op->req->u.mkdir.fs_id;
    s_op->u.mkdir.handle = s_op->req->u.mkdir.handle;

    a_p = &(s_op->req->u.mkdir.attr);

    if (a_p->objtype != PVFS_TYPE_DIRECTORY)
    {
        js_p->error_code = -PVFS_EINVAL;
        return SM_ACTION_COMPLETE;
    }

    /* map owner/group from credential */
    if (a_p->mask & (PVFS_ATTR_COMMON_UID|PVFS_ATTR_COMMON_GID) &&
        (a_p->owner == PVFS_UID_MAX || a_p->group == PVFS_GID_MAX))
    {
        int ret;

        ret  = PINT_map_credential(&s_op->req->u.mkdir.credential, 
                                   &uid, &num_groups, group_array);
        if (ret != 0)
        {
            js_p->error_code = ret;
            return SM_ACTION_COMPLETE;
        }

        if (a_p->mask & PVFS_ATTR_COMMON_UID &&
            a_p->owner == PVFS_UID_MAX)
        {
            a_p->owner = uid;
        }

        if (a_p->mask & PVFS_ATTR_COMMON_GID &&
            a_p->group == PVFS_GID_MAX)
        {
            a_p->group = group_array[0];
        }
    }


    gossip_debug(GOSSIP_MKDIR_DEBUG, " attrs to write: [owner = %d, "
                 "group = %d, perms = %o]\n", a_p->owner, a_p->group,
                 a_p->perms);

    /* translate attrs to storage attr format */
    ds_attr = (&s_op->ds_attr);
    PVFS_ds_attr_from_object_attr(ds_attr, a_p);

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static inline int PINT_get_object_ref_mkdir(struct PVFS_server_req *req,
                                            PVFS_fs_id *fs_id,
                                            PVFS_handle *handle)
{
    *fs_id = req->u.mkdir.fs_id;
    *handle = PVFS_HANDLE_NULL;
    return 0;
}

static int perm_mkdir(PINT_server_op *s_op)
{
    int ret;

    if (s_op->req->capability.op_mask & PINT_CAP_CREATE)
    {
        ret = 0;
    }
    else
    {
        ret = -PVFS_EACCES;
    }

    return ret;
}

PINT_GET_CREDENTIAL_DEFINE(mkdir);

struct PINT_server_req_params pvfs2_mkdir_params =
{
    .string_name = "mkdir",
    .get_object_ref = PINT_get_object_ref_mkdir,
    .perm = perm_mkdir,
    .access_type = PINT_server_req_modify,
    .get_credential = PINT_get_credential_mkdir,
    .state_machine = &pvfs2_mkdir_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
