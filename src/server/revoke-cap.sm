/* 
 * (C) 2014 Clemson University and Omnibond Systems, LLC
 *
 * See COPYING in top-level directory.
 *
 * Capability revocation state machine.
 *
 */

#include <string.h>

#include "pvfs2-config.h"

#include "pvfs2-server.h"
#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "pint-security.h"
#include "security-util.h"
#include "pint-util.h"
#include "pvfs2-internal.h"
#include "capcache.h"

%%

nested machine pvfs2_revoke_cap_work_sm
{
    state set_revocation
    {
        run revoke_cap_set_revocation;
        default => return;
    }
}

machine pvfs2_revoke_cap_sm
{
    state init
    {
        run revoke_cap_init;
        success => prelude;
        default => cleanup;
    }

    state prelude
    {
        jump pvfs2_prelude_sm;
        success => do_work;
        default => cleanup;
    }

    state do_work
    {
        jump pvfs2_revoke_cap_work_sm;
        default => cleanup;
    }

    state cleanup
    {
        run revoke_cap_cleanup;
        default => terminate;
    }
}

%%

static PINT_sm_action revoke_cap_init(struct PINT_smcb *smcb,
                                      job_status_s *js_p)
{
   /* return "not implemented" if revocation not enabled */
#ifdef ENABLE_REVOCATION
   js_p->error_code = 0;
#else
   js_p->error_code = -PVFS_ENOSYS;
#endif

   return SM_ACTION_COMPLETE;
}

/* revoke capability */
static PINT_sm_action revoke_cap_set_revocation(struct PINT_smcb *smcb,
                                                job_status_s *js_p)
{
#ifdef ENABLE_REVOCATION
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    const char *server = ""; /* TODO */

    js_p->error_code = PINT_capcache_revoke_cap(server,
        s_op->req->u.revoke_cap.cap_id);
#endif

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action revoke_cap_cleanup(struct PINT_smcb *smcb,
                                         job_status_s *js_p)
{
    return(server_state_machine_complete(smcb));
}

/* TODO */
static int perm_revoke_cap(PINT_server_op *s_op)
{
    return !(s_op->req->capability.op_mask & PINT_CAP_ADMIN);
}

struct PINT_server_req_params pvfs2_revoke_cap_params =
{
    .string_name = "revoke_cap",
    .perm = perm_revoke_cap,
    .access_type = PINT_server_req_modify,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .state_machine = &pvfs2_revoke_cap_sm
};
