/* 
 * (C) 2001 The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-internal.h"
#include "pint-util.h"
#include "pint-cached-config.h"

%%

machine pvfs2_create_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => create_metafile;
        default => final_response;
    }

    state create_metafile
    {
        run create_metafile;
        success => check_stuffed;
        default => final_response;
    }

    state check_stuffed
    {
        run check_stuffed;
        success => create_local_datafiles;
        default => final_response;
    }

    state create_local_datafiles
    {
        run create_local_datafiles;
        success => setup_local_datafile_handles;
        default => remove_metafile_object;
    }

    state setup_local_datafile_handles
    {
        run setup_local_datafile_handles;
        success => request_datafiles;
        default => remove_metafile_object;
    }

    state request_datafiles
    {
        run request_datafiles;
        success => write_keyvals;
        default => remove_metafile_object;
    }

    state write_keyvals
    {
        run write_keyvals;
        success => setobj_attribs;
        default => remove_datafile_handles;
    }

    state setobj_attribs
    {
        run setattr_setobj_attribs;
        success => setup_resp;
        default => remove_keyvals;
    }

    state setup_resp
    {
        run setup_resp;
        default => final_response;
    }

    state remove_datafile_handles
    {
        run remove_datafile_handles;
        success => remove_metafile_object;
        default => final_response;
    }

    state remove_metafile_object
    {
        run remove_metafile_object;
        default => final_response;
    }

    state remove_keyvals
    {
        run remove_keyvals;
        success => remove_datafile_handles;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run cleanup;
        default => terminate;
    }
}

%%

static int create_metafile(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t i;
    PVFS_handle_extent_array meta_handle_ext_array;
    server_configuration_s *config = get_server_config_struct();

    ret = PINT_cached_config_get_server(
        s_op->req->u.create.fs_id,
        config->host_id,
        PINT_SERVER_TYPE_META,
        &meta_handle_ext_array);

    ret = job_trove_dspace_create(
        s_op->req->u.create.fs_id,
        &meta_handle_ext_array,
        PVFS_TYPE_METAFILE,
        NULL,
        0,
        smcb,
        0,
        js_p,
        &i,
        server_job_context);

    return(ret);
}

static int check_stuffed(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int server_type;
    server_configuration_s *config = get_server_config_struct();
    struct filesystem_configuration_s *fs_conf;
    PVFS_BMI_addr_t myaddr;
    PVFS_sys_layout *layout;
    int ret;
    const char* svr_name;
    int i;

    s_op->resp.u.create.metafile_handle = js_p->handle;
    gossip_debug(
        GOSSIP_SERVER_DEBUG, "Metafile handle created: %llu\n",
        llu(js_p->handle));

    assert(config);

    layout = &s_op->req->u.create.layout;

    if(layout->algorithm == PVFS_SYS_LAYOUT_LIST)
    {
        for(i=0; i<layout->server_list.count; i++)
        {
            gossip_debug(GOSSIP_SERVER_DEBUG, "layout list server %d: %lld\n", 
                i, lld(layout->server_list.servers[i])); 
        }
    }

    fs_conf = PINT_config_find_fs_id(config, 
        s_op->req->u.create.fs_id);
    if(!fs_conf)
    {
        js_p->error_code = -PVFS_EINVAL;
        return(SM_ACTION_COMPLETE);
    }

    ret = BMI_addr_lookup(&myaddr, config->host_id);
    if(ret != 0)
    {
        /* we can't get our own address? */
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    /* is this metadata server also IO? */
    svr_name = PINT_cached_config_map_addr(s_op->req->u.create.fs_id,
                                myaddr, &server_type);
    if(!svr_name)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    if((server_type & PINT_SERVER_TYPE_IO) && fs_conf->file_stuffing && layout->algorithm == PVFS_SYS_LAYOUT_ROUND_ROBIN)
    {    
        /* we can do a stuffed create here, only one datafile */
        s_op->req->u.create.attr.u.meta.dfile_count = 1;
        s_op->resp.u.create.datafile_count = 1;
        s_op->resp.u.create.datafile_handles = malloc(sizeof(PVFS_handle));
        s_op->u.create.handle_array = malloc(sizeof(PVFS_handle));
        if(!s_op->resp.u.create.datafile_handles || !s_op->u.create.handle_array)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }

        s_op->resp.u.create.stuffed = 1;
        js_p->error_code = 0;
        return SM_ACTION_COMPLETE;
    }

    /* file will not be stuffed; need to allocate all datafiles */
    s_op->req->u.create.attr.u.meta.dfile_count
        = s_op->req->u.create.num_dfiles_req;
    s_op->resp.u.create.datafile_count 
        = s_op->req->u.create.num_dfiles_req;
    s_op->resp.u.create.datafile_handles = malloc(
        sizeof(*s_op->resp.u.create.datafile_handles) *
        s_op->resp.u.create.datafile_count);
    s_op->u.create.handle_array = malloc(
        sizeof(*s_op->u.create.handle_array) *
        s_op->resp.u.create.datafile_count);
    s_op->u.create.remote_io_servers = malloc(
        sizeof(char*) *
        s_op->resp.u.create.datafile_count);
    if(!s_op->resp.u.create.datafile_handles || 
        !s_op->u.create.handle_array ||
        !s_op->u.create.remote_io_servers)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* gather list of servers to use, may include local server */
    ret = PINT_cached_config_get_server_list(
        s_op->req->u.create.fs_id,
        s_op->req->u.create.attr.u.meta.dist,
        s_op->req->u.create.num_dfiles_req,
        &s_op->req->u.create.layout,
        &s_op->u.create.io_servers,
        &s_op->u.create.num_io_servers);
    if(ret < 0)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    for(i=0; i<s_op->u.create.num_io_servers; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, "io_server %d: %s\n", 
            i, s_op->u.create.io_servers[i]); 
    }

    s_op->resp.u.create.stuffed = 0;
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static int create_local_datafiles(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t tmp_id;
    PVFS_handle_extent_array data_handle_ext_array;
    server_configuration_s *config = get_server_config_struct();
    int i;
    int tmp_index = 0;

    if(s_op->resp.u.create.stuffed)
    {
        /* only one datafile, and it is local */
        s_op->u.create.handle_array_local_count = 1;
        s_op->u.create.handle_array_remote_count = 0;
    }
    else
    {
        /* figure out how many datafiles need to be local vs. remote */
        s_op->u.create.handle_array_local_count = 0;
        s_op->u.create.handle_array_remote_count = 0;
        for(i=0; i<s_op->u.create.num_io_servers; i++)
        {
            if(!strcmp(s_op->u.create.io_servers[i], config->host_id))
            {
                s_op->u.create.handle_array_local_count++;
            }
            else
            {
                s_op->u.create.handle_array_remote_count++;
                s_op->u.create.remote_io_servers[tmp_index] = 
                    s_op->u.create.io_servers[i];
                tmp_index++;
            }
        }
    }

    gossip_debug(GOSSIP_SERVER_DEBUG, "creating %d local data files\n", 
        s_op->u.create.handle_array_local_count);
    gossip_debug(GOSSIP_SERVER_DEBUG, "creating %d remote data files\n", 
        s_op->u.create.handle_array_remote_count);

    if(s_op->u.create.handle_array_local_count == 0)
    {
        /* no local work to do */
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }

    /* find local extent array */
    ret = PINT_cached_config_get_server(
        s_op->req->u.create.fs_id,
        config->host_id,
        PINT_SERVER_TYPE_IO,
        &data_handle_ext_array);
    if(ret < 0)
    {
        js_p->error_code = ret;
        return(SM_ACTION_COMPLETE);
    }

    /* deliberately not setting SYNC flag, because both the attrs and
     * keyvals will be synced in later states
     */
    ret = job_trove_dspace_create_list(
        s_op->req->u.create.fs_id,
        &data_handle_ext_array,
        s_op->u.create.handle_array,
        s_op->u.create.handle_array_local_count,
        PVFS_TYPE_DATAFILE,
        NULL,
        0,
        smcb,
        0,
        js_p,
        &tmp_id,
        server_job_context);

    return(ret);
}

static PINT_sm_action request_datafiles(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    if(s_op->u.create.handle_array_remote_count == 0)
    {
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }

    ret = job_precreate_pool_get_handles(
        s_op->req->u.create.fs_id,
        s_op->u.create.handle_array_remote_count,
        s_op->u.create.io_servers,
        s_op->u.create.handle_array,
        smcb,
        0,
        js_p,
        &j_id,
        server_job_context);
    return ret;
}

static PINT_sm_action remove_metafile_object(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    free(s_op->resp.u.create.datafile_handles);

    ret = job_trove_dspace_remove(
        s_op->req->u.create.fs_id,
        s_op->resp.u.create.metafile_handle,
        0,
        smcb,
        0,
        js_p,
        &j_id,
        server_job_context);
    return ret;
}

static PINT_sm_action remove_datafile_handles(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    /* TODO: how do we keep up with the error code that got us to this
     * path?  We don't want the return code of the cleanup steps to get
     * reported in the ack.
     */

    if(s_op->resp.u.create.stuffed)
    {
        ret = job_trove_dspace_remove(
            s_op->req->u.create.fs_id,
            s_op->resp.u.create.datafile_handles[0],
            0,
            smcb,
            0,
            js_p,
            &j_id,
            server_job_context);
    }
    else
    {
        /* TODO: need to also remove locally created handle if present */
        /* TODO: */
        gossip_err("We need to give the handles back to the pool somehow..\n");
        assert(0);
    }
    return ret;
}

static PINT_sm_action remove_keyvals(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    /* the keyval keys and vals should still be valid here */
    ret = job_trove_keyval_remove_list(
        s_op->req->u.create.fs_id,
        s_op->resp.u.create.metafile_handle,
        s_op->key_a, s_op->val_a, s_op->error_a,
        2, TROVE_SYNC, NULL, smcb, 0, js_p, &j_id, server_job_context);

    return ret;
}

static PINT_sm_action setup_local_datafile_handles(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i;
    int tmp_index = 0;
    server_configuration_s *config = get_server_config_struct();

    if(s_op->resp.u.create.stuffed)
    {
        s_op->resp.u.create.datafile_handles[0] = 
            s_op->u.create.handle_array[0];
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }
    else
    {
        for(i=0; i<s_op->u.create.num_io_servers; i++)
        {
            /* find local server positions and set handles */
            if(!strcmp(s_op->u.create.io_servers[i], config->host_id))
            {
                s_op->resp.u.create.datafile_handles[i] = 
                    s_op->u.create.handle_array[tmp_index];
                tmp_index++;
            }
        }
    }

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action write_keyvals(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    int i;
    int tmp_index = 0;
    server_configuration_s *config = get_server_config_struct();

    if(s_op->u.create.handle_array_remote_count)
    {
        for(i=0; i<s_op->u.create.num_io_servers; i++)
        {
            /* find remote server positions and set handles */
            if(strcmp(s_op->u.create.io_servers[i], config->host_id))
            {
                s_op->resp.u.create.datafile_handles[i] = 
                    s_op->u.create.handle_array[tmp_index];
                tmp_index++;
            }
        }
    }

    /* start with 2 keyvals: the distribution and the datafile handles */
    int keyval_count = 2;

    if(s_op->resp.u.create.stuffed)
    {
        /* also need to set the layout as a keyval */
        keyval_count+= 2;
    }

    s_op->key_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->key_a)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->val_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->val_a)
    {
        free(s_op->key_a);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->key_a[0].buffer = Trove_Common_Keys[METAFILE_HANDLES_KEY].key;
    s_op->key_a[0].buffer_sz = Trove_Common_Keys[METAFILE_HANDLES_KEY].size;

    s_op->val_a[0].buffer = s_op->resp.u.create.datafile_handles;
    s_op->val_a[0].buffer_sz =
        s_op->resp.u.create.datafile_count * sizeof(PVFS_handle);

    s_op->key_a[1].buffer = Trove_Common_Keys[METAFILE_DIST_KEY].key;
    s_op->key_a[1].buffer_sz = Trove_Common_Keys[METAFILE_DIST_KEY].size;

    s_op->val_a[1].buffer_sz =
        s_op->req->u.create.attr.u.meta.dist_size;
    s_op->val_a[1].buffer = malloc(s_op->val_a[1].buffer_sz);
    if(!s_op->val_a[1].buffer)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    PINT_dist_encode(s_op->val_a[1].buffer,
                     s_op->req->u.create.attr.u.meta.dist);

    if(s_op->resp.u.create.stuffed)
    {
        s_op->key_a[2].buffer = Trove_Common_Keys[METAFILE_LAYOUT_KEY].key;
        s_op->key_a[2].buffer_sz = Trove_Common_Keys[METAFILE_LAYOUT_KEY].size;

        /* TODO: don't we need to store more than just the algorithm?  Where
         * does the server_list go if LAYOUT_LIST was used?
         */ 
        s_op->val_a[2].buffer =
            &s_op->req->u.create.layout.algorithm;
        s_op->val_a[2].buffer_sz =
            sizeof(s_op->req->u.create.layout.algorithm);

        s_op->key_a[3].buffer = Trove_Common_Keys[NUM_DFILES_REQ_KEY].key;
        s_op->key_a[3].buffer_sz = Trove_Common_Keys[NUM_DFILES_REQ_KEY].size;

        gossip_debug(
            GOSSIP_SERVER_DEBUG, "create storing NUM_DFILES_REQ_KEY value of %d\n",
            s_op->req->u.create.num_dfiles_req);
        s_op->val_a[3].buffer = &s_op->req->u.create.num_dfiles_req;
        s_op->val_a[3].buffer_sz = sizeof(s_op->req->u.create.num_dfiles_req);
    }

    ret = job_trove_keyval_write_list(
        s_op->req->u.create.fs_id,
        s_op->resp.u.create.metafile_handle,
        s_op->key_a, s_op->val_a,
        keyval_count, TROVE_SYNC, NULL, smcb,
        0, js_p, &j_id, server_job_context);
    return ret;
}

static PINT_sm_action setattr_setobj_attribs(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    PVFS_object_attr *a_p = NULL;
    PVFS_object_attr *dspace_a_p = NULL;
    PVFS_ds_attributes *ds_attr = NULL;

    dspace_a_p = &s_op->attr;
    a_p = &s_op->req->u.create.attr;

     /* 
      * Remember that mtime is versioned on disk! so convert it here..
      * It is better to do it here than change the PVFS_object_attr_overwrite_setable
      * macro, since there are many more users of it, I think.
      */
     if (a_p->mask & PVFS_ATTR_COMMON_MTIME_SET)
     {
         PVFS_time orig_mtime = a_p->mtime;
         a_p->mtime = PINT_util_mktime_version(orig_mtime);
         gossip_debug(GOSSIP_SETATTR_DEBUG, "setting version "
                 "to %llu\n\tmtime is %llu\n",
                 llu(a_p->mtime), llu(orig_mtime));
     }

     /*
        we have the attribs stored in the dspace, as well as the
        requested attribs to store.  overwrite the ones that are setable
        and specified by the mask value in the request; macro defined in
        pvfs2-storage.h
        */
     PVFS_object_attr_overwrite_setable(dspace_a_p, a_p);

     gossip_debug(
         GOSSIP_SERVER_DEBUG,
         "[STUFFED CREATE]: WRITING attrs: [owner = %d, group = %d\n\t"
         "perms = %o, type = %d, atime = %llu, mtime = %llu\n\t"
         "ctime = %llu | dfile_count = %d | dist_size = %d]\n",
         dspace_a_p->owner, dspace_a_p->group, dspace_a_p->perms,
         dspace_a_p->objtype, llu(dspace_a_p->atime),
         llu(PINT_util_mkversion_time(dspace_a_p->mtime)), llu(dspace_a_p->ctime),
         (int)dspace_a_p->u.meta.dfile_count,
         (int)dspace_a_p->u.meta.dist_size);

     /* translate attrs to storage attr format */
     ds_attr = &(s_op->ds_attr);
     PVFS_object_attr_to_ds_attr(dspace_a_p, ds_attr);

     ret = job_trove_dspace_setattr(
         s_op->req->u.create.fs_id, s_op->resp.u.create.metafile_handle,
         ds_attr,
         TROVE_SYNC,
         smcb, 0, js_p, &j_id, server_job_context);

     return ret;
}

static int setup_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if (js_p->error_code == 0)
    {
        PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG,
                          "create: new metadata handle: %llu.\n",
                          llu(s_op->resp.u.create.metafile_handle));
    }

    return SM_ACTION_COMPLETE;
}


/*
 * Function: create_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static int cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    if(s_op->key_a)
    {
        free(s_op->key_a);
    }

    if(s_op->val_a)
    {
        if(s_op->val_a[1].buffer)
        {
            free(s_op->val_a[1].buffer);
        }
        free(s_op->val_a);
    }

    if(s_op->resp.u.create.datafile_handles)
    {
        free(s_op->resp.u.create.datafile_handles);
    }

    if(s_op->u.create.handle_array)
    {
        free(s_op->u.create.handle_array);
    }

    if(s_op->u.create.io_servers)
    {
        free(s_op->u.create.io_servers);
    }
    
    if(s_op->u.create.remote_io_servers)
    {
        free(s_op->u.create.remote_io_servers);
    }

    return(server_state_machine_complete(smcb));
}

static inline int PINT_get_object_ref_create(
    struct PVFS_server_req *req, PVFS_fs_id *fs_id, PVFS_handle *handle)
{
    *fs_id = req->u.create.fs_id;
    *handle = PVFS_HANDLE_NULL;
    return 0;
};

struct PINT_server_req_params pvfs2_create_params =
{
    .string_name = "create",
    .get_object_ref = PINT_get_object_ref_create,
    .perm = PINT_SERVER_CHECK_NONE,
    .access_type = PINT_server_req_modify,
    .state_machine = &pvfs2_create_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
