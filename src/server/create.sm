/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"

static int create_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int create_create(PINT_server_op *s_op, job_status_s* js_p);
static int create_setup_resp(PINT_server_op *s_op, job_status_s* js_p);


%%

machine pvfs2_create_sm(prelude, create2, setup_resp, final_response, cleanup)
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => create2;
        default => final_response;
    }

    state create2
    {
        run create_create;
        default => setup_resp;
    }

    state setup_resp
    {
        run create_setup_resp;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run create_cleanup;
        default => prelude;
    }
}

%%

/*
 * Function: create_create
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  int
 *
 * Synopsis: Create the new dataspace with the values provided in the response.
 *           
 */
static int create_create(PINT_server_op *s_op, job_status_s* js_p)
{

    int ret = -1;
    job_id_t i;

    PINT_STATE_DEBUG("create");

    ret = job_trove_dspace_create(
        s_op->req->u.create.fs_id,
        &s_op->req->u.create.handle_extent_array,
        s_op->req->u.create.object_type,
        NULL,
        s_op,
        0,
        js_p,
        &i,
        server_job_context);

    return(ret);
}

/* create_setup_resp()
 *
 * fills in the response structure based on results of previous operation
 */
static int create_setup_resp(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("setup_resp");

    if (js_p->error_code == 0)
    {
	gossip_debug(SERVER_DEBUG, "Handle created: %Lu\n",
                     Lu(js_p->handle));
	s_op->resp.u.create.handle = js_p->handle;
    }

    /* NOTE: we _deliberately_ leave the error_code unchanged so that it
     * can be used by the next state.
     */
    return(1);
}


/*
 * Function: create_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static int create_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("cleanup");

    return(server_state_machine_complete(s_op));
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
