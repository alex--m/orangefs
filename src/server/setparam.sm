/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <assert.h>

#include "pvfs2-server.h"

static int setparam_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int setparam_work(PINT_server_op *s_op, job_status_s* js_p);
static int check_fs_id(PVFS_fs_id fs_id);

%%

machine pvfs2_setparam_sm(prelude, work, final_response, cleanup)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		success => work;
		default => final_response;
	}

	state work
	{
		run setparam_work;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run setparam_cleanup;
		default => prelude;
	}
}

%%

/* setparam_work()
 *
 * actually does the "work" involved in setting a runtime server parameter
 */
static int setparam_work(PINT_server_op *s_op, job_status_s* js_p)
{
    job_id_t tmp_id;
    int ret = -1;

    PINT_STATE_DEBUG("work");

    switch(s_op->req->u.mgmt_setparam.param)
    {
	case PVFS_SERV_PARAM_GOSSIP_MASK:
	    gossip_set_debug_mask(1, (int)s_op->req->u.mgmt_setparam.value);
	    js_p->error_code = 0;
	    return(1);
	case PVFS_SERV_PARAM_INVALID:
	    gossip_lerr("Error: mgmt_setparam for unknown parameter %d.\n",
		(int)s_op->req->u.mgmt_setparam.param);
	    js_p->error_code = -PVFS_ENOSYS;
	    return(1);
	case PVFS_SERV_PARAM_FSID_CHECK:
	    js_p->error_code = 
		check_fs_id((PVFS_fs_id)s_op->req->u.mgmt_setparam.value);
	    return(1);
	case PVFS_SERV_PARAM_ROOT_CHECK:
	    ret = job_trove_dspace_verify(s_op->req->u.mgmt_setparam.fs_id,
		(PVFS_handle)s_op->req->u.mgmt_setparam.value,
		s_op,
		0,
		js_p,
		&tmp_id,
		server_job_context);
	    return(ret);
    }

    gossip_lerr("Error: mgmt_setparam for unknown parameter %d.\n",
	(int)s_op->req->u.mgmt_setparam.param);
    js_p->error_code = -PVFS_ENOSYS;
    return(1);
}


/* setparam_cleanup()
 *
 * cleans up any resources consumed by this state machine and ends
 * execution of the machine
 */
static int setparam_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("cleanup");
    return(server_state_machine_complete(s_op));
}


/* check_fs_id()
 *
 * checks to see if a given fs id is valid
 *
 * returns 0 on success, -PVFS_error on failure
 */
static int check_fs_id(PVFS_fs_id fs_id)
{
    /* TODO: if collection_iterate() ever becomes an asynchronous function
     * we will have to do this differently
     */
    int count = 1;
    int ret = -1;
    TROVE_ds_position pos = TROVE_ITERATE_START;
    TROVE_keyval_s name;
    TROVE_coll_id tmp_coll;
    TROVE_op_id tmp_id;

    name.buffer = malloc(PVFS_NAME_MAX);
    if(!name.buffer)
	return(-PVFS_ENOMEM);
    name.buffer_sz = PVFS_NAME_MAX;

    while(count == 1)
    {
	ret = trove_collection_iterate(&pos,
	    &name,
	    &tmp_coll,
	    &count,
	    0,
	    0,
	    NULL,
	    &tmp_id);
	if(ret == 0)
	{
	    assert(0);
	    gossip_lerr("Error: unexpected trove behavior.\n");
	    return(-PVFS_EINVAL);
	}
	
	if(ret < 0)
	{
	    return(ret);
	}

	gossip_debug(SERVER_DEBUG, "looking for fs_id: %ld, found %ld.\n",
	    (long)fs_id, (long)tmp_coll);

	if(count > 0 && tmp_coll == fs_id)
	{
	    /* we found a matching collection */
	    return(0);
	}
    }

    /* if we fall through to this point, then trove apparently doesn't know
     * about the collection that we are looking for 
     */
    return(-PVFS_ENOENT);
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */

