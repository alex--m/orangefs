/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-storage.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"

static int mgmt_remove_dirent_get_dirdata_handle_from_parent(
    PINT_server_op *s_op, job_status_s *js_p);
static int mgmt_remove_dirent(
    PINT_server_op *s_op, job_status_s *js_p);
static int mgmt_remove_dirent_cleanup(
    PINT_server_op *s_op, job_status_s *js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];

%%

machine pvfs2_mgmt_remove_dirent_sm(
    prelude,
    get_dirdata_handle_from_parent,
    remove_dirent,
    final_response,
    cleanup)
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => get_dirdata_handle_from_parent;
        default => final_response;
    }

    state get_dirdata_handle_from_parent
    {
        run mgmt_remove_dirent_get_dirdata_handle_from_parent;
        success => remove_dirent;
        default => final_response;
    }

    state remove_dirent
    {
        run mgmt_remove_dirent;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_remove_dirent_cleanup;
        default => terminate;
    }
}

%%

static int mgmt_remove_dirent_get_dirdata_handle_from_parent(
    PINT_server_op *s_op, job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t i;

    

    s_op->key.buffer = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    s_op->val.buffer = &s_op->u.mgmt_remove_dirent.dirdata_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(
        GOSSIP_SERVER_DEBUG,
        "  reading dirdata handle (coll_id = %d, handle = %Lu, "
        "key = %s (%d), val_buf = %p (%d))\n",
        s_op->req->u.mgmt_remove_dirent.fs_id,
        Lu(s_op->req->u.mgmt_remove_dirent.handle),
        (char *) s_op->key.buffer, s_op->key.buffer_sz,
        s_op->val.buffer, s_op->val.buffer_sz);

    ret = job_trove_keyval_read(
        s_op->req->u.mgmt_remove_dirent.fs_id,
        s_op->req->u.mgmt_remove_dirent.handle,
        &s_op->key, &s_op->val, 0, NULL, s_op, 0, js_p, &i,
        server_job_context);

    return ret;
}

static int mgmt_remove_dirent(
    PINT_server_op *s_op, job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t j_id;
    struct server_configuration_s *user_opts = get_server_config_struct();

    

    s_op->key.buffer = s_op->req->u.mgmt_remove_dirent.entry;
    s_op->key.buffer_sz = strlen(
        s_op->req->u.mgmt_remove_dirent.entry) + 1;

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  removing entry %s from dirdata "
        "object (handle = %Lu)\n", s_op->req->u.mgmt_remove_dirent.entry,
        Lu(s_op->u.mgmt_remove_dirent.dirdata_handle));

    ret = job_trove_keyval_remove(
        s_op->req->u.mgmt_remove_dirent.fs_id,
        s_op->u.mgmt_remove_dirent.dirdata_handle,
        &s_op->key,
        PINT_config_get_trove_sync_meta(
            user_opts, s_op->req->u.mgmt_remove_dirent.fs_id),
        NULL,
        s_op,
        0,
        js_p,
        &j_id,
        server_job_context);

    return ret;
}

static int mgmt_remove_dirent_cleanup(
    PINT_server_op *s_op, job_status_s *js_p)
{
    
    return(server_state_machine_complete(s_op));
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
