/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"

static int rmdirent_read_parent_metadata(PINT_server_op *s_op, job_status_s* js_p);
static int rmdirent_verify_parent_metadata_and_read_directory_entry_handle(PINT_server_op *s_op, job_status_s* js_p);
static int rmdirent_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int rmdirent_remove_directory_entry(PINT_server_op *s_op, job_status_s* js_p);
static int rmdirent_read_directory_entry(PINT_server_op *s_op, job_status_s* js_p);
static int rmdirent_setup_resp(PINT_server_op *s_op, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];
extern job_context_id PINT_server_job_context;

/* TODO: need error transition from prelude state */

%%

machine pvfs2_rmdirent_sm(prelude,
		 read_parent_metadata,
		 verify_parent_metadata_and_read_directory_entry_handle,
		 read_directory_entry,
		 remove_directory_entry,
		 setup_resp,
		 final_response,
		 cleanup)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		default => read_parent_metadata;
	}

	state read_parent_metadata
	{
		run rmdirent_read_parent_metadata;
		success => verify_parent_metadata_and_read_directory_entry_handle;
		default => setup_resp;
	}

	state verify_parent_metadata_and_read_directory_entry_handle
	{
		run rmdirent_verify_parent_metadata_and_read_directory_entry_handle;
		success => read_directory_entry;
		default => setup_resp;
	}

	state read_directory_entry
	    {
		run rmdirent_read_directory_entry;
		success => remove_directory_entry;
		default => setup_resp;
	    }

	state remove_directory_entry
	{
		run rmdirent_remove_directory_entry;
		default => setup_resp;
	}

	state setup_resp
	{
		run rmdirent_setup_resp;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run rmdirent_cleanup;
		default => prelude;
	}
}

%%

/*
 * Function: rmdirent_read_parent_metadata
 *
 * Synopsis: We need to get the attribute structure if it is available.
 *           If it is not, we just send an error to the client.  
 *           TODO: Semantics here!
 */
static int rmdirent_read_parent_metadata(PINT_server_op *s_op,
					 job_status_s* js_p)
{
    int ret;
    job_id_t j_id;

    gossip_debug(SERVER_DEBUG, "rmdirent state: read_parent_metadata\n");

    /* fill in key and value structures prior to keyval read */
    s_op->key.buffer = Trove_Common_Keys[METADATA_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METADATA_KEY].size;

    /* we'll store the parent attributes in the rmdirent scratch space in the s_op */
    s_op->val.buffer = &s_op->u.rmdirent.parent_attr;
    s_op->val.buffer_sz = sizeof(PVFS_object_attr);

    gossip_debug(SERVER_DEBUG,
		 "  reading metadata (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.rmdirent.fs_id,
		 s_op->req->u.rmdirent.parent_handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_read(s_op->req->u.rmdirent.fs_id,
					 s_op->req->u.rmdirent.parent_handle,
					 &s_op->key,
					 &s_op->val,
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &j_id,
					 PINT_server_job_context);
    return ret;

}

/*
 * Function: rmdirent_verify_parent_metadata_and_read_directory_entry_handle
 *
 * (sorry for the long function name, but it performs multiple steps -- rob)
 *
 *
 * Synopsis: This should use a global function that verifies that the user
 *           has the necessary permissions to perform the operation it wants
 *           to do.
 *           
 */
static int rmdirent_verify_parent_metadata_and_read_directory_entry_handle(PINT_server_op *s_op,
									   job_status_s* js_p)
{
    int ret;
    job_id_t i;

    gossip_debug(SERVER_DEBUG, "rmdirent state: verify_parent_metadata_and_read_directory_entry_handle\n");

    /* TODO: PERFORM PERMISSION CHECKING */

    /* set up key and value structures to read directory entry */
    s_op->key.buffer    = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    /* we will read the dirdata handle from the entry into the rmdirent scratch space */
    s_op->val.buffer    = &s_op->u.rmdirent.dirdata_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(SERVER_DEBUG,
		 "  reading dirdata handle (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.rmdirent.fs_id,
		 s_op->req->u.rmdirent.parent_handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_read(s_op->req->u.rmdirent.fs_id,
					 s_op->req->u.rmdirent.parent_handle,
					 &s_op->key,
					 &s_op->val,
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &i,
					 PINT_server_job_context);
    return ret;
}

/* Function: rmdirent_read_directory_entry
 *
 * Synopsis: In order to return the handle of the removed entry (which is part
 * of the rmdirent response), we must read the directory entry prior to removing
 * it.
 */
static int rmdirent_read_directory_entry(PINT_server_op *s_op,
					 job_status_s* js_p)
{
    int ret;
    job_id_t j_id;

    gossip_debug(SERVER_DEBUG, "rmdirent state: read_directory_entry\n");

    gossip_debug(SERVER_DEBUG,
		 "  reading from dirent handle = 0x%08Lx, name = %s\n",
		 s_op->u.rmdirent.dirdata_handle,
		 s_op->req->u.rmdirent.entry);

    /* initialize keyval prior to read call
     *
     * We will read the handle into the rmdirent scratch space
     * (s_op->u.rmdirent.entry_handle).
     */
    s_op->key.buffer    = s_op->req->u.rmdirent.entry;
    s_op->key.buffer_sz = strlen(s_op->req->u.rmdirent.entry) + 1;
    s_op->val.buffer    = &s_op->u.rmdirent.entry_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    ret = job_trove_keyval_read(s_op->req->u.rmdirent.fs_id,
					 s_op->u.rmdirent.dirdata_handle,
					 &s_op->key,
					 &s_op->val,
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &j_id,
					 PINT_server_job_context);
    return ret;
}

/*
 * Function: rmdirent_remove_directory_entry
 *
 * Synopsis: posts a trove keyval remove to remove the directory entry from
 * the dirdata object.
 *           
 */
static int rmdirent_remove_directory_entry(PINT_server_op *s_op, job_status_s* js_p)
{
    int ret;
    job_id_t j_id;

    gossip_debug(SERVER_DEBUG, "rmdirent state: remove_directory_entry\n");

    /* set up key and structure for keyval remove */
    s_op->key.buffer    = s_op->req->u.rmdirent.entry;
    s_op->key.buffer_sz = strlen(s_op->req->u.rmdirent.entry) + 1;

    gossip_debug(SERVER_DEBUG,
		 "  removing entry %s from dirdata object (handle = 0x%08Lx)\n",
		 s_op->req->u.rmdirent.entry,
		 s_op->u.rmdirent.dirdata_handle);

    ret = job_trove_keyval_remove(s_op->req->u.rmdirent.fs_id,
					   s_op->u.rmdirent.dirdata_handle,
					   &s_op->key,
					   TROVE_SYNC,
					   NULL,
					   s_op,
					   js_p,
					   &j_id,
					   PINT_server_job_context);
    return ret;
}


/* rmdirent_setup_resp()
 *
 * fills in the reponse structure based on the results of earlier 
 * states
 */
static int rmdirent_setup_resp(PINT_server_op *s_op, job_status_s* js_p)
{

    gossip_debug(SERVER_DEBUG, "rmdirent state: setup_resp\n");

    /* Set the handle if it was removed */
    if(js_p->error_code == 0) {
	/* we return the handle from the directory entry in the response */
	s_op->resp.u.rmdirent.entry_handle = s_op->u.rmdirent.entry_handle;
	gossip_debug(SERVER_DEBUG,
		     "  succeeded; returning handle 0x%08Lx in response\n",
		     s_op->resp.u.rmdirent.entry_handle);
    }
    else {
	gossip_debug(SERVER_DEBUG, "  sending error response\n");
    }

    /* NOTE: we _intentionally_ leave the error_code field the way that
     * we found it, so that later states can use it to set the resp.status
     * field.
     */
    return(1);
}

/*
 * Function: rmdirent_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static int rmdirent_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{
    return(PINT_state_machine_complete(s_op));
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
