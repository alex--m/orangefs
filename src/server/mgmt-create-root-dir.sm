/*
 * (C) 2010 Clemson University
 *
 * See COPYING in top-level directory.
 */

#include <assert.h>
#include <unistd.h>

#include "pvfs2-config.h"
#include "extent-utils.h"
#include "pint-cached-config.h" 
#include "pint-perf-counter.h"
#include "pint-util.h"
#include "pvfs2-attr.h"
#include "pvfs2-internal.h"
#include "pvfs2-req-proto.h"
#include "pvfs2-server.h"
#include "pvfs2-types.h"
#include "pvfs2-util.h"
#include "security-util.h"
#include "server-config.h"
#include "dist-dir-utils.h"
#ifdef ENABLE_SECURITY_CERT
#include "cert-util.h"
#endif

/*****
mgmt_create_root_dir.sm:
1. allocate dirdata handles for root directory.
2. create lost+found directory under the root directory.
*****/

enum
{
    NO_REQ = 100,
    LOCAL_OPERATION,
    REMOTE_OPERATION,
    CLEANUP
};

static char *lost_and_found_string = "lost+found";
static int num_retries = 0;

static int mkdir_lost_and_found_comp_fn(
        void *v_p,
        struct PVFS_server_resp *resp_p,
        int index);
static int crdirent_lost_and_found_comp_fn(
        void *v_p,
        struct PVFS_server_resp *resp_p,
        int index);
static int delete_lost_and_found_handle_comp_fn(
        void *v_p,
        struct PVFS_server_resp *resp_p,
        int index);


%%

machine pvfs2_mgmt_create_root_dir_sm
{
    state check_for_request
    {
        run mgmt_create_root_dir_check_for_request;
        NO_REQ => create_dist_dir_struct; 
        default => cleanup_noreq;    
    }

    state create_dist_dir_struct
    {
        run mgmt_create_root_dir_create_dist_dir_struct;
        REMOTE_OPERATION => request_remote_dirdata_dspace;
        success => create_local_dirdata_dspace;
        default => cleanup_noreq;
    }

    state request_remote_dirdata_dspace
    {
        run mgmt_create_root_dir_request_remote_dirdata_dspace;
        success => create_local_dirdata_dspace;
        default => retry_remote_dirdata_dspace;
    }

    state retry_remote_dirdata_dspace
    {
        run mgmt_create_root_dir_retry_remote_dirdata_dspace;
        default => request_remote_dirdata_dspace;
    }

    state create_local_dirdata_dspace
    {
        run mgmt_create_root_dir_create_local_dirdata_dspace;
        success => fill_handles_to_dist_dir_struct;
        default => cleanup_noreq;
    }

    state fill_handles_to_dist_dir_struct
    {
        run mgmt_create_root_dir_fill_handles_to_dist_dir_struct;
        success => dirdata_attr_and_keyval_setup;
        default => cleanup_noreq;
    }

    state dirdata_attr_and_keyval_setup
    {
        run mgmt_create_root_dir_dirdata_attr_and_keyval_setup;
        success => run_tree_setattr;
        default => cleanup_noreq;
    }

    state run_tree_setattr
    {
        jump pvfs2_tree_setattr_work_sm;
        default => tree_setattr_cleanup;
    }

    state tree_setattr_cleanup
    {
        run mgmt_create_root_dir_tree_setattr_cleanup;
        success => write_keyval_to_meta_handle;
        default => cleanup_noreq;
    }
  
    state write_keyval_to_meta_handle
    {
        run mgmt_create_root_dir_write_keyval_to_meta_handle;
        success => write_keyval_to_dirdata_handle;
        default => cleanup_noreq;
    }

    state write_keyval_to_dirdata_handle
    {
        run mgmt_create_root_dir_write_keyval_to_dirdata_handle;
        success => mkdir_lost_and_found_setup_msgpair;
        default => cleanup_noreq;
    }

    state mkdir_lost_and_found_setup_msgpair
    {
        run mgmt_create_root_dir_mkdir_lost_and_found_setup_msgpair;
        REMOTE_OPERATION => mkdir_lost_and_found_msg_xfer_msgpair;
        LOCAL_OPERATION => local_mkdir;
        default => cleanup_noreq;
    }

    state mkdir_lost_and_found_msg_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => remote_mkdir_lost_and_found_cleanup;
    }

    state remote_mkdir_lost_and_found_cleanup
    {
        run mgmt_create_root_dir_remote_mkdir_lost_and_found_cleanup;
        CLEANUP => cleanup_noreq;
        default => crdirent_lost_and_found_setup_msgpair;
    }

    state local_mkdir
    {
        jump pvfs2_mkdir_work_sm;
        default => local_mkdir_cleanup;
    }

    state local_mkdir_cleanup
    {
        run mgmt_create_root_dir_local_mkdir_cleanup;
        CLEANUP => cleanup_noreq;
        default => crdirent_lost_and_found_setup_msgpair;
    }

    state crdirent_lost_and_found_setup_msgpair
    {
        run mgmt_create_root_dir_crdirent_lost_and_found_setup_msgpair;
        REMOTE_OPERATION => crdirent_lost_and_found_xfer_msgpair;
        LOCAL_OPERATION => local_crdirent;
        default => cleanup_noreq;
    }

    state crdirent_lost_and_found_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => cleanup_noreq;
        default => delete_lost_and_found_handle_setup_msgpair;
    }

    state local_crdirent
    {
        jump pvfs2_crdirent_work_sm;
        default => local_crdirent_cleanup;
    }

    state local_crdirent_cleanup
    {
        run mgmt_create_root_dir_local_crdirent_cleanup;
        CLEANUP => delete_lost_and_found_handle_setup_msgpair;
        default => cleanup_noreq;
    }

    state delete_lost_and_found_handle_setup_msgpair
    {
        run mgmt_create_root_dir_delete_lost_and_found_handle_setup_msgpair;
        REMOTE_OPERATION => delete_lost_and_found_handle_xfer_msgpair;
        LOCAL_OPERATION => local_delete;
        default => cleanup_noreq;
    }

    state delete_lost_and_found_handle_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => remote_delete_cleanup;
    }

    state remote_delete_cleanup
    {
       run mgmt_create_root_dir_remote_delete_cleanup;
       default => cleanup_noreq;
    }

    state local_delete
    {
        jump pvfs2_remove_work_sm;
        default => local_delete_cleanup;
    }

    state local_delete_cleanup
    {
        run mgmt_create_root_dir_local_delete_cleanup;
        default => cleanup_noreq;
    }

    state cleanup_noreq
    {
        run mgmt_create_root_dir_cleanup_noreq;
        default => terminate;
    }
}

%%

/*
 * Function: mgmt_create_root_dir_check_for_request
 * Params:   server_op *b,
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: Check if this state machine came about from a request or 
 *           from a noreq() state machine (on server startup).
 */
static PINT_sm_action mgmt_create_root_dir_check_for_request( 
    struct PINT_smcb *smcb, 
    job_status_s *js_p)
{

    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    server_configuration_s *user_opts = get_server_config_struct();
#ifdef ENABLE_SECURITY_CERT
    X509 *xcert = NULL;
    PVFS_certificate *cert = NULL;
#endif
    int ret = -1;

    assert(s_op);

    if( s_op->req == NULL )
    {
        js_p->error_code = NO_REQ;
    }
    else
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, "mgmt_create_root_dir: can only be called noreq, not doing anything!!\n");
        js_p->error_code = 0;
    }

    /* Create credential that will be used for requests. */
    PINT_init_credential(&s_op->u.mgmt_create_root_dir.credential);
    s_op->u.mgmt_create_root_dir.credential.userid = 0;
    s_op->u.mgmt_create_root_dir.credential.num_groups = 1;
    s_op->u.mgmt_create_root_dir.credential.group_array =
        malloc(sizeof(PVFS_gid));
    s_op->u.mgmt_create_root_dir.credential.group_array[0] = 0;
    s_op->u.mgmt_create_root_dir.credential.issuer = 
        malloc(strlen(user_opts->server_alias) + 3);
    s_op->u.mgmt_create_root_dir.credential.issuer[0] = 'S';
    s_op->u.mgmt_create_root_dir.credential.issuer[1] = ':';
    strcpy(s_op->u.mgmt_create_root_dir.credential.issuer+2,
         user_opts->server_alias);
    s_op->u.mgmt_create_root_dir.credential.timeout =
        PINT_util_get_current_time() + user_opts->credential_timeout;

#ifdef ENABLE_SECURITY_CERT
    /* use CA certificate as cert in credential */
    ret = PINT_load_cert_from_file(user_opts->ca_file, &xcert);
    if (ret != 0)
    {
        gossip_err("mgmt_create_root_dir: could not load CA "
                     "certificate: %d\n", ret);

        js_p->error_code = -PVFS_EACCES;
        return SM_ACTION_COMPLETE;
    }

    ret = PINT_X509_to_cert(xcert, &cert);
    if (ret != 0)
    {
        PINT_security_error(__func__, ret);
        js_p->error_code = -PVFS_EACCES;
        X509_free(xcert);
        return SM_ACTION_COMPLETE;
    }

    ret = PINT_copy_cert(cert, 
                         &s_op->u.mgmt_create_root_dir.credential.certificate);
    if (ret != 0)
    {
        gossip_err("mgmt_create_root_dir: could not copy certificate\n");
        js_p->error_code = -PVFS_EACCES;
        PINT_cleanup_cert(cert);
        free(cert);
        X509_free(xcert);
        return SM_ACTION_COMPLETE;
    }

    PINT_cleanup_cert(cert);
    free(cert);
    X509_free(xcert);
#endif

    PINT_sign_credential(&s_op->u.mgmt_create_root_dir.credential);

    ret = PINT_server_to_server_capability(&s_op->u.mgmt_create_root_dir.capability,
            s_op->target_fs_id,
            0,
            NULL);
    if (ret < 0)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }


    return SM_ACTION_COMPLETE;
}


/* init dist_dir_struct in s_op->attr.u.dir and 
 * s_op->u.mgmt_create_root_dir */
static PINT_sm_action mgmt_create_root_dir_create_dist_dir_struct(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    server_configuration_s *user_opts = get_server_config_struct();
    PVFS_object_attr *attr;
    int num_total_dirdata_servers, num_initial_dirdata_servers;
    int ret = -1;
    unsigned char *c;
    int i;

    js_p->error_code = 0;
    attr = (&s_op->attr);

    /* Find total # of meta servers */
    ret = PINT_cached_config_get_num_meta(s_op->target_fs_id,
                                            &num_total_dirdata_servers);
    if(ret < 0)
    {
        gossip_err("Error: failed to get number of metadata servers\n");
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    /* Honor max # of dirdata servers from config file */
    if (user_opts->distr_dir_servers_max < num_total_dirdata_servers)
    {
        num_total_dirdata_servers = user_opts->distr_dir_servers_max;
    }

    /* set num_dirdata_servers for pre-allocation of dirdata handles */
    s_op->u.mgmt_create_root_dir.num_dirdata_servers =
        num_total_dirdata_servers;

    /* for root dir, use all dirdata servers */
    num_initial_dirdata_servers = num_total_dirdata_servers;

    /* init meta handle dist_dir_struct */
    ret = PINT_init_dist_dir_state(&attr->dist_dir_attr,
            &attr->dist_dir_bitmap,
            num_total_dirdata_servers,
            0,
            num_initial_dirdata_servers,
            100);

    assert(ret == 0);
    /* Need to set mask so we will free dist dir attrs when cleaning up. */
    attr->mask |= PVFS_ATTR_DISTDIR_ATTR;

    gossip_debug(GOSSIP_SERVER_DEBUG, 
            "mgmt-create-root-dir: Init dist-dir-attr for dir meta handle %llu "
            "with tree_height=%d, num_servers=%d, bitmap_size=%d, "
            "split_size=%d, server_no=%d and branch_level=%d\n",
            llu(s_op->target_handle),
            attr->dist_dir_attr.tree_height,
            attr->dist_dir_attr.num_servers,
            attr->dist_dir_attr.bitmap_size,
            attr->dist_dir_attr.split_size,
            attr->dist_dir_attr.server_no,
            attr->dist_dir_attr.branch_level);

    /* gossip bitmap, may adjust later */
    gossip_debug(GOSSIP_SERVER_DEBUG,
            "mgmt-create-root-dir: Init dist_dir_bitmap as:\n");
    for(i = attr->dist_dir_attr.bitmap_size - 1;
            i >= 0 ; i--)
    {
        c = (unsigned char *)(attr->dist_dir_bitmap + i);
        gossip_debug(GOSSIP_SERVER_DEBUG,
                " i=%d : %02x %02x %02x %02x\n",
                i, c[3], c[2], c[1], c[0]);
    }
    gossip_debug(GOSSIP_SERVER_DEBUG, "\n");

    /* allocate dirdata handle space, similar to create.sm */
    attr->dirdata_handles = malloc(
            sizeof(*attr->dirdata_handles) *
            num_total_dirdata_servers);
    s_op->u.mgmt_create_root_dir.handle_array_local = malloc(
            sizeof(*s_op->u.mgmt_create_root_dir.handle_array_local) *
            num_total_dirdata_servers);
    s_op->u.mgmt_create_root_dir.handle_array_remote = malloc(
            sizeof(*s_op->u.mgmt_create_root_dir.handle_array_remote) *
            num_total_dirdata_servers);

    if(!attr->dirdata_handles ||
            !s_op->u.mgmt_create_root_dir.handle_array_local ||
            !s_op->u.mgmt_create_root_dir.handle_array_remote )
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* dirdata on every meta server */
    s_op->u.mgmt_create_root_dir.handle_array_local_count = 1;
    s_op->u.mgmt_create_root_dir.handle_array_remote_count = 
        s_op->u.mgmt_create_root_dir.num_dirdata_servers - 1;
    if (s_op->u.mgmt_create_root_dir.handle_array_remote_count > 0)
    {
        js_p->error_code = REMOTE_OPERATION;
    }

    gossip_debug(GOSSIP_SERVER_DEBUG, "creating %d local dirdata files\n", 
        s_op->u.mgmt_create_root_dir.handle_array_local_count);
    gossip_debug(GOSSIP_SERVER_DEBUG, "creating %d remote dirdata files\n", 
        s_op->u.mgmt_create_root_dir.handle_array_remote_count);

    return SM_ACTION_COMPLETE; 
}

static PINT_sm_action mgmt_create_root_dir_retry_remote_dirdata_dspace(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    job_id_t tmp_id;

    /* if the remote dspace dirdata handle cannot be retrieved from the appropriate precreate pool,
     * then continue trying every 30 seconds. The idea is that a sysadmin will see these messages
     * and resolve the problem.
     */

    num_retries++;

    gossip_err("Unable to create root directory after %d %s.\n"
               " Please ensure that all configured servers are running.\n"
               " Will continue to retry...\n", num_retries, (num_retries > 1) ? "retries" : "retry");

    gossip_debug(GOSSIP_SERVER_DEBUG,
        "Sleeping for 30 seconds before retrying.\n");

    return(job_req_sched_post_timer(
        (30*1000),
        smcb,
        0,
        js_p,
        &tmp_id,
        server_job_context));
}

static PINT_sm_action mgmt_create_root_dir_request_remote_dirdata_dspace(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    if(s_op->u.mgmt_create_root_dir.handle_array_remote_count == 0)
    {
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }

    ret = job_precreate_pool_get_handles(
        s_op->target_fs_id,
        s_op->u.mgmt_create_root_dir.handle_array_remote_count,
        PVFS_TYPE_DIRDATA,
        NULL, /* server string set to NULL for now */
        s_op->u.mgmt_create_root_dir.handle_array_remote,
        0,
        smcb,
        0,
        js_p,
        &j_id,
        server_job_context,
        NULL);

    return ret;

}

static PINT_sm_action mgmt_create_root_dir_create_local_dirdata_dspace(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr GCC_UNUSED;
    int ret = -PVFS_ENOMEM;
    job_id_t tmp_id;
    PVFS_handle_extent_array extent_array;
    server_configuration_s *user_opts = get_server_config_struct();

    attr = (&s_op->attr);

    assert(s_op->u.mgmt_create_root_dir.num_dirdata_servers > 0);


    if(s_op->u.mgmt_create_root_dir.handle_array_local_count == 0)
    {
        /* no local work to do */
        js_p->error_code = 0;
        return(SM_ACTION_COMPLETE);
    }

    ret = PINT_config_get_meta_handle_extent_array(
        user_opts, s_op->target_fs_id, &extent_array);
    assert(ret == 0);
    assert(extent_array.extent_count > 0);

    gossip_debug(GOSSIP_SERVER_DEBUG, " local dirdata handle(s) will "
                 "be in starting hrange[0] %llu-%llu\n",
                 llu(extent_array.extent_array[0].first),
                 llu(extent_array.extent_array[0].last));

    ret = job_trove_dspace_create_list(
        s_op->target_fs_id,
        &extent_array,
        s_op->u.mgmt_create_root_dir.handle_array_local,
        s_op->u.mgmt_create_root_dir.handle_array_local_count,
        PVFS_TYPE_DIRDATA, 
        NULL,
        TROVE_SYNC,
        smcb,
        0,
        js_p,
        &tmp_id,
        server_job_context, 
        NULL);

    free(extent_array.extent_array);

    return(ret);
}



static PINT_sm_action mgmt_create_root_dir_fill_handles_to_dist_dir_struct(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr;
    int i;

    attr = &s_op->attr;

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  local dirdata handle (%llu)\n",
        llu(s_op->u.mgmt_create_root_dir.handle_array_local[0]));

    /* fill dirdata_handles array */
    attr->dirdata_handles[0] =
        s_op->u.mgmt_create_root_dir.handle_array_local[0];

    for(i = 0; i < s_op->u.mgmt_create_root_dir.handle_array_remote_count; i++)
    {
        attr->dirdata_handles[i+1] =
            s_op->u.mgmt_create_root_dir.handle_array_remote[i];
    }

    gossip_debug(GOSSIP_SERVER_DEBUG, 
            "\t mgmt-create-root-dir: dirdata handles array of root directory %llu.\n",
            llu(s_op->target_handle));

    for(i=0; i<s_op->u.mgmt_create_root_dir.num_dirdata_servers; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, 
                "\t\tdirdata server %d: %llu.\n",
                i, llu(attr->dirdata_handles[i]));
    }

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_create_root_dir_dirdata_attr_and_keyval_setup(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *tree_setattr_op = NULL;
    struct PVFS_server_req *tree_setattr_req = NULL;
    PVFS_object_attr attr;

    gossip_debug(GOSSIP_SERVER_DEBUG, "s_op->attr.objtype = %d\n", s_op->attr.objtype);

    /* set dirdata attr, set all the static component */
/*
    PINT_copy_object_attr(&attr, &s_op->attr);
*/
    memset(&attr, 0, sizeof(PVFS_object_attr));
    attr.owner = getuid();
    attr.group = getgid();
    attr.perms = 0777;
    attr.objtype = PVFS_TYPE_DIRDATA;
    PINT_dist_dir_attr_copyto(attr.dist_dir_attr,
                              s_op->attr.dist_dir_attr);
    attr.dirdata_handles = s_op->attr.dirdata_handles;
    attr.dist_dir_bitmap = s_op->attr.dist_dir_bitmap;
    attr.mask = PVFS_ATTR_COMMON_ALL;
    attr.mask |= PVFS_ATTR_DISTDIR_ATTR;

    gossip_debug(
        GOSSIP_SERVER_DEBUG,
        "  SENDING attrs: [owner = %d, group = %d\n\t"
        "perms = %o, type = %d, atime = %llu, mtime = %llu\n\t"
        "ctime = %llu ]\n",
        attr.owner, attr.group, attr.perms,
        attr.objtype, llu(attr.atime),
        llu(PINT_util_mkversion_time(attr.mtime)), llu(attr.ctime));

    tree_setattr_req = malloc(sizeof(struct PVFS_server_req));
    if (! tree_setattr_req) 
    {
        gossip_err("Unable to allocate tree_setattr_req\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }   
    memset(tree_setattr_req, 0, sizeof(*tree_setattr_req));

    PINT_SERVREQ_TREE_SETATTR_FILL(
        *tree_setattr_req,
        s_op->u.mgmt_create_root_dir.capability,
        s_op->u.mgmt_create_root_dir.credential,
        s_op->target_fs_id,
        PVFS_TYPE_DIRDATA,
        attr,
        0,
        s_op->attr.dist_dir_attr.num_servers,
        s_op->attr.dirdata_handles,
        NULL);

    tree_setattr_op = malloc(sizeof(struct PINT_server_op));
    if (! tree_setattr_op)
    {
        gossip_err("Unable to allocate tree_setattr_op\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    memset(tree_setattr_op, 0, sizeof(*tree_setattr_op));
    tree_setattr_op->req = tree_setattr_req;
    tree_setattr_op->op = PVFS_SERV_TREE_SETATTR;

    PINT_sm_push_frame(smcb, 0, tree_setattr_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_create_root_dir_tree_setattr_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *tree_setattr_op = NULL;
    int task_id = 0;
    int remaining = 0;
    int error_code = 0;
    int i,ret;
    char server_name[1024]={0};
    char errstr[256]={0};

    tree_setattr_op = PINT_sm_pop_frame(smcb, &task_id, &error_code, &remaining);

    for (i=0; i<tree_setattr_op->resp.u.tree_setattr.handle_count &&
              tree_setattr_op->resp.u.tree_setattr.status[i] != 0
            ; i++)
    {
        ret = PINT_cached_config_get_server_name(server_name,
                                                 1024,
                                                 tree_setattr_op->req->u.tree_setattr.handle_array[i],
                                                 tree_setattr_op->req->u.tree_setattr.fs_id);
        if (ret != 0)
        {
           PVFS_strerror_r(ret, errstr, sizeof(errstr));
           gossip_err("%s:Error locating server name for handle(%llu)\n",
                      __func__,
                      llu(tree_setattr_op->req->u.tree_setattr.handle_array[i]));
           gossip_err("%s:Error(%d):%s\n",__func__,ret,errstr);
           js_p->error_code = ret;
           return SM_ACTION_COMPLETE;
        }


        if (i==0)
        {
           /* Unable to set attributes on the dirdata handle on this host */
           gossip_err("%s : CRITICAL : Error setting attributes for the local dirdata handle : %llu on %s.\n"
                     ,__func__
                     ,llu(tree_setattr_op->req->u.tree_setattr.handle_array[i])
                     ,server_name);
        }
        else
        {
           /* Unable to set attributes on a remote dirdata handle */
           gossip_err("%s : CRITICAL : Error setting attributes for remote dirdata handle : %llu on %s\n"
                     ,__func__
                     ,llu(tree_setattr_op->req->u.tree_setattr.handle_array[i])
                     ,server_name);
        }

        PVFS_strerror_r(tree_setattr_op->resp.u.tree_setattr.status[i],errstr,sizeof(errstr));
        gossip_err("%s : CRITICAL : Error(%d) : %s\n",__func__,tree_setattr_op->resp.u.tree_setattr.status[i],errstr);

        if (js_p->error_code == 0)
        {
           js_p->error_code = tree_setattr_op->resp.u.tree_setattr.status[i];
        }
    }/*end for*/


    PINT_free_object_attr(&tree_setattr_op->req->u.tree_setattr.attr);
    PINT_cleanup_capability(&tree_setattr_op->req->capability);

    if ( tree_setattr_op->resp.u.tree_setattr.status )
    {
       free(tree_setattr_op->resp.u.tree_setattr.status);
    }

    free(tree_setattr_op->req);
    free(tree_setattr_op);

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_create_root_dir_write_keyval_to_meta_handle(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr;
    int ret = -1;
    job_id_t j_id;

    /* total 3 keyvals, PVFS_DIST_DIR_ATTR, PVFS_DIRDATA_BITMAP, PVFS_DIRDATA_HANDLES */
    int keyval_count = 3;

    /* !!!! this is to set meta handle keyval,
     * use dist_dir_attr in s_op->attr 
     */
    attr = &s_op->attr;

    s_op->key_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->key_a)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->val_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->val_a)
    {
        free(s_op->key_a);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    memset(s_op->val_a, 0, sizeof(PVFS_ds_keyval) * keyval_count);
    memset(s_op->key_a, 0, sizeof(PVFS_ds_keyval) * keyval_count);

    s_op->key_a[0].buffer = Trove_Common_Keys[DIST_DIR_ATTR_KEY].key;
    s_op->key_a[0].buffer_sz = Trove_Common_Keys[DIST_DIR_ATTR_KEY].size;

    s_op->val_a[0].buffer = &attr->dist_dir_attr;
    s_op->val_a[0].buffer_sz =
         sizeof(attr->dist_dir_attr);

    s_op->key_a[1].buffer = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].key;
    s_op->key_a[1].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].size;

    s_op->val_a[1].buffer_sz =
        attr->dist_dir_attr.bitmap_size * 
        sizeof(PVFS_dist_dir_bitmap_basetype);
    s_op->val_a[1].buffer = attr->dist_dir_bitmap;

    s_op->key_a[2].buffer = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].key;
    s_op->key_a[2].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].size;

    s_op->val_a[2].buffer = attr->dirdata_handles;
    s_op->val_a[2].buffer_sz = attr->dist_dir_attr.num_servers * 
        sizeof(*attr->dirdata_handles);

    gossip_debug(GOSSIP_SERVER_DEBUG, 
            "  writing dist-dir-struct keyvals for meta handle: %llu "
            "\t with server_no=%d and branch_level=%d \n", 
            llu(s_op->target_handle),
            attr->dist_dir_attr.server_no,
            attr->dist_dir_attr.branch_level);


    ret = job_trove_keyval_write_list(
            s_op->target_fs_id,
            s_op->target_handle, /* meta handle */
            s_op->key_a, s_op->val_a,
            keyval_count, TROVE_SYNC, NULL, smcb,
            0, js_p, &j_id, server_job_context,
            NULL);

    return ret;
}

static PINT_sm_action mgmt_create_root_dir_write_keyval_to_dirdata_handle(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr;
    int ret = -1;
    job_id_t j_id;
    int keyval_count = 3;

    attr = &s_op->attr;

    gossip_debug(GOSSIP_SERVER_DEBUG, 
            "  writing dist-dir-struct keyvals for dirdata handle: %llu "
            "\t with server_no=%d and branch_level=%d \n", 
            llu(s_op->attr.dirdata_handles[0]),
            attr->dist_dir_attr.server_no,
            attr->dist_dir_attr.branch_level);


    ret = job_trove_keyval_write_list(
            s_op->target_fs_id,
            s_op->attr.dirdata_handles[0], /* dirdata handle */
            s_op->key_a, s_op->val_a,
            keyval_count, TROVE_SYNC, NULL, smcb,
            0, js_p, &j_id, server_job_context,
            NULL);

    return ret;
}

static PINT_sm_action mgmt_create_root_dir_mkdir_lost_and_found_setup_msgpair(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_sys_attr sys_attr;
    PVFS_sys_layout layout;
    int ret = -PVFS_EINVAL;
    PVFS_handle_extent_array meta_handle_extent_array;
    server_configuration_s *config = get_server_config_struct();
    char server_name[1024];
    PVFS_BMI_addr_t svr_addr;

    js_p->error_code = 0;

    memset(&sys_attr, 0, sizeof(sys_attr));
    sys_attr.owner = getuid();
    sys_attr.group = getgid();
    sys_attr.perms = 0777;
    sys_attr.mask = (PVFS_ATTR_SYS_ALL_SETABLE);
    sys_attr.objtype = PVFS_TYPE_DIRECTORY;

    memset(&layout, 0, sizeof(layout));
    layout.algorithm = PVFS_SYS_LAYOUT_ROUND_ROBIN;

    gossip_debug(GOSSIP_SERVER_DEBUG," mgmt_create_root_dir: posting mkdir req for lost+found dir.\n ");

    gossip_err("%s:capability currently in s_op->u.mgmt_create_root_dir.capability\n",__func__);
    PINT_debug_capability(&s_op->u.mgmt_create_root_dir.capability,"mkdir lost+found");

    ret = PINT_cached_config_get_next_meta(
        s_op->target_fs_id,
        &svr_addr, &meta_handle_extent_array);

    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    PINT_cached_config_get_server_name(server_name, 1024,
            meta_handle_extent_array.extent_array[0].first, s_op->target_fs_id);
    if (! strcmp(server_name, config->host_id))
    {   /* local */
        struct PVFS_server_req *mkdir_req = NULL;
        struct PINT_server_op *mkdir_op = NULL;

        mkdir_req = malloc(sizeof(struct PVFS_server_req));
        if (! mkdir_req)
        {
            gossip_err("Unable to allocate mkdir_req\n");
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        memset(mkdir_req, 0, sizeof(*mkdir_req));

        PINT_SERVREQ_MKDIR_FILL(
            *mkdir_req,
            s_op->u.mgmt_create_root_dir.capability,
            s_op->u.mgmt_create_root_dir.credential,
            s_op->target_fs_id,
            meta_handle_extent_array,
            sys_attr,
            s_op->attr.dist_dir_attr.num_servers,
            s_op->attr.dist_dir_attr.num_servers,
            s_op->attr.dist_dir_attr.split_size,
            layout,
            NULL);

        mkdir_op = malloc(sizeof(struct PINT_server_op));
        if (! mkdir_op)
        {
            gossip_err("Unable to allocate mkdir_op\n");
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        memset(mkdir_op, 0, sizeof(*mkdir_op));
        mkdir_op->req = mkdir_req;
        mkdir_op->op = PVFS_SERV_MKDIR;
        mkdir_op->addr = svr_addr;

        PINT_sm_push_frame(smcb, LOCAL_OPERATION, mkdir_op);
        js_p->error_code = LOCAL_OPERATION;
    }
    else
    {   /* remote */
        PINT_sm_msgpair_state *msg_p = NULL;

        PINT_msgpair_init(&s_op->msgarray_op);
        msg_p = &s_op->msgarray_op.msgpair;
        PINT_serv_init_msgarray_params(s_op, s_op->target_fs_id);

        PINT_SERVREQ_MKDIR_FILL(
            msg_p->req,
            s_op->u.mgmt_create_root_dir.capability,
            s_op->u.mgmt_create_root_dir.credential,
            s_op->target_fs_id,
            meta_handle_extent_array,
            sys_attr,
            s_op->attr.dist_dir_attr.num_servers,
            s_op->attr.dist_dir_attr.num_servers,
            s_op->attr.dist_dir_attr.split_size,
            layout,
            NULL);

        msg_p->fs_id = s_op->target_fs_id;
        msg_p->handle = meta_handle_extent_array.extent_array[0].first;
        msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
        msg_p->comp_fn = mkdir_lost_and_found_comp_fn;

        ret = PINT_cached_config_map_to_server(&msg_p->svr_addr, msg_p->handle, msg_p->fs_id);
        if (ret)
        {
            gossip_err("Failed to map server address\n");
            js_p->error_code = ret;
            return SM_ACTION_COMPLETE;
        }

        PINT_sm_push_frame(smcb, REMOTE_OPERATION, &s_op->msgarray_op);
        js_p->error_code = REMOTE_OPERATION;
    }
    return SM_ACTION_COMPLETE;
}

static int mkdir_lost_and_found_comp_fn(void *v_p,
                             struct PVFS_server_resp *resp_p,
                             int index)
{
    PINT_smcb *smcb = v_p;
    PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM);
    
    gossip_debug(GOSSIP_SERVER_DEBUG, "mkdir_lost_and_found_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_MKDIR);

    if (resp_p->status != 0)
    {
	return resp_p->status;
    }

    PINT_debug_capability(&resp_p->u.mkdir.capability,"mkdir_lost_and_found_comp_fn");

    /* otherwise, just stash the newly created meta handle */
    s_op->u.mgmt_create_root_dir.lost_and_found_handle = resp_p->u.mkdir.handle;

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "*** Got newly created dir handle %llu for lost+found dir.\n",
        llu(s_op->u.mgmt_create_root_dir.lost_and_found_handle));

    return 0;
}

static PINT_sm_action mgmt_create_root_dir_remote_mkdir_lost_and_found_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    char errstr[256]={0};
    char server_name[256]={0};

    if (js_p->error_code)
    {
        PINT_cached_config_get_server_name(server_name
                                          ,sizeof(server_name)
                                          ,s_op->msgarray_op.msgpair.handle
                                          ,s_op->target_fs_id);
        PVFS_strerror_r(js_p->error_code, errstr, sizeof(errstr));
        gossip_err("WARNING:  Unable to create the directory object for lost+found on remote server(%s): %s\n"
                  ,server_name
                  ,errstr);
        gossip_err("To manually create the directory as the root user:  mkdir -m 777 <mountpoint>/lost+found\n");
        js_p->error_code = CLEANUP;
        s_op->u.mgmt_create_root_dir.lost_and_found_handle = 0;
    }
        
    /*cleanup msgpair(s) */
    PINT_msgpairarray_destroy(&s_op->msgarray_op);

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_create_root_dir_local_mkdir_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *mkdir_op = NULL;
    struct PINT_server_op *s_op = NULL;
    int task_id = 0;
    int remaining;

    mkdir_op = PINT_sm_pop_frame(smcb, &task_id, &js_p->error_code, &remaining);
    s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_err("Error code sent back from mkdir request: %d\n",js_p->error_code);

#if 0
    if (js_p->error_code == 0)
    {
        js_p->error_code = -PVFS_ENOMEM;
        gossip_err("Setting error code to %d for testing.\n",js_p->error_code);
    }
#endif

    if (js_p->error_code)
    {
        char errstr[256];
        PVFS_strerror_r(js_p->error_code, errstr, sizeof(errstr));
        gossip_err("WARNING:  Unable to create the directory object for lost+found on this host: %s\n",errstr);
        gossip_err("To manually create the directory as root:  mkdir -m 777 <mountpoint>/lost+found\n");
        js_p->error_code = CLEANUP;
        s_op->u.mgmt_create_root_dir.lost_and_found_handle = 0;
    }
    else
    {
        /* Save the newly created meta handle */
        s_op->u.mgmt_create_root_dir.lost_and_found_handle = mkdir_op->resp.u.mkdir.handle;
    }


    /* Clean up memory that was allocated by the local-mkdir states. */
    mkdir_free(mkdir_op);
    PINT_cleanup_capability(&mkdir_op->req->capability);

    free(mkdir_op->req);
    free(mkdir_op);

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_create_root_dir_crdirent_lost_and_found_setup_msgpair(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    server_configuration_s *config = get_server_config_struct();
    char server_name[1024];
    PVFS_dist_dir_hash_type dirdata_hash;
    int dirdata_server_index;

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "mgmt-create-root-dir state: crdirent_lost_and_found_setup_msgpair\n");

    js_p->error_code = 0;
    
    /* find the hash value and the dist dir bucket */
    dirdata_hash = PINT_encrypt_dirdata(lost_and_found_string);
    gossip_debug(GOSSIP_SERVER_DEBUG, "mgmt-create-root-dir: encrypt dirent %s into hash value %llu.\n",
            lost_and_found_string,
            llu(dirdata_hash));

    dirdata_server_index = 
        PINT_find_dist_dir_bucket(dirdata_hash,
            &s_op->attr.dist_dir_attr,
            s_op->attr.dist_dir_bitmap);
    gossip_debug(GOSSIP_SERVER_DEBUG, "mgmt-create-root-dir: selecting bucket No.%d from dist_dir_bitmap.\n",
            dirdata_server_index);

    PINT_cached_config_get_server_name(server_name, 1024,
            s_op->attr.dirdata_handles[dirdata_server_index], s_op->target_fs_id);
    if (! strcmp(server_name, config->host_id))
    {   /* local */
        struct PVFS_server_req *crdirent_req = NULL;
        struct PINT_server_op *crdirent_op = NULL;

        crdirent_req = malloc(sizeof(struct PVFS_server_req));
        if (! crdirent_req)
        {
            gossip_err("Unable to allocate crdirent_req\n");
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        memset(crdirent_req, 0, sizeof(*crdirent_req));

        PINT_SERVREQ_CRDIRENT_FILL(
            *crdirent_req,
            s_op->u.mgmt_create_root_dir.capability,
            s_op->u.mgmt_create_root_dir.credential,
            lost_and_found_string,
            s_op->u.mgmt_create_root_dir.lost_and_found_handle,
            s_op->target_handle,
            s_op->attr.dirdata_handles[dirdata_server_index],
            s_op->target_fs_id,
            NULL);

        crdirent_op = malloc(sizeof(struct PINT_server_op));
        if (! crdirent_op)
        {
            gossip_err("Unable to allocate crdirent_op\n");
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        memset(crdirent_op, 0, sizeof(*crdirent_op));
        crdirent_op->req = crdirent_req;
        crdirent_op->op = PVFS_SERV_CRDIRENT;
        crdirent_op->target_fs_id = s_op->target_fs_id;
        PINT_sm_push_frame(smcb, LOCAL_OPERATION, crdirent_op);
        js_p->error_code = LOCAL_OPERATION;
    }
    else
    {   /* remote */
        PINT_sm_msgpair_state *msg_p = NULL;
        int num_handles;
        PVFS_handle *handle_array = NULL;

        /* Update capability to send with request. */
        /* first, free the one we have already been using */
        PINT_cleanup_capability(&s_op->u.mgmt_create_root_dir.capability);

        /* create new handle array with target handle and dirdata handles */
        num_handles = s_op->attr.dist_dir_attr.num_servers + 1;
        handle_array = (PVFS_handle *) malloc(num_handles * sizeof(PVFS_handle));
        if (handle_array == NULL)
        {
            gossip_err("mgmt-create-root-dir: out of memory in %s\n", __func__);
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
        handle_array[0] = s_op->target_handle;
        memcpy((handle_array + 1),
               s_op->attr.dirdata_handles,
               s_op->attr.dist_dir_attr.num_servers * sizeof(PVFS_handle));

        /* create new capability -- note that handle_array will be freed by 
           PINT_cleanup_capability when the SM completes */
        ret = PINT_server_to_server_capability(&s_op->u.mgmt_create_root_dir.capability, 
                                               s_op->target_fs_id,
                                               num_handles,
                                               handle_array);
        if (ret != 0)
        {
            gossip_err("mgmt-create-root-dir: unable to create server-to-server "
                       "capability in %s\n", __func__);
            js_p->error_code = -PVFS_EACCES;
            return SM_ACTION_COMPLETE;
        }

        gossip_debug(GOSSIP_SERVER_DEBUG," mgmt-create-root-dir: posting crdirent req\n");

        gossip_debug(GOSSIP_SERVER_DEBUG, "hooking dirent %s (%llu) under "
                     "parent handle %llu, dirdata_handle %llu with server_no=%d\n",
                     lost_and_found_string,
                     llu(s_op->u.mgmt_create_root_dir.lost_and_found_handle),
                     llu(s_op->target_handle),
                     llu(s_op->attr.dirdata_handles[dirdata_server_index]),
                     dirdata_server_index);

        PINT_msgpair_init(&s_op->msgarray_op);
        msg_p = &s_op->msgarray_op.msgpair;
        PINT_serv_init_msgarray_params(s_op, s_op->target_fs_id);

        PINT_SERVREQ_CRDIRENT_FILL(
            msg_p->req,
            s_op->u.mgmt_create_root_dir.capability,
            s_op->u.mgmt_create_root_dir.credential,
            lost_and_found_string,
            s_op->u.mgmt_create_root_dir.lost_and_found_handle,
            s_op->target_handle,
            s_op->attr.dirdata_handles[dirdata_server_index],
            s_op->target_fs_id,
            NULL);

        msg_p->fs_id = s_op->target_fs_id;
        /* send to dirdata server */
        msg_p->handle = 
            s_op->attr.dirdata_handles[dirdata_server_index];
        msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
        msg_p->comp_fn = crdirent_lost_and_found_comp_fn;

        ret = PINT_cached_config_map_to_server(
            &msg_p->svr_addr, msg_p->handle,
            s_op->target_fs_id);

        if (ret)
        {
            gossip_err("Failed to map dirdata server address\n");
            js_p->error_code = ret;
            return SM_ACTION_COMPLETE;
        }

        PINT_sm_push_frame(smcb, REMOTE_OPERATION, &s_op->msgarray_op);
        js_p->error_code = REMOTE_OPERATION;
    }
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_create_root_dir_local_crdirent_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *crdirent_op = NULL;
    int task_id = 0;
    int remaining;
    int i;

    crdirent_op = PINT_sm_pop_frame(smcb, &task_id, &js_p->error_code, &remaining);

    gossip_err("Error code returned from crdirent:%d\n",js_p->error_code);

    /* free memory created in pvfs2_crdirent_work_sm */
    if (crdirent_op->free_val)
    {
       free(crdirent_op->val.buffer);
    }

    for (i=0; i<crdirent_op->keyval_count; i++)
    {
       if (crdirent_op->val_a && crdirent_op->val_a[i].buffer && crdirent_op->free_val)
       {
          free(crdirent_op->val_a[i].buffer);
       }
    }

    if (crdirent_op->val_a)
    {
        free(crdirent_op->val_a);
    }
    if (crdirent_op->key_a)
    {
        free(crdirent_op->key_a);
    }
    if (crdirent_op->error_a)
    {
       free(crdirent_op->error_a);
    }

    PINT_free_object_attr(&crdirent_op->attr);
    PINT_free_object_attr(&crdirent_op->u.crdirent.saved_attr);

#if 0
    if (js_p->error_code == 0)
    {
       js_p->error_code = -PVFS_ENOMEM;
       gossip_err("Error code modified to %d for testing\n",js_p->error_code);
    }
#endif

    /* free credential copied into crdirent request */
    PINT_cleanup_capability(&crdirent_op->req->capability);

    free(crdirent_op->req);
    free(crdirent_op);

    if (js_p->error_code)
    {
        char errstr[256];
        PVFS_strerror_r(js_p->error_code, errstr, sizeof(errstr));
        gossip_err("WARNING:  Unable to create the directory entry for lost+found on this host: %s\n",errstr);
        gossip_err("To manually create the directory as root:  mkdir -m 777 <mountpoint>/lost+found\n");
        js_p->error_code = CLEANUP;
    }
    return SM_ACTION_COMPLETE;
}

static int crdirent_lost_and_found_comp_fn(void *v_p,
                                  struct PVFS_server_resp *resp_p,
                                  int index)
{
    gossip_debug(GOSSIP_SERVER_DEBUG, "%s: enter\n", __func__);

    assert(resp_p->op == PVFS_SERV_CRDIRENT);

#if 1
    resp_p->status = -PVFS_ENOMEM;
#endif
    return resp_p->status;
}

static PINT_sm_action mgmt_create_root_dir_delete_lost_and_found_handle_setup_msgpair(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    server_configuration_s *config = get_server_config_struct();
    char server_name[1024];
    char errstr[256]={0};
    PINT_sm_msgpair_state *msg_p = NULL;
    struct PVFS_server_req *remove_req = NULL;
    struct PINT_server_op *remove_op = NULL;
    PVFS_hint hints = NULL;
    PVFS_capability capability = {0};
    PVFS_handle *dir_handle = NULL;

    /* Remove the directory object since we bombed on creating a directory
     * entry with it!
     */

    gossip_debug(GOSSIP_SERVER_DEBUG, "mgmt-create-root-dir state: "
                 "delete_lost_and_found_handle_setup_msgpair_array\n");
    gossip_debug(GOSSIP_SERVER_DEBUG, " Preparing to remove "
                 "lost+found directory handle %llu\n",
                 llu(s_op->u.mgmt_create_root_dir.lost_and_found_handle));

    PINT_cached_config_get_server_name(server_name, 1024,
        s_op->u.mgmt_create_root_dir.lost_and_found_handle, s_op->target_fs_id);

    PVFS_strerror_r(js_p->error_code, errstr, sizeof(errstr));

    gossip_err("Error creating a directory entry for lost+found on server %s : %s\n"
              ,server_name
              ,errstr);
    gossip_err("Removing directory object.\n");

    js_p->error_code = 0;



    if (! strcmp(server_name, config->host_id))
    {   /* local */

        remove_req = malloc(sizeof(struct PVFS_server_req));
        if (! remove_req)
        {
            gossip_err("Unable to allocate remove_req\n");
            js_p->error_code = -PVFS_ENOMEM;
            goto error_cleanup;
        }
        memset(remove_req, 0, sizeof(*remove_req));

        PINT_SERVREQ_REMOVE_FILL(
            *remove_req,
            s_op->u.mgmt_create_root_dir.capability,
            s_op->u.mgmt_create_root_dir.credential,
            s_op->target_fs_id,
            s_op->u.mgmt_create_root_dir.lost_and_found_handle,
            NULL);

        remove_op = malloc(sizeof(struct PINT_server_op));
        if (! remove_op)
        {
            gossip_err("Unable to allocate remove_op\n");
            js_p->error_code = -PVFS_ENOMEM;
            goto error_cleanup;
        }
        memset(remove_op, 0, sizeof(*remove_op));
        remove_op->req = remove_req;
        remove_op->op = PVFS_SERV_REMOVE;
        PINT_sm_push_frame(smcb, LOCAL_OPERATION, remove_op);
        js_p->error_code = LOCAL_OPERATION;
    }
    else
    {   /* remote */

        /* hint with lost+found handle is needed, if executing remove.sm with
         * the prelude, as is done in the remote case.
         */
        hints = calloc(1,sizeof(*hints));
        if (!hints)
        {
           gossip_err("%s:Error allocating memory for hints.\n",__func__);
           js_p->error_code = -PVFS_ENOMEM;
           return SM_ACTION_COMPLETE;
        }
        PVFS_hint_add(&hints
                     ,PVFS_HINT_HANDLE_NAME
                     ,sizeof(PVFS_handle)
                     ,&s_op->u.mgmt_create_root_dir.lost_and_found_handle);
 
        dir_handle = calloc(1,sizeof(*dir_handle));
        if ( !dir_handle )
        {
           gossip_err("%s:Error allocating memory for dir_handle.\n",__func__);
           js_p->error_code = -PVFS_ENOMEM;
           /* to do: cleanup hints */
           return SM_ACTION_COMPLETE;
        }
        *dir_handle = s_op->u.mgmt_create_root_dir.lost_and_found_handle;
        ret = PINT_server_to_server_capability(&capability
                                              ,s_op->target_fs_id
                                              ,1
                                              ,dir_handle);
        PINT_msgpair_init(&s_op->msgarray_op);
        msg_p = &s_op->msgarray_op.msgpair;
        PINT_serv_init_msgarray_params(s_op, s_op->target_fs_id);

        PINT_SERVREQ_REMOVE_FILL(
            msg_p->req,
            capability,
            s_op->u.mgmt_create_root_dir.credential,
            s_op->target_fs_id,
            s_op->u.mgmt_create_root_dir.lost_and_found_handle,
            hints);

        msg_p->fs_id = s_op->target_fs_id;
        msg_p->handle = 
            s_op->u.mgmt_create_root_dir.lost_and_found_handle;
        msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
        msg_p->comp_fn = delete_lost_and_found_handle_comp_fn;

        ret = PINT_cached_config_map_to_server(
            &msg_p->svr_addr, 
            s_op->u.mgmt_create_root_dir.lost_and_found_handle,
            s_op->target_fs_id);

        if (ret)
        {
            gossip_err("Failed to map meta server address\n");
            js_p->error_code = ret;
            goto error_cleanup;
        }

        PINT_sm_push_frame(smcb, REMOTE_OPERATION, &s_op->msgarray_op);
        js_p->error_code = REMOTE_OPERATION;
    }

    PINT_cleanup_capability(&capability);

    return SM_ACTION_COMPLETE;

error_cleanup:
    if (remove_req)
    {
       PINT_cleanup_capability(&remove_req->capability);
       free(remove_req);
    }

    if (remove_op)
    {
       free(remove_op);
    }

    if (msg_p)
    {
       PINT_cleanup_capability(&msg_p->req.capability);
    }

    return SM_ACTION_COMPLETE;
}

static int delete_lost_and_found_handle_comp_fn(void *v_p,
                                       struct PVFS_server_resp *resp_p,
                                       int index)
{
    gossip_debug(GOSSIP_SERVER_DEBUG, "delete_lost_and_found_handle_comp_fn...status(%d)\n",resp_p->status);

    assert(resp_p->op == PVFS_SERV_REMOVE);

#if 0
    resp_p->status = -PVFS_ENOMEM;
#endif

    return resp_p->status;
}

static PINT_sm_action mgmt_create_root_dir_remote_delete_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    char errstr[256]={0};
    char server_name[1024]={0};
    int ret;

    PVFS_hint_free(s_op->msgarray_op.msgpair.req.hints);

    if (js_p->error_code != 0)
    {
       ret = PINT_cached_config_get_server_name(server_name,
                                                sizeof(server_name),
                                                s_op->msgarray_op.msgpair.req.u.remove.handle,
                                                s_op->msgarray_op.msgpair.req.u.remove.fs_id);
       if (ret != 0)
       {
          PVFS_strerror_r(ret, errstr, sizeof(errstr));
          gossip_err("%s:Error locating server name for handle(%llu)\n",
                     __func__,
                     llu(s_op->msgarray_op.msgpair.req.u.remove.handle));
          gossip_err("%s:Error(%d):%s\n",__func__,ret,errstr);
          gossip_err("%s:Directory object for lost+found not deleted.\n",__func__);
          js_p->error_code = CLEANUP;
          return SM_ACTION_COMPLETE;
       }

       PVFS_strerror_r(js_p->error_code,errstr,sizeof(errstr));

       gossip_err("%s: Error deleting directory object(%llu) for lost+found on server %s : %s\n"
                 ,__func__,llu(s_op->msgarray_op.msgpair.req.u.remove.handle),server_name,errstr);
       js_p->error_code = CLEANUP;
    }

   return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_create_root_dir_local_delete_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *remove_op = NULL;
    int task_id = 0;
    int remaining;

    remove_op = PINT_sm_pop_frame(smcb, &task_id, &js_p->error_code, &remaining);
    PINT_cleanup_capability(&remove_op->req->capability);
    free(remove_op->req);
    free(remove_op);

    if (js_p->error_code)
    {
        char errstr[256];
        PVFS_strerror_r(js_p->error_code, errstr, sizeof(errstr));
        gossip_err("WARNING:  Unable to remove the directory object for lost+found on this host: %s\n",errstr);
        js_p->error_code = CLEANUP;
    }
    return SM_ACTION_COMPLETE;
}

/*
 * Function: mgmt_create_root_dir_cleanup_noreq
 *
 * Params:   server_op *b,
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *
 */
static PINT_sm_action mgmt_create_root_dir_cleanup_noreq( struct PINT_smcb *smcb, 
        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    assert(s_op);


    switch(js_p->error_code)
    {
       case 0:
       {
           break;
       }
       case CLEANUP:
       {
           /* We use CLEANUP to signal that error information has already been
            * posted in prior states. 
            */
           js_p->error_code=0;
           break;
       }
       default:
       {
           /* All other errors are critical to the creation of the root directory */
           char errstr[256];
           PVFS_strerror_r(js_p->error_code, errstr, sizeof(errstr));
           gossip_err("%s:CRITICAL ERROR: unable to create the root directory due to error: %s\n", 
                      __func__,errstr);
           gossip_err("%s:CRITICAL ERROR: Your FS is in an inconsistent state.\n",__func__);
           gossip_err("%sCRITICAL ERROR: Recreate your storage area and restart your servers.\n",__func__);
           break;   
       }
    }

    if(s_op->key_a)
    {
        free(s_op->key_a);
    }

    if(s_op->val_a)
    {
        free(s_op->val_a);
    }

    PINT_free_object_attr(&s_op->attr);

    if(s_op->u.mgmt_create_root_dir.handle_array_local)
    {
        free(s_op->u.mgmt_create_root_dir.handle_array_local);
    }

    if(s_op->u.mgmt_create_root_dir.handle_array_remote)
    {
        free(s_op->u.mgmt_create_root_dir.handle_array_remote);
    }

    PINT_cleanup_credential(&s_op->u.mgmt_create_root_dir.credential);
    PINT_cleanup_capability(&s_op->u.mgmt_create_root_dir.capability);

    return(server_state_machine_complete_noreq(smcb));
}


PINT_GET_OBJECT_REF_DEFINE(mgmt_create_root_dir);

static int perm_mgmt_create_root_dir(PINT_server_op *s_op)
{
    int ret;

    /* permission not required */
    ret = 0;

    return ret;
}

struct PINT_server_req_params pvfs2_mgmt_create_root_dir_params =
{
    .string_name = "mgmt-create-root-dir",
    .get_object_ref = PINT_get_object_ref_mgmt_create_root_dir,
    .perm = perm_mgmt_create_root_dir,
    .access_type = PINT_server_req_modify,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .state_machine = &pvfs2_mgmt_create_root_dir_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

