/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "pvfs2-server.h"
#include "pvfs2-attr.h"

enum {
    STATE_METAFILE = 7,
};

static int setattr_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int setattr_getobj_attribs(PINT_server_op *s_op, job_status_s* js_p);
static int setattr_setobj_attribs(PINT_server_op *s_op, job_status_s* js_p);
static int setattr_write_metafile_datafile_handles_if_required(
    PINT_server_op *s_op, job_status_s* js_p);
static int setattr_write_metafile_distribution_if_required(
    PINT_server_op *s_op, job_status_s* js_p);
static int setattr_verify_attribs(PINT_server_op *s_op, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];
extern job_context_id PINT_server_job_context;

/* TODO: need error transition out of prelude state */

%%

machine pvfs2_set_attr_sm(prelude,
			  cleanup,
			  getobj_attrib,
			  verify_attribs,
			  write_metafile_datafile_handles_if_required,
			  write_metafile_distribution_if_required,
			  setobj_attrib,
			  final_response)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		default => getobj_attrib;
	}

	state getobj_attrib
	{
		run setattr_getobj_attribs;
		default => verify_attribs;
	}

	state verify_attribs
	{
		run setattr_verify_attribs;
		STATE_METAFILE => write_metafile_datafile_handles_if_required;
		success        => setobj_attrib;
		default        => final_response;
	}

	state write_metafile_datafile_handles_if_required
        {
		run setattr_write_metafile_datafile_handles_if_required;
		success => write_metafile_distribution_if_required;
		default => final_response;
	}

	state write_metafile_distribution_if_required
        {
		run setattr_write_metafile_distribution_if_required;
		success => setobj_attrib;
		default => final_response;
	}

	state setobj_attrib
	{
		run setattr_setobj_attribs;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run setattr_cleanup;
		default => prelude;
	}
}

%%


/*
 * Function: setattr_getobj_attrib
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: 
 */

static int setattr_getobj_attribs(PINT_server_op *s_op, job_status_s* js_p)
{

    int ret=0;
    job_id_t j_id;
    PVFS_object_attr *a_p = &s_op->req->u.setattr.attr;

    gossip_debug(SERVER_DEBUG,
		 "  attributes from request = (owner = %d, group = %d, perms = %o, type = %d)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype);

    gossip_debug(SERVER_DEBUG,
		 "  setting attributes for fs_id = 0x%x, handle = 0x%08Lx\n",
		 s_op->req->u.setattr.fs_id,
		 s_op->req->u.setattr.handle);
    
    gossip_debug(SERVER_DEBUG, "setattr state: getobj_attribs\n");

    s_op->key.buffer    = Trove_Common_Keys[METADATA_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METADATA_KEY].size;

    /*
      use scratch attr object space when retrieving the
      attr to avoid dynamic allocation
    */
    s_op->val.buffer = (void *)&s_op->u.setattr.attr;
    s_op->val.buffer_sz = sizeof(PVFS_object_attr);

    gossip_debug(SERVER_DEBUG,
		 "  reading attributes (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.setattr.fs_id,
		 s_op->req->u.setattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_read(s_op->req->u.setattr.fs_id,
					 s_op->req->u.setattr.handle,
					 &(s_op->key),
					 &(s_op->val),
					 0,
					 NULL,
					 s_op,
					 js_p,
					 &j_id,
					 PINT_server_job_context);
    return(ret);
}


/*
 * Function: setattr_verify_attribs
 *
 * Notes:
 * - attributes were placed in s_op->val.buffer by setattr_getobj_attribs()
 *   - we free this buffer here rather than later on
 */
static int setattr_verify_attribs(PINT_server_op *s_op, job_status_s* js_p)
{
    PVFS_object_attr *a_p, *req_a_p;

    gossip_debug(SERVER_DEBUG, "setattr state: verify_attribs\n");

    a_p = (PVFS_object_attr *)&s_op->u.setattr.attr;
    req_a_p = (PVFS_object_attr *)&s_op->req->u.setattr.attr;

    if (js_p->error_code != 0)
    {
	gossip_debug(SERVER_DEBUG, "  previous keyval read had an "
                     "error (new metafile?); data is useless\n");
    }
    else
    {
	gossip_debug(SERVER_DEBUG, "  attrs read from dspace = "
                     "(owner = %d, group = %d, perms = %o, type = %d)\n",
		     a_p->owner,
		     a_p->group,
		     a_p->perms,
		     a_p->objtype);
    }

    if (js_p->error_code == 0)
    {
	gossip_debug(SERVER_DEBUG, "  attrs read from request = "
                     "(owner = %d, group = %d, perms = %o, type = %d)\n",
		     req_a_p->owner,
		     req_a_p->group,
		     req_a_p->perms,
		     req_a_p->objtype);

        /*
          here we're enforcing that no one can change the type of the
          handle/object already stored once it's been set to
          a non-zero value.  (zero is not a valid object type meaning
          that it hasn't been assigned yet)
        */
        if (a_p->objtype &&
            (a_p->objtype != s_op->req->u.setattr.attr.objtype))
        {
            gossip_debug(SERVER_DEBUG, "  handle 0x%08Lx is of type %d "
                         "and cannot be changed to type %d\n",
                         s_op->req->u.setattr.handle,
                         a_p->objtype, s_op->req->u.setattr.attr.objtype);

            /* set an error to bail out of set-attr processing */
            js_p->error_code = -1;
            return 1;
        }
    }

    /* TODO: LOOK AT ATTRIBUTE MASK, SET UP s_op->req->u.setattr.attr for writing
     * in next step
     */

    /* TODO: HANDLE TYPES OTHER THAN METAFILES TOO, SOME DAY... */
    if ((js_p->error_code != 0) &&
        ((req_a_p->objtype == PVFS_TYPE_METAFILE) ||
         (a_p->objtype == PVFS_TYPE_METAFILE)))
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to a metafile\n",
		     s_op->req->u.setattr.handle);
	js_p->error_code = STATE_METAFILE;
    }
    else
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to something other than "
                     "a metafile\n", s_op->req->u.setattr.handle);
	js_p->error_code = 0;
    }
    return 1;
}


/*
 * Function: setattr_setobj_attribs
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: 
 *           
 */
static int setattr_setobj_attribs(PINT_server_op *s_op, job_status_s* js_p)
{

    PVFS_object_attr *a_p;
    int ret=0;
    job_id_t j_id;

    gossip_debug(SERVER_DEBUG, "setattr state: setobj_attribs\n");

    a_p = &s_op->req->u.setattr.attr;

    gossip_debug(SERVER_DEBUG,
		 "  attrs to write = (owner = %d, group = %d, perms = %o, type = %d, atime = %lld, mtime = %lld, ctime = %lld)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype,
		 (long long)a_p->atime,
		 (long long)a_p->mtime,
		 (long long)a_p->ctime);

    /* set up key and value structure for keyval write */
    s_op->key.buffer    = Trove_Common_Keys[METADATA_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METADATA_KEY].size;

    s_op->val.buffer    = &s_op->req->u.setattr.attr;
    s_op->val.buffer_sz = sizeof(struct PVFS_object_attr);

    /* filter out anything besides common attributes before writing */
    s_op->req->u.setattr.attr.mask &= PVFS_ATTR_COMMON_ALL;

    gossip_debug(SERVER_DEBUG,
		 "  writing attributes (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.setattr.fs_id,
		 s_op->req->u.setattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_write(s_op->req->u.setattr.fs_id,
					  s_op->req->u.setattr.handle,
					  &s_op->key,
					  &s_op->val,
					  TROVE_SYNC /* flags */,
					  NULL,
					  s_op,
					  js_p,
					  &j_id,
					  PINT_server_job_context);
    return ret;
}


/*
 * Function: setattr_write_metafile_datafile_handles_if_required
 */
static int setattr_write_metafile_datafile_handles_if_required(
    PINT_server_op *s_op, job_status_s* js_p)
{
    /*PVFS_object_attr *old_attr;*/
    int ret=0;
    job_id_t j_id;

    if (!(s_op->req->u.setattr.attr.mask & PVFS_ATTR_META_DFILES))
    {
        /* if we don't need to write the dfiles, skip them */
        js_p->error_code = 0;
        return 1;
    }

    gossip_debug(SERVER_DEBUG, "setattr state: "
                 "write_metafile_datafile_handles_if_required\n");

    /* we should have at least one datafile... */
    assert(s_op->req->u.setattr.attr.u.meta.dfile_count > 0);

    /* set up key and value structure for keyval write */
    s_op->key.buffer    = Trove_Common_Keys[METAFILE_HANDLES_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_HANDLES_KEY].size;

    gossip_debug(SERVER_DEBUG,
		 "  metafile has %d datafiles associated with it\n",
		 s_op->req->u.setattr.attr.u.meta.dfile_count);

    s_op->val.buffer    = s_op->req->u.setattr.attr.u.meta.dfile_array;
    s_op->val.buffer_sz = s_op->req->u.setattr.attr.u.meta.dfile_count * sizeof(PVFS_handle);

    gossip_debug(SERVER_DEBUG,
		 "  writing datafile handles (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.setattr.fs_id,
		 s_op->req->u.setattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_write(s_op->req->u.setattr.fs_id,
					  s_op->req->u.setattr.handle,
					  &(s_op->key),
					  &(s_op->val),
					  TROVE_SYNC /* flags */,
					  NULL,
					  s_op,
					  js_p,
					  &j_id,
					  PINT_server_job_context);

    return ret;
}

/*
 * Function: setattr_write_metafile_distribution_if_required
 */
static int setattr_write_metafile_distribution_if_required(
    PINT_server_op *s_op, job_status_s* js_p)
{
    /*PVFS_object_attr *old_attr;*/
    int ret=0;
    job_id_t j_id;

    gossip_debug(SERVER_DEBUG, "setattr state: write_metafile_distribution\n");

    if (!(s_op->req->u.setattr.attr.mask & PVFS_ATTR_META_DIST))
    {
        /* if we don't need to fill in the distribution, skip it */
        js_p->error_code = 0;
        return 1;
    }

    /* distribution should take up non-negative space :) */
    assert(s_op->req->u.setattr.attr.u.meta.dist_size >= 0);

    /* set up key and value structure for keyval write */
    s_op->key.buffer    = Trove_Common_Keys[METAFILE_DIST_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_DIST_KEY].size;

    gossip_debug(SERVER_DEBUG,
		 "  metafile distribution size = %d\n",
		 (int)s_op->req->u.setattr.attr.u.meta.dist_size);

    s_op->val.buffer    = s_op->req->u.setattr.attr.u.meta.dist;
    s_op->val.buffer_sz = s_op->req->u.setattr.attr.u.meta.dist_size;

    /* TODO: figure out if we need a different packing mechanism here */
    gossip_err("KLUDGE: storing distribution on disk in network encoded format.\n");
    PINT_Dist_encode(NULL, s_op->req->u.setattr.attr.u.meta.dist);    

    gossip_debug(SERVER_DEBUG,
		 "  writing distribution (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.setattr.fs_id,
		 s_op->req->u.setattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_write(s_op->req->u.setattr.fs_id,
					  s_op->req->u.setattr.handle,
					  &(s_op->key),
					  &(s_op->val),
					  TROVE_SYNC /* flags */,
					  NULL,
					  s_op,
					  js_p,
					  &j_id,
					  PINT_server_job_context);
    return(ret);
}

/*
 * Function: setattr_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static int setattr_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{

    gossip_debug(SERVER_DEBUG, "setattr state: setattr_cleanup\n");
 
    return(PINT_state_machine_complete(s_op));
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */

