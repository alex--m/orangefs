/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "pvfs2-server.h"
#include "pvfs2-attr.h"

enum {
    STATE_METAFILE = 7
};

static int setattr_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int setattr_setobj_attribs(PINT_server_op *s_op, job_status_s* js_p);
static int setattr_write_metafile_datafile_handles_if_required(
    PINT_server_op *s_op, job_status_s* js_p);
static int setattr_write_metafile_distribution_if_required(
    PINT_server_op *s_op, job_status_s* js_p);
static int setattr_verify_attribs(PINT_server_op *s_op, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];
extern job_context_id PINT_server_job_context;

%%

machine pvfs2_set_attr_sm(prelude,
			  cleanup,
			  verify_attribs,
			  write_metafile_datafile_handles_if_required,
			  write_metafile_distribution_if_required,
			  setobj_attrib,
			  final_response)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		success => verify_attribs;
		default => final_response;
	}

	state verify_attribs
	{
		run setattr_verify_attribs;
		STATE_METAFILE => write_metafile_datafile_handles_if_required;
		success        => setobj_attrib;
		default        => final_response;
	}

	state write_metafile_datafile_handles_if_required
        {
		run setattr_write_metafile_datafile_handles_if_required;
		success => write_metafile_distribution_if_required;
		default => final_response;
	}

	state write_metafile_distribution_if_required
        {
		run setattr_write_metafile_distribution_if_required;
		success => setobj_attrib;
		default => final_response;
	}

	state setobj_attrib
	{
		run setattr_setobj_attribs;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run setattr_cleanup;
		default => prelude;
	}
}

%%


/*
 * Function: setattr_verify_attribs
 *
 * Notes:
 * - attributes were placed in s_op->val.buffer by setattr_getobj_attribs()
 *   - we free this buffer here rather than later on
 */
static int setattr_verify_attribs(PINT_server_op *s_op, job_status_s* js_p)
{
    PVFS_object_attr *a_p, *req_a_p;

    PINT_STATE_DEBUG("verify_attribs");

    a_p = &s_op->attr;
    req_a_p = &s_op->req->u.setattr.attr;

    gossip_debug(SERVER_DEBUG, "  attrs read from dspace = "
		 "(owner = %d, group = %d, perms = %o, type = %d)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype);

    gossip_debug(SERVER_DEBUG, "  attrs read from request = "
		 "(owner = %d, group = %d, perms = %o, type = %d)\n",
		 req_a_p->owner,
		 req_a_p->group,
		 req_a_p->perms,
		 req_a_p->objtype);

    /*
      here we're enforcing that no one can change the type of the
      handle/object already stored once it's been set to
      a non-zero value.  (zero is not a valid object type meaning
      that it hasn't been assigned yet)
    */
    if (a_p->objtype &&
	(a_p->objtype != s_op->req->u.setattr.attr.objtype))
    {
	gossip_debug(SERVER_DEBUG, "  handle 0x%08Lx is of type %d "
		     "and cannot be changed to type %d\n",
		     s_op->req->u.setattr.handle,
		     a_p->objtype, s_op->req->u.setattr.attr.objtype);

	/* set an error to bail out of set-attr processing */
	js_p->error_code = -1;
	return 1;
    }

    js_p->error_code = 0;

    if (((req_a_p->objtype == PVFS_TYPE_METAFILE) ||
         (a_p->objtype == PVFS_TYPE_METAFILE)))
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to a metafile\n",
		     s_op->req->u.setattr.handle);

	gossip_debug(SERVER_DEBUG, " ** dspace has dfile count of %d | "
                     "request has dfile count of %d\n",
                     a_p->u.meta.dfile_count, req_a_p->u.meta.dfile_count);
	gossip_debug(SERVER_DEBUG, " ** dspace has dist size of %d | "
                     "request has dist size of %d\n",
                     a_p->u.meta.dist_size, req_a_p->u.meta.dist_size);

        /* copy the dfile count before writing this object */
        if (req_a_p->mask & PVFS_ATTR_META_DFILES)
        {
            gossip_debug(SERVER_DEBUG," *** using dfile_count of %d\n",
                         req_a_p->u.meta.dfile_count);
            a_p->u.meta.dfile_count = req_a_p->u.meta.dfile_count;
        }
        else
        {
            gossip_debug(SERVER_DEBUG," *** ignoring dfile_count of %d\n",
                         req_a_p->u.meta.dfile_count);
        }

        /* copy the dist size before writing this object */
        if (req_a_p->mask & PVFS_ATTR_META_DIST)
        {
            gossip_debug(SERVER_DEBUG," *** using dist_size of %d\n",
                         req_a_p->u.meta.dist_size);
            a_p->u.meta.dist_size = req_a_p->u.meta.dist_size;
        }
        else
        {
            gossip_debug(SERVER_DEBUG," *** ignoring dist_size of %d\n",
                         req_a_p->u.meta.dist_size);
        }
	js_p->error_code = STATE_METAFILE;
    }
    else if (((req_a_p->objtype == PVFS_TYPE_DATAFILE) ||
              (a_p->objtype == PVFS_TYPE_DATAFILE)))
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to a datafile\n",
		     s_op->req->u.setattr.handle);
    }
    else if (((req_a_p->objtype == PVFS_TYPE_DIRECTORY) ||
              (a_p->objtype == PVFS_TYPE_DIRECTORY)))
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to a directory\n",
		     s_op->req->u.setattr.handle);
    }
    else if (((req_a_p->objtype == PVFS_TYPE_SYMLINK) ||
              (a_p->objtype == PVFS_TYPE_SYMLINK)))
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to a symlink\n",
		     s_op->req->u.setattr.handle);
    }
    else if (((req_a_p->objtype == PVFS_TYPE_DIRDATA) ||
              (a_p->objtype == PVFS_TYPE_DIRDATA)))
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to a dirdata object\n",
		     s_op->req->u.setattr.handle);
    }
    else
    {
	gossip_debug(SERVER_DEBUG,
		     "  handle 0x%08Lx refers to something unknown\n",
		     s_op->req->u.setattr.handle);
        assert(0);
    }
    return 1;
}


/*
 * Function: setattr_setobj_attribs
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: 
 *           
 */
static int setattr_setobj_attribs(PINT_server_op *s_op, job_status_s* js_p)
{
    PVFS_object_attr *dspace_a_p;
    PVFS_object_attr *a_p;
    int ret=0;
    job_id_t j_id;

    PINT_STATE_DEBUG("setobj_attribs");

    dspace_a_p = &s_op->attr;
    a_p = &s_op->req->u.setattr.attr;

    /* filter out anything besides common attributes before writing */
    a_p->mask &= PVFS_ATTR_COMMON_ALL;

    gossip_debug(SERVER_DEBUG, " request has dfile_count of %d | dspace has %d\n",
                 s_op->req->u.setattr.attr.u.meta.dfile_count,
                 s_op->attr.u.meta.dfile_count);
    gossip_debug(SERVER_DEBUG, " writing count of %d to disk\n",
                 dspace_a_p->u.meta.dfile_count);

    /*
      we have the attribs stored in the dspace, as well as the
      requested attribs to store.  overwrite the ones that are
      setable and specified by the mask value in the request.
    */
    if (a_p->mask & PVFS_ATTR_COMMON_UID)
        dspace_a_p->owner = a_p->owner;
    if (a_p->mask & PVFS_ATTR_COMMON_GID)
        dspace_a_p->group = a_p->group;
    if (a_p->mask & PVFS_ATTR_COMMON_PERM)
        dspace_a_p->perms = a_p->perms;
    if (a_p->mask & PVFS_ATTR_COMMON_ATIME)
        dspace_a_p->atime = a_p->atime;
    if (a_p->mask & PVFS_ATTR_COMMON_CTIME)
        dspace_a_p->ctime = a_p->ctime;
    if (a_p->mask & PVFS_ATTR_COMMON_MTIME)
        dspace_a_p->mtime = a_p->mtime;
    if (a_p->mask & PVFS_ATTR_COMMON_TYPE)
        dspace_a_p->objtype = a_p->objtype;

    gossip_debug(SERVER_DEBUG,
                 "  attrs to write = (owner = %d, group = %d, "
                 "perms = %o, type = %d, atime = %lld, mtime = %lld, "
                 "ctime = %lld)\n",
		 dspace_a_p->owner,
		 dspace_a_p->group,
		 dspace_a_p->perms,
		 dspace_a_p->objtype,
		 (long long)dspace_a_p->atime,
		 (long long)dspace_a_p->mtime,
		 (long long)dspace_a_p->ctime);

    /* set up key and value structure for keyval write */
    s_op->key.buffer    = Trove_Common_Keys[METADATA_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METADATA_KEY].size;

    s_op->val.buffer    = dspace_a_p;
    s_op->val.buffer_sz = sizeof(struct PVFS_object_attr);

    gossip_debug(SERVER_DEBUG,
		 "  writing attributes (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.setattr.fs_id,
		 s_op->req->u.setattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_write(s_op->req->u.setattr.fs_id,
					  s_op->req->u.setattr.handle,
					  &s_op->key,
					  &s_op->val,
					  TROVE_SYNC /* flags */,
					  NULL,
					  s_op,
					  js_p,
					  &j_id,
					  PINT_server_job_context);
    return ret;
}


/*
 * Function: setattr_write_metafile_datafile_handles_if_required
 */
static int setattr_write_metafile_datafile_handles_if_required(
    PINT_server_op *s_op, job_status_s* js_p)
{
    int ret = 0, dfile_count = 0;
    job_id_t j_id;

    PINT_STATE_DEBUG("write_metafile_datafile_handles_if_needed");

    /* if we don't need to write the dfiles, skip them */
    if (!(s_op->req->u.setattr.attr.mask & PVFS_ATTR_META_DFILES))
    {
        gossip_debug(SERVER_DEBUG, "skipping data handle write\n");
        js_p->error_code = 0;
        return 1;
    }

    gossip_debug(SERVER_DEBUG, " request has dfile_count of %d | dspace has %d\n",
                 s_op->req->u.setattr.attr.u.meta.dfile_count,
                 s_op->attr.u.meta.dfile_count);

    /* verify that the requested dfile count is sane */
    dfile_count = s_op->req->u.setattr.attr.u.meta.dfile_count;
    if ((dfile_count < 1) || (dfile_count > PVFS_REQ_LIMIT_DFILE_COUNT))
    {
        gossip_err("The requested dfile count of %d is invalid; "
                   "aborting operation.\n", dfile_count);
	js_p->error_code = -PVFS_EOVERFLOW;
        assert(0);
	return 1;
    }

    /* set up key and value structure for keyval write */
    s_op->key.buffer    = Trove_Common_Keys[METAFILE_HANDLES_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_HANDLES_KEY].size;

    gossip_debug(SERVER_DEBUG,
		 "  metafile has %d datafiles associated with it\n",
		 s_op->req->u.setattr.attr.u.meta.dfile_count);

    s_op->val.buffer    = s_op->req->u.setattr.attr.u.meta.dfile_array;
    s_op->val.buffer_sz = dfile_count * sizeof(PVFS_handle);

    gossip_debug(SERVER_DEBUG,
		 "  writing datafile handles (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.setattr.fs_id,
		 s_op->req->u.setattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_write(s_op->req->u.setattr.fs_id,
                                 s_op->req->u.setattr.handle,
                                 &(s_op->key),
                                 &(s_op->val),
                                 TROVE_SYNC /* flags */,
                                 NULL,
                                 s_op,
                                 js_p,
                                 &j_id,
                                 PINT_server_job_context);

    return ret;
}

/*
 * Function: setattr_write_metafile_distribution_if_required
 */
static int setattr_write_metafile_distribution_if_required(
    PINT_server_op *s_op, job_status_s* js_p)
{
    /*PVFS_object_attr *old_attr;*/
    int ret=0;
    job_id_t j_id;

    PINT_STATE_DEBUG("write_metafile_distribution_if_required");

    /* if we don't need to fill in the distribution, skip it */
    if (!(s_op->req->u.setattr.attr.mask & PVFS_ATTR_META_DIST))
    {
        gossip_debug(SERVER_DEBUG, "skipping distribution write\n");
        js_p->error_code = 0;
        return 1;
    }

    /* distribution should take up non-negative space :) */
    assert(s_op->req->u.setattr.attr.u.meta.dist_size >= 0);

    /* set up key and value structure for keyval write */
    s_op->key.buffer    = Trove_Common_Keys[METAFILE_DIST_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_DIST_KEY].size;

    gossip_debug(SERVER_DEBUG,
		 "  metafile distribution size = %d\n",
		 (int)s_op->req->u.setattr.attr.u.meta.dist_size);

    s_op->val.buffer    = s_op->req->u.setattr.attr.u.meta.dist;
    s_op->val.buffer_sz = s_op->req->u.setattr.attr.u.meta.dist_size;

    /* TODO: figure out if we need a different packing mechanism here */
    gossip_err("KLUDGE: storing distribution on disk in network encoded format.\n");
    PINT_Dist_encode(NULL, s_op->req->u.setattr.attr.u.meta.dist);    

    gossip_debug(SERVER_DEBUG,
		 "  writing distribution (coll_id = 0x%x, handle = 0x%08Lx, key = %s (%d), val_buf = 0x%08x (%d))\n",
		 s_op->req->u.setattr.fs_id,
		 s_op->req->u.setattr.handle,
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 (unsigned) s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_write(s_op->req->u.setattr.fs_id,
					  s_op->req->u.setattr.handle,
					  &(s_op->key),
					  &(s_op->val),
					  TROVE_SYNC /* flags */,
					  NULL,
					  s_op,
					  js_p,
					  &j_id,
					  PINT_server_job_context);
    return(ret);
}

/*
 * Function: setattr_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static int setattr_cleanup(PINT_server_op *s_op, job_status_s* js_p)
{
    PINT_STATE_DEBUG("setattr_cleanup");
 
    return(PINT_state_machine_complete(s_op));
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */

