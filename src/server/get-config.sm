/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include "server-config.h"
#include "pvfs2-server.h"

static PINT_sm_action getconfig_cleanup(
    struct PINT_smcb *smcb, job_status_s *js_p);
static PINT_sm_action getconfig_init(
    struct PINT_smcb *smcb, job_status_s *js_p);

/*******************/
static PINT_sm_action start_pjmp_action(
    struct PINT_smcb *smcb, job_status_s *js_p);

static PINT_sm_action end_pjmp_action(
    struct PINT_smcb *smcb, job_status_s *js_p);

static PINT_sm_action st1_action(
    struct PINT_smcb *smcb, job_status_s *js_p);

static PINT_sm_action st2_action(
    struct PINT_smcb *smcb, job_status_s *js_p);

static PINT_sm_action st3_action(
    struct PINT_smcb *smcb, job_status_s *js_p);
/*******************/
	//	success => init;

%%

machine pvfs2_server_test_pjmp_sm(st1, st2, st3)
{
    state st1
    {
        run st1_action;
        default => st2;
    }

    state st2
    {
        run st2_action;
        default => st3;
    }

    state st3
    {
        run st3_action;
	default => terminate;
    }

}

machine pvfs2_get_config_sm(prelude, init, final_response, cleanup
        ,start_pjmp, end_pjmp)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		success => start_pjmp;
		default => final_response;
	}

        state start_pjmp
        {
            pjmp start_pjmp_action
            {
                1 => pvfs2_server_test_pjmp_sm;
            }
            default => end_pjmp;
        }

        state end_pjmp
        {
            run end_pjmp_action;
            default => init;
        }

	state init
	{
		run getconfig_init;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run getconfig_cleanup;
		default => terminate;
	}
}

%%

/*******************/
static PINT_sm_action start_pjmp_action(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    int i;
    for (i = 0; i < 4; i++)
    {
        struct PINT_server_op *s_op = malloc(sizeof(struct PINT_server_op));
        s_op->op = i; /* used in print to ID task */
        PINT_sm_push_frame(smcb, 1, s_op);
    }
    js_p->error_code = 0;
    return SM_ACTION_DEFERRED;
}

static PINT_sm_action end_pjmp_action(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    int i;
    for (i = 0; i < 4; i++)
    {
        struct PINT_server_op *s_op = PINT_sm_pop_frame(smcb);
        free(s_op);
    }
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action st1_action(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    fprintf(stderr,"RUNNING ACTION: ST1 TASK: T%d\n", s_op->op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action st2_action(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    fprintf(stderr,"RUNNING ACTION: ST2 TASK: T%d\n", s_op->op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action st3_action(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    fprintf(stderr,"RUNNING ACTION: ST3 TASK: T%d\n", s_op->op);
    js_p->error_code = 0;
    return SM_ACTION_TERMINATE;
}
/*******************/

/*
 * Function: getconfig_init
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      fs_id mapping exists on server
 *
 * Post:     None
 *
 * Returns:  void
 *
 * Synopsis: Get information from config structure
 *           then move to next state.
 *           
 */

static PINT_sm_action getconfig_init(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct server_configuration_s *user_opts = get_server_config_struct();
    assert(user_opts);

    /* TODO: handle this properly later */
    assert(user_opts->fs_config_buflen <= PVFS_REQ_LIMIT_CONFIG_FILE_BYTES);
    assert(user_opts->server_config_buflen <= PVFS_REQ_LIMIT_CONFIG_FILE_BYTES);

    s_op->resp.u.getconfig.fs_config_buf_size =
        (uint32_t)user_opts->fs_config_buflen;
    s_op->resp.u.getconfig.fs_config_buf =
        (char*)user_opts->fs_config_buf;
    s_op->resp.u.getconfig.server_config_buf_size =
        (uint32_t)user_opts->server_config_buflen;
    s_op->resp.u.getconfig.server_config_buf =
        (char*)user_opts->server_config_buf;

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

/*
 * Function: getconfig_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  void
 *
 * Synopsis: cleans up string memory
 *           response structure
 */

static PINT_sm_action getconfig_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    return(server_state_machine_complete(smcb));
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

