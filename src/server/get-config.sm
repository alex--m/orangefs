/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include "server-config.h"
#include "pvfs2-server.h"

static int getconfig_cleanup(PINT_server_op *s_op, job_status_s *ret);
static int getconfig_job_bmi_send(PINT_server_op *s_op, job_status_s *ret);
static int getconfig_init(PINT_server_op *s_op, job_status_s *ret);
void getconfig_init_state_machine(void);

extern job_context_id PINT_server_job_context;

%%

machine pvfs2_get_config_sm(init, bmi_send, cleanup)
{
	state init
	{
		run getconfig_init;
		default => bmi_send;
	}

	state bmi_send
	{
		run getconfig_job_bmi_send;
		default => cleanup;
	}

	state cleanup
	{
		run getconfig_cleanup;
		default => init;
	}
}

%%

/*
 * Function: getconfig_init
 *
 * Params:   server_op *b, 
 *           job_status_s *ret
 *
 * Pre:      fs_id mapping exists on server
 *
 * Post:     None
 *
 * Returns:  void
 *
 * Synopsis: Get information from config structure
 *           then move to next state.
 *           
 */

static int getconfig_init(PINT_server_op *s_op, job_status_s *ret)
{
    int job_post_ret = 1;
    struct server_configuration_s *user_opts = get_server_config_struct();
    assert(user_opts);

    /* TODO: handle this properly later */
    assert(user_opts->fs_config_buflen <= PVFS_REQ_LIMIT_CONFIG_FILE_BYTES);
    assert(user_opts->server_config_buflen <= PVFS_REQ_LIMIT_CONFIG_FILE_BYTES);

    s_op->resp->u.getconfig.fs_config_buf_size =
        (uint32_t)user_opts->fs_config_buflen;
    s_op->resp->u.getconfig.fs_config_buf =
        (char*)user_opts->fs_config_buf;
    s_op->resp->u.getconfig.server_config_buf_size =
        (uint32_t)user_opts->server_config_buflen;
    s_op->resp->u.getconfig.server_config_buf =
        (char*)user_opts->server_config_buf;

    return(job_post_ret);
}

/*
 * Function: getconfig_job_bmi_send
 *
 * Params:   server_op *b, 
 *           job_status_s *ret
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  void
 *
 * Synopsis: Send a message to the client with 
 *           either an error or the requested data
 *           
 */

static int getconfig_job_bmi_send(PINT_server_op *s_op, job_status_s *ret)
{
    int job_post_ret;
    job_id_t i;

    /* fill in response -- status field is the only generic one we should have to set */
    s_op->resp->status = ret->error_code;

    job_post_ret = PINT_encode(
	    s_op->resp,
	    PINT_ENCODE_RESP,
	    &(s_op->encoded),
	    s_op->addr,
	    s_op->decoded.enc_type);

    assert(job_post_ret == 0);

    job_post_ret = job_bmi_send_list(
	    s_op->addr,
	    s_op->encoded.buffer_list,
	    s_op->encoded.size_list,
	    s_op->encoded.list_count,
	    s_op->encoded.total_size,
	    s_op->tag,
	    s_op->encoded.buffer_type,
	    0,
	    s_op,
	    ret,
	    &i,
	    PINT_server_job_context);

    return(job_post_ret);
}

/*
 * Function: getconfig_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s *ret
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  void
 *
 * Synopsis: cleans up string memory
 *           response structure
 */

static int getconfig_cleanup(PINT_server_op *s_op, job_status_s *ret)
{

    PINT_encode_release(&(s_op->encoded),PINT_ENCODE_RESP);
    PINT_decode_release(&(s_op->decoded),PINT_DECODE_REQ);
    
    if(s_op->val.buffer)
    {
	free(s_op->val.buffer);
    }

    if (s_op->resp)
    {
	free(s_op->resp);
    }

    /*
    BMI_memfree(
	    s_op->addr,
	    s_op->req,
	    s_op->unexp_bmi_buff->size,
	    BMI_RECV
	    );
    */

    free(s_op);

    return(0);
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ts=8 sts=4 sw=4 noexpandtab
 */

