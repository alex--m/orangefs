/* 
 * (C) 2008 Clemson University and The University of Chicago
 *
 * See COPYING in top-level directory.
 */

/** \file
 *  \ingroup sysint
 *
 *  PVFS2 system interface routines for creating files.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "pvfs2-dist-simple-stripe.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "pint-distribution.h"
#include "PINT-reqproto-encode.h"
#include "pint-util.h"
#include "pint-dist-utils.h"
#include "ncache.h"
#include "pvfs2-internal.h"
#include "extent-utils.h"

extern job_context_id pint_client_sm_context;

enum
{
    LOCAL_OPERATION = 2,
    REMOTE_OPERATION = 3
};

enum
{
    CREATE_RETRY = 170
};

/* completion function prototypes */
static int create_create_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);

%%

/* this machine launches the main machine below */
/* mostly here to convert from a server to a client SM frame */
machine pvfs2_create_file_sm
{
    /* all server SMs run prelude for scheduler and security */
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => create;
        default => final_response;
    }

    state create
    {
        /* set up for jump to client SM */
        pjmp create_file_setup
        {
            default => pvfs2_create_file_work_sm;
        }
        default => setup_resp;
    }

    /* copy results back to server SM and prepare resp */
    state setup_resp
    {
        run create_file_resp;
        default => final_response;
    }

    /* send response */
    state final_response
    {
        jump pvfs2_final_response_sm;
        default => terminate;
    }
}

/* This SM was moved here from the client to allow server to */
/* server collective processing of file create */
machine pvfs2_create_file_work_sm
{
    state init
    {
        run create_file_init;
        default => init2;
    }

    state init2
    {
        run create_file_init2;
        default => parent_getattr;
    }

    state parent_getattr
    {
        jump pvfs2_get_attr_work_sm;
        success => parent_getattr_cleanup_and_inspect;
        default => cleanup_work;
    }

    state parent_getattr_cleanup_and_inspect
    {
        run create_file_parent_getattr_cleanup_and_inspect;
        LOCAL_OPERATION => do_dspace_create;
        REMOTE_OPERATION => dspace_xfer_msgpair_array;
        default => cleanup_work;
    }

    state do_dspace_create
    {
        jump pvfs2_create_work_sm;
        success => dspace_create_local_cleanup;
        default => cleanup_work;
    }

    state dspace_create_local_cleanup
    {
        run create_file_dspace_local_cleanup;
        success => datafiles_setup;
        default => cleanup_work;
    }

    state dspace_xfer_msgpair_array
    {
        jump pvfs2_msgpairarray_sm;
        success => dspace_create_remote_cleanup;
        default => cleanup_work;
    }

    state dspace_create_remote_cleanup
    {
        run create_file_dspace_remote_cleanup;
        success => datafiles_setup;
        default => cleanup_work;
    }

    state datafiles_setup
    {
        run create_file_datafiles_setup;
        REMOTE_OPERATION => datafiles_remote_setup;
        LOCAL_OPERATION => datafiles_local_setup;
        default => cleanup_work;
    }

    state datafiles_remote_setup
    {
        run create_file_datafiles_remote_setup;
        success => datafiles_xfer_msgpair_array;
        default => datafiles_local_setup;
    }

    state datafiles_xfer_msgpair_array
    {
        jump pvfs2_msgpairarray_sm;
        success => datafiles_remote_cleanup;
        default => cleanup_work;
    }

    state datafiles_remote_cleanup
    {
        run create_file_datafiles_remote_cleanup;
        success => datafiles_local_setup;
        default => cleanup_work;
    }

    state datafiles_local_setup
    {
        run create_file_datafiles_local_setup;
        LOCAL_OPERATION => do_datafiles_local;
        default => setattr_setup;
    }

    /* TODO: Do we need to handle multiple local creates? */
    state do_datafiles_local
    {
        jump pvfs2_create_work_sm;
        success => datafiles_local_cleanup;
        default => cleanup_work;
    }

    state datafiles_local_cleanup
    {
        run create_file_datafiles_local_cleanup;
        success => setattr_setup;
        default => cleanup_work;
    }

    state setattr_setup
    {
        run create_file_setattr_setup;
        LOCAL_OPERATION => do_setattr;
        REMOTE_OPERATION => setattr_xfer_msgpair_array;
        default => cleanup_work;
    }

    state do_setattr
    {
        jump pvfs2_set_attr_work_sm;
        default => setattr_cleanup;
    }

    state setattr_xfer_msgpair_array
    {
        jump pvfs2_msgpairarray_sm;
        success => setattr_cleanup;
        default => cleanup_work;
    }

    state setattr_cleanup
    {
        run create_file_setattr_cleanup;
        success => crdirent_setup;
        default => cleanup_work;
    }

    state crdirent_setup
    {
        run create_file_crdirent_setup;
        success => do_crdirent;
        default => cleanup_work;
    }

    state do_crdirent
    {
        jump pvfs2_crdirent_work_sm;
        success => crdirent_cleanup;
        default => cleanup_work;
    }

    state crdirent_cleanup
    {
        run create_file_crdirent_cleanup;
        default => cleanup_work;
    }

    state cleanup_work
    {
        run create_file_work_cleanup;
        CREATE_RETRY => init;
        default => terminate;
    }
}

%%

/* action files for the main SM */

/* In this function transfer arguments from the request to the struct */
/* in the client SM - set all other values in client SM, create a push */
/* stack frame */

static PINT_sm_action create_file_setup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    gossip_debug(GOSSIP_SERVER_DEBUG, "create_file_setup entered\n");

    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    struct PINT_client_sm *sm_p = malloc(sizeof(struct PINT_client_sm));
    if(!sm_p)
    {
        return -PVFS_ENOMEM;
    }
    /* zero out all members */
    memset(sm_p, 0, sizeof(struct PINT_client_sm));

    /* Copied this from #define PINT_init_msgarray_params in client-state-machine.h
     * because PINT_get_server_config_struct(__fsid) was not available on the server
     * side. Use get_server_config_struct() instead. 
     */
    {
        PINT_sm_msgpair_params *mpp = &sm_p->msgarray_params;
        struct server_configuration_s *server_config =
            get_server_config_struct();
        mpp->job_context = server_job_context;
        if (server_config)
        {
            mpp->job_timeout = server_config->client_job_bmi_timeout;
            mpp->retry_limit = server_config->client_retry_limit;
            mpp->retry_delay = server_config->client_retry_delay_ms;
        }
        else
        {
            mpp->job_timeout = PVFS2_CLIENT_JOB_BMI_TIMEOUT_DEFAULT;
            mpp->retry_limit = PVFS2_CLIENT_RETRY_LIMIT_DEFAULT;
            mpp->retry_delay = PVFS2_CLIENT_RETRY_DELAY_MS_DEFAULT;
        }
    }

    sm_p->cred_p = &(s_op->req->credentials);
    sm_p->u.create_file.object_name = s_op->req->u.create_file.object_name;
    sm_p->u.create_file.attr = s_op->req->u.create_file.attr;
/* TODO: Pass this from the client. */
    sm_p->u.create_file.layout.algorithm = PVFS_SYS_LAYOUT_NONE;
/* TODO: Pass this from the client. */
    sm_p->u.create_file.dist = PINT_dist_create(PVFS_DIST_SIMPLE_STRIPE_NAME);
    sm_p->parent_ref.handle = s_op->req->u.create_file.parent_handle;
    sm_p->parent_ref.fs_id = s_op->req->u.create_file.fs_id;
    sm_p->object_ref.fs_id = sm_p->parent_ref.fs_id;
    sm_p->u.create_file.num_data_files = s_op->req->u.create_file.num_data_files;
    sm_p->u.create_file.meta_handle_extent_array.extent_count =
           s_op->req->u.create_file.meta_handle_extent_array.extent_count;
    sm_p->u.create_file.meta_handle_extent_array.extent_array =
           s_op->req->u.create_file.meta_handle_extent_array.extent_array;

    gossip_debug(GOSSIP_SERVER_DEBUG, "Creating file %s under %llu, %d\n",
        sm_p->u.create_file.object_name, llu(sm_p->parent_ref.handle),
        sm_p->parent_ref.fs_id);

    PINT_sm_push_frame(smcb, 0, sm_p);
    return(SM_ACTION_COMPLETE);
}

/* the one thing that returns from the create file is an object handle
 * copy back to server SM and set up response */

static PINT_sm_action create_file_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_PREVIOUS);
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int task_id;
    int error_code;

    if (js_p->error_code == 0)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, "Handle created: %llu\n",
                     llu(sm_p->u.create_file.metafile_handle));
        s_op->resp.u.create_file.handle = sm_p->u.create_file.metafile_handle;
        switch(s_op->req->u.create_file.attr.objtype)
        {
            case PVFS_TYPE_NONE:
                PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG,
                    "new handle: %llu, type unknown.\n", llu(js_p->handle));
                break;
            case PVFS_TYPE_METAFILE:
                PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG,
                    "new handle: %llu, type metafile.\n", llu(js_p->handle));
                break;
            case PVFS_TYPE_DATAFILE:
                PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG,
                    "new handle: %llu, type datafile.\n", llu(js_p->handle));
                break;
            case PVFS_TYPE_DIRECTORY:
                PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG,
                    "new handle: %llu, type directory.\n", llu(js_p->handle));
                break;
            case PVFS_TYPE_SYMLINK:
                PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG,
                    "new handle: %llu, type symlink.\n", llu(js_p->handle));
                break;
            case PVFS_TYPE_DIRDATA:
                PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG,
                    "new handle: %llu, type dirdata.\n", llu(js_p->handle));
                break;
        }
    }
    PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    free(sm_p);

    return (SM_ACTION_COMPLETE);
}

/****************************************************************/

static PINT_sm_action create_file_init(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t tmp_id;
    struct PINT_server_op *s_op;
    int ret = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "create file state: init\n");

    assert((js_p->error_code == 0) ||
           (js_p->error_code == CREATE_RETRY));

    if (js_p->error_code == CREATE_RETRY)
    {
        js_p->error_code = 0;

        return job_req_sched_post_timer(
            sm_p->msgarray_params.retry_delay, smcb, 0, js_p, &tmp_id,
            server_job_context);
    }

    /* Prepare to retrieve the parent's attributes. */
    s_op = malloc(sizeof(struct PINT_server_op));

    if(!s_op)
    {
        return -PVFS_ENOMEM;
    }
    /* zero out all members */
    memset(s_op, 0, sizeof(struct PINT_server_op));

    s_op->op = PVFS_SERV_GETATTR;
    s_op->u.getattr.handle = sm_p->parent_ref.handle;
    s_op->u.getattr.fs_id = sm_p->parent_ref.fs_id;
    s_op->u.getattr.attrmask = PVFS_ATTR_COMMON_ALL|PVFS_ATTR_DIR_HINT;

    s_op->attr.mask = PVFS_ATTR_COMMON_ALL|PVFS_ATTR_DIR_HINT;
    s_op->attr.objtype = PVFS_TYPE_DIRECTORY;

    PINT_sm_push_frame(smcb, 0, s_op);

    /* TODO: Use a centralized method of obtaining ds_attr
             that can be called from other places as well.  */
    memset(&(s_op->ds_attr), 0, sizeof(PVFS_ds_attributes));
    ret = job_trove_dspace_getattr(
        sm_p->parent_ref.fs_id, sm_p->parent_ref.handle, smcb, &(s_op->ds_attr),
        0, js_p, &tmp_id, server_job_context);
 
    return ret;
}

static PINT_sm_action create_file_init2(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *obj_attr = NULL;
    PVFS_ds_attributes *ds_attr = NULL;

    ds_attr = &s_op->ds_attr;
    obj_attr = &s_op->attr;
    PVFS_ds_attr_to_object_attr(ds_attr, obj_attr);
    s_op->attr.mask = PVFS_ATTR_COMMON_ALL;

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_parent_getattr_cleanup_and_inspect(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    int task_id;
    int error_code;
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_PREVIOUS);
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr = NULL;
    int num_dfiles_requested_override = 0;
    PINT_dist *current_dist; 
    int ret = 0;
    PINT_sm_msgpair_state *msg_p = NULL;
    char server_name[1024];
    struct server_configuration_s *server_config =
            get_server_config_struct();

    gossip_debug(GOSSIP_CLIENT_DEBUG,
        "create file state: parent_getattr_cleanup_and_inspect\n");

    assert(sm_p);
    assert(s_op);

    /* Copy the results before popping the stack. */
    attr = &sm_p->getattr.attr;
    assert(attr);
    memcpy(attr, &s_op->attr, sizeof(PVFS_object_attr));
    memcpy(&sm_p->u.create_file.saved_parent_attr, &s_op->attr, sizeof(PVFS_object_attr));

    PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    free(s_op);
    js_p->error_code = error_code;

error_code = 0;

    if (error_code == 0) {
        /** Look at the attributes of the parent directory and
         *  decide if it impacts the file creation in any way.
         */
        gossip_debug(GOSSIP_CLIENT_DEBUG, "parent owner: %d, group: %d, perms: %d\n",
            (int)attr->owner, (int)attr->group, (int)attr->perms);

        /* do we have a setgid bit? */
        if(attr->perms & PVFS_G_SGID)
        {
            gossip_debug(GOSSIP_CLIENT_DEBUG, "parent has setgid bit set.\n");
            gossip_debug(GOSSIP_CLIENT_DEBUG, " - modifying requested attr "
                                              "for new file.\n");
            sm_p->u.create_file.attr.group = attr->group;
            /* note that permission checking is left to server even in this case */
        }
        gossip_debug(GOSSIP_CLIENT_DEBUG, "create_parent_getattr: [%p] "
            "dfile_count     = %d "
            "dist_name_len   = %d "
            "dist_params_len = %d\n",
            attr,
            attr->u.dir.hint.dfile_count,
            attr->u.dir.hint.dist_name_len,
            attr->u.dir.hint.dist_params_len);

        num_dfiles_requested_override = attr->u.dir.hint.dfile_count;
        /* override the # of data files for this create */
        if (num_dfiles_requested_override > 0)
        {
            /* Determine the number of dfiles */
            PINT_cached_config_get_num_dfiles(sm_p->object_ref.fs_id,
                    sm_p->u.create_file.dist,
                    num_dfiles_requested_override,
                    &sm_p->u.create_file.num_data_files);
        }
        gossip_debug(GOSSIP_CLIENT_DEBUG, "Setting number of datafiles to %d [requested %d]\n", 
            sm_p->u.create_file.num_data_files, num_dfiles_requested_override);
        current_dist = sm_p->u.create_file.dist;
        /* We have an overriding distribution name for this directory.. honor that */
        if (attr->u.dir.hint.dist_name_len > 0)
        {
            /* switch it only if it is different! */
            if (strcmp(attr->u.dir.hint.dist_name, current_dist->dist_name))
            {
                PINT_dist *new_dist = NULL;
                new_dist = PINT_dist_create(attr->u.dir.hint.dist_name);
                if (new_dist)
                {
                    gossip_debug(GOSSIP_CLIENT_DEBUG, "Overridding distribution name to %s instead of %s\n",
                        attr->u.dir.hint.dist_name,
                        current_dist->dist_name);
                    PINT_dist_free(current_dist);
                    sm_p->u.create_file.dist = new_dist;
                    current_dist = new_dist;
                }
                else
                {
                    gossip_debug(GOSSIP_CLIENT_DEBUG, "Could not override distribution name with %s instead of %s\n",
                        attr->u.dir.hint.dist_name,
                        current_dist->dist_name);
                }
            }
            else {
                gossip_debug(GOSSIP_CLIENT_DEBUG, "retaining current distribution name %s\n",
                    current_dist->dist_name);
            }
        }

        /* okay, we might need to override some dist params as well */
        if (attr->u.dir.hint.dist_params_len > 0)
        {
            /* We have a series of comma separated key:val strings */
            char **key, **val;
            int64_t tmp_val;
            int nparams = 0;

            /* ignore parse errors! */
            if (PINT_split_keyvals(attr->u.dir.hint.dist_params,
                &nparams, &key, &val) == 0)
            {
                int i;
                for (i = 0; i < nparams; i++)
                {
                    gossip_debug(GOSSIP_CLIENT_DEBUG, "distribution parameter %s, value %s\n",
                        key[i], val[i]);
                    /* NOTE: just as in server-config.c when parsing "Param" and
                     * "Value" fields, we will assume that all values are 64 bit
                     * integers.  The only difference here is that we scan
                     * directly into a 64 bit integer, rather than converting
                     * from the int format that dotconf supports.
                     */
                    ret = sscanf(val[i], SCANF_lld, &tmp_val);
                    if(ret != 1)
                    {
                        gossip_err("Error: unsupported type for distribution parameter %s, value %s found in directory hints.\n", 
                            key[i], val[i]);
                        gossip_err("Error: continuing anyway.\n");
                    }
                    else
                    {
                        if(current_dist->methods->set_param(current_dist->dist_name,
                            current_dist->params,
                            key[i],
                            &tmp_val))
                        {

                            gossip_err("Error: could not override hinted distribution parameter %s, value %s found in directory hints\n",
                                key[i],
                                val[i]);
                        }
                     }
                     free(key[i]);
                     free(val[i]);
                }
                free(key);
                free(val);
            }
        }

        s_op = malloc(sizeof(struct PINT_server_op));

        if(!s_op)
        {
            return -PVFS_ENOMEM;
        }
        /* zero out all members */
        memset(s_op, 0, sizeof(struct PINT_server_op));
        PINT_sm_push_frame(smcb, 0, s_op);

        /* Determine whether the dspace should be created locally
         * or remotely and setup up for the appropriate place. */
        PINT_cached_config_get_server_name(server_name, 1024, 
            sm_p->u.create_file.meta_handle_extent_array.extent_array[0].first, sm_p->object_ref.fs_id);

        if (! strcmp(server_config->host_id, server_name)) {
            /* Set up the frame for the nested create state machine */
            js_p->error_code = LOCAL_OPERATION;

            s_op->op = PVFS_SERV_CREATE;
            s_op->u.create.fs_id = sm_p->object_ref.fs_id;
            s_op->u.create.handle_extent_array.extent_count = sm_p->u.create_file.meta_handle_extent_array.extent_count;
            s_op->u.create.handle_extent_array.extent_array = sm_p->u.create_file.meta_handle_extent_array.extent_array;
            s_op->u.create.object_type = PVFS_TYPE_METAFILE;
        }
        else {
            /* Prepare to send a message for remote execution. */
            js_p->error_code = REMOTE_OPERATION;

            PINT_init_msgpair(s_op, msg_p);

            PINT_SERVREQ_CREATE_FILL(
                msg_p->req,
                *sm_p->cred_p,
                sm_p->object_ref.fs_id,
                PVFS_TYPE_METAFILE,
                sm_p->u.create_file.meta_handle_extent_array);

            msg_p->fs_id = sm_p->object_ref.fs_id;
            msg_p->handle = sm_p->u.create_file.meta_handle_extent_array.extent_array[0].first;
            msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
            msg_p->comp_fn = create_create_comp_fn;

            ret = PINT_cached_config_map_to_server(&msg_p->svr_addr,
                sm_p->u.create_file.meta_handle_extent_array.extent_array[0].first, sm_p->object_ref.fs_id);

            if (ret)
            {
                gossip_err("Failed to map meta server address\n");
                js_p->error_code = ret;
            }
        }
    }
    
    return(SM_ACTION_COMPLETE);
}

static PINT_sm_action create_file_dspace_local_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_PREVIOUS);
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int task_id;
    int error_code;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "create file state: dspace_local_cleanup\n");

    /* stash the newly created meta file handle */
    sm_p->u.create_file.metafile_handle = s_op->resp.u.create.handle;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "Metafile handle %llu\n",
                 llu(sm_p->u.create_file.metafile_handle));

    PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    free(s_op);
    js_p->error_code = error_code;
    js_p->error_code = 0;
 
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_dspace_remote_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int task_id;
    int error_code;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "create file state: dspace_remote_cleanup\n");

    PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    free(s_op);
    js_p->error_code = error_code;
    js_p->error_code = 0;
 
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_datafiles_setup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct server_configuration_s *server_config = NULL;
    int ret = -PVFS_EINVAL;
    int i, this_pair;
    char server_name[1024];
    
    gossip_debug(GOSSIP_CLIENT_DEBUG, "create file state: datafiles_setup\n");
        
    js_p->error_code = 0;

    if (sm_p->u.create_file.num_data_files > PVFS_REQ_LIMIT_DFILE_COUNT)
    {
        sm_p->u.create_file.num_data_files = PVFS_REQ_LIMIT_DFILE_COUNT;
        gossip_err("Warning: reducing number of data "
                     "files to PVFS_REQ_LIMIT_DFILE_COUNT\n");
    }   
    
    gossip_debug(GOSSIP_CLIENT_DEBUG, "need to create %d datafiles\n",
                 sm_p->u.create_file.num_data_files);
    
    /* allocate handle extent array objects */
    sm_p->u.create_file.io_handle_extent_array = (PVFS_handle_extent_array *)
        malloc(sm_p->u.create_file.num_data_files *
               sizeof(PVFS_handle_extent_array));
    if (!sm_p->u.create_file.io_handle_extent_array)
    {
        gossip_err("create: failed to allocate handle_extent_array\n"); 
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* allocate data server bmi address array */
    if (sm_p->u.create_file.data_server_addrs == NULL)
    {
        sm_p->u.create_file.data_server_addrs = (PVFS_BMI_addr_t *)malloc(
            sm_p->u.create_file.num_data_files * sizeof(PVFS_BMI_addr_t));
    }
    if (!sm_p->u.create_file.data_server_addrs)
    {
        gossip_err("create: failed to allocate data server addrs\n"); 
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    server_config = get_server_config_struct();

    ret = PINT_cached_config_map_servers(
        server_config,
        sm_p->object_ref.fs_id,
        &sm_p->u.create_file.num_data_files,
        &sm_p->u.create_file.layout,
        sm_p->u.create_file.data_server_addrs,
        sm_p->u.create_file.io_handle_extent_array);
    if(ret < 0)
    {
        gossip_err("create: failed to map the layout to a set of IO servers\n");
        js_p->error_code = ret;
        return 1;
    }

    if (ret)
    {
        gossip_err("Failed to retrieve data server addresses\n");
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    /* Determine whether any remote datafiles need to be created. */
    js_p->error_code = LOCAL_OPERATION;
    for(i = 0, this_pair = 0; i < sm_p->u.create_file.num_data_files; i++)
    {
        /* Is this one local? */
        PINT_cached_config_get_server_name(server_name, 1024,
            sm_p->u.create_file.io_handle_extent_array[i].extent_array[0].first, sm_p->parent_ref.fs_id);
        if (strcmp(server_config->host_id, server_name))
        {
            js_p->error_code = REMOTE_OPERATION;
        }
    }
    return SM_ACTION_COMPLETE;
}

static int create_file_datafiles_comp_fn(void *v_p,
                                    struct PVFS_server_resp *resp_p,
                                    int index)
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_PREVIOUS);
    int i, this_pair;
    char server_name[1024];
    struct server_configuration_s *server_config =
            get_server_config_struct();
        
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "create_file_datafiles_comp_fn[%d]\n",index);
    
    assert(resp_p->op == PVFS_SERV_CREATE);

    /* Find the one we were creating. */
    for (i = 0, this_pair = -1; i < sm_p->u.create_file.num_data_files && this_pair < index; i++)
    {
        /* Does this one count? */
        PINT_cached_config_get_server_name(server_name, 1024,
            sm_p->u.create_file.io_handle_extent_array[i].extent_array[0].first, sm_p->parent_ref.fs_id);
        if (! strcmp(server_config->host_id, server_name))
        {
            continue;
        }
        else
        {
            this_pair++;
        }
    }
    
    if (resp_p->status != 0)
    {   
        gossip_err("%s: Failed to create data handle at server: %s "
                   "for file: %s\n",
                   __func__,
                   BMI_addr_rev_lookup(
                       sm_p->u.create_file.data_server_addrs[this_pair]),
                       sm_p->u.create_file.object_name);
        PVFS_perror_gossip("Creation failure", resp_p->status);
        return resp_p->status;
    }   
    
    /* allocate memory for the data handles if we haven't already */
    if (sm_p->u.create_file.datafile_handles == NULL)
    {   
        sm_p->u.create_file.datafile_handles = (PVFS_handle *)malloc(
            sm_p->u.create_file.num_data_files * sizeof(PVFS_handle));
    
        if (sm_p->u.create_file.datafile_handles == NULL)
        { 
            gossip_err("create: Failed to allocate data handle array\n");
            return -PVFS_ENOMEM;
        }
        memset(sm_p->u.create_file.datafile_handles, 0,
               sm_p->u.create_file.num_data_files * sizeof(PVFS_handle));
    }

    /* otherwise, just stash the newly created data file handle */
    sm_p->u.create_file.datafile_handles[this_pair] = resp_p->u.create.handle;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "Datafile handle %d is %llu\n",
                 index, llu(sm_p->u.create_file.datafile_handles[this_pair]));
    return 0;
}

static PINT_sm_action create_file_datafiles_remote_setup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *s_op;
    int i, this_pair;
    struct server_configuration_s *server_config =
            get_server_config_struct();
    char server_name[1024];

    js_p->error_code = 0;

    /* Handle setup for any datafiles that are to be created remotely. */
    s_op = malloc(sizeof(struct PINT_server_op));
        
    if(!s_op)
    {
        return -PVFS_ENOMEM;
    }
    /* zero out all members */
    memset(s_op, 0, sizeof(struct PINT_server_op));
    PINT_sm_push_frame(smcb, 0, s_op);

    /* allocate msgarray and set msgarray_count */
    s_op->msgarray = (PINT_sm_msgpair_state *)malloc(
        (sm_p->u.create_file.num_data_files * sizeof(PINT_sm_msgpair_state)));
    if (s_op->msgarray == NULL)
    {
        gossip_err("create: failed to allocate msgarray\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    s_op->msgarray_count = sm_p->u.create_file.num_data_files;
 
    /* for each datafile, prepare to post a create send/recv pair */
    for(i = 0, this_pair = 0; i < sm_p->u.create_file.num_data_files; i++)
    {
        PINT_sm_msgpair_state *msg_p = &s_op->msgarray[this_pair];

        /* Is this one local? */
        PINT_cached_config_get_server_name(server_name, 1024,
            sm_p->u.create_file.io_handle_extent_array[i].extent_array[0].first, sm_p->parent_ref.fs_id);
        if (! strcmp(server_config->host_id, server_name))
        {
            s_op->msgarray_count--;
        }
        else {
            PINT_SERVREQ_CREATE_FILL(
                msg_p->req,
                *sm_p->cred_p,
                sm_p->object_ref.fs_id,
                PVFS_TYPE_DATAFILE,
                sm_p->u.create_file.io_handle_extent_array[i]);

            gossip_debug(GOSSIP_CLIENT_DEBUG,  "posting datafile[%d] create "
                         "with extents %llu-%llu\n", i,
                         llu(sm_p->u.create_file.io_handle_extent_array[i].
                            extent_array[0].first),
                         llu(sm_p->u.create_file.io_handle_extent_array[i].
                            extent_array[0].last));

            msg_p->fs_id = sm_p->object_ref.fs_id;
            msg_p->handle = sm_p->u.create_file.io_handle_extent_array[i].
                extent_array[0].first;
            msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
            msg_p->comp_fn = create_file_datafiles_comp_fn;
            msg_p->svr_addr = sm_p->u.create_file.data_server_addrs[i];
            this_pair++;
        }
    }
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_datafiles_remote_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int task_id;
    int error_code;

    /* Clean up the server stack frame that we pushed for remote file creation. */
    PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    free(s_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_datafiles_local_setup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *s_op;
    job_id_t tmp_id;
    int ret = -PVFS_EINVAL;
    int i;
    struct server_configuration_s *server_config = get_server_config_struct();
    char server_name[1024];
    
    gossip_debug(GOSSIP_CLIENT_DEBUG, "create file state: datafiles_local_setup\n");

    /* allocate memory for the data handles if we haven't already */
    if (sm_p->u.create_file.datafile_handles == NULL)
    {
        sm_p->u.create_file.datafile_handles = (PVFS_handle *)malloc(
            sm_p->u.create_file.num_data_files * sizeof(PVFS_handle));

        if (sm_p->u.create_file.datafile_handles == NULL)
        {
            gossip_err("create: Failed to allocate data handle array\n");
            return -PVFS_ENOMEM;
        }
        memset(sm_p->u.create_file.datafile_handles, 0,
               sm_p->u.create_file.num_data_files * sizeof(PVFS_handle));
    }
    js_p->error_code = 0;

    for (i = 0; i < sm_p->u.create_file.num_data_files; i++)
    {
        /* Is this one local? */
        PINT_cached_config_get_server_name(server_name, 1024,
            sm_p->u.create_file.io_handle_extent_array[i].extent_array[0].first, sm_p->parent_ref.fs_id);
        if (! strcmp(server_config->host_id, server_name))
        {
            js_p->error_code = LOCAL_OPERATION;

            /* Set up the frame for local creates */
            s_op = malloc(sizeof(struct PINT_server_op));
        
            if(!s_op)
            {
                return -PVFS_ENOMEM;
            }
            /* zero out all members */
            memset(s_op, 0, sizeof(struct PINT_server_op));

            PINT_sm_push_frame(smcb, 0, s_op);

            s_op->op = PVFS_SERV_CREATE;
            s_op->u.create.fs_id = sm_p->object_ref.fs_id;

            s_op->u.create.handle_extent_array = sm_p->u.create_file.io_handle_extent_array[i];
            s_op->u.create.object_type = PVFS_TYPE_DATAFILE;
        
            s_op->target_fs_id = sm_p->object_ref.fs_id;
            s_op->target_handle = sm_p->object_ref.handle;
            s_op->credentials.uid = sm_p->cred_p->uid;
            s_op->credentials.gid = sm_p->cred_p->gid;
        
            /* TODO: Use a centralized method of obtaining ds_attr
                     that can be called from other places as well.  */
            memset(&(s_op->ds_attr), 0, sizeof(PVFS_ds_attributes));
            ret = job_trove_dspace_getattr(
                sm_p->object_ref.fs_id, sm_p->object_ref.handle, smcb, &(s_op->ds_attr),
                0, js_p, &tmp_id, server_job_context);
            return ret;
        }
    }
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_datafiles_local_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_PREVIOUS);
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int task_id;
    int error_code;
    int i;
    struct server_configuration_s *server_config = get_server_config_struct();
    char server_name[1024];

    /* TODO: For now, assuming we do one local datafile. */
    /* stash the newly created data file handle */
    for (i = 0; i < sm_p->u.create_file.num_data_files; i++)
    {
        /* Find the correct one. */
        PINT_cached_config_get_server_name(server_name, 1024,
            sm_p->u.create_file.io_handle_extent_array[i].extent_array[0].first, sm_p->parent_ref.fs_id);
        if (! strcmp(server_config->host_id, server_name))
        {
            sm_p->u.create_file.datafile_handles[i] = s_op->resp.u.create_file.handle;

            gossip_debug(GOSSIP_CLIENT_DEBUG, "Datafile handle %d is %llu\n",
                         0, llu(sm_p->u.create_file.datafile_handles[i]));
        }
    }
    /* Clean up the server stack frame that we pushed for local file creation. */
    PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    free(s_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static int create_setattr_comp_fn(void *v_p,
                                  struct PVFS_server_resp *resp_p,
                                  int index)
{
    int res;
    PVFS_object_ref refn;
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_CLIENT_DEBUG, "create_file_setattr_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_SETATTR);

    refn.fs_id = sm_p->msgpair.fs_id;
    refn.handle = sm_p->msgpair.handle;

    res = PINT_copy_object_attr(&sm_p->u.create_file.cache_attr,
                                &sm_p->msgpair.req.u.setattr.attr);
    if(res != 0)
    {
        return res;
    }

    return resp_p->status;
}

static PINT_sm_action create_file_setattr_setup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *s_op;
    job_id_t tmp_id;
    int ret = -PVFS_EINVAL;
    struct server_configuration_s *server_config = get_server_config_struct();
    char server_name[1024];

    assert(sm_p);

    s_op = malloc(sizeof(struct PINT_server_op));
        
    if(!s_op)
    {
        return -PVFS_ENOMEM;
    }
    /* zero out all members */
    memset(s_op, 0, sizeof(struct PINT_server_op));

    PINT_sm_push_frame(smcb, 0, s_op);

    /* Determine whether setattr is local or remote
       and set up for the appropriate one.  */
    PINT_cached_config_get_server_name(server_name, 1024,
        sm_p->u.create_file.meta_handle_extent_array.extent_array[0].first, sm_p->object_ref.fs_id);

    if (! strcmp(server_config->host_id, server_name)) {
        /* Set up the frame for the nested create state machine */
        s_op->op = PVFS_SERV_SETATTR;
        s_op->credentials.uid = sm_p->cred_p->uid;
        s_op->credentials.gid = sm_p->cred_p->gid;
        s_op->u.setattr.handle = sm_p->u.create_file.metafile_handle;
        s_op->u.setattr.fs_id = sm_p->parent_ref.fs_id;
        memcpy(&s_op->u.setattr.attr, &sm_p->u.create_file.attr, sizeof(PVFS_object_attr));
        s_op->u.setattr.attr.objtype = PVFS_TYPE_METAFILE;
        s_op->u.setattr.attr.mask = PVFS_ATTR_COMMON_ALL | PVFS_ATTR_META_ALL;
        s_op->u.setattr.attr.u.meta.dfile_array =
            sm_p->u.create_file.datafile_handles;
        s_op->u.setattr.attr.u.meta.dfile_count =
            sm_p->u.create_file.num_data_files;
        s_op->u.setattr.attr.u.meta.dist =
            sm_p->u.create_file.dist;
        s_op->u.setattr.attr.u.meta.dist_size =
            PINT_DIST_PACK_SIZE(sm_p->u.create_file.dist);
/*        s_op->attr = s_op->u.setattr.attr; */

        /* TODO: Use a centralized method of obtaining ds_attr
                 that can be called from other places as well.  */
        memset(&(s_op->ds_attr), 0, sizeof(PVFS_ds_attributes));
        ret = job_trove_dspace_getattr(
            sm_p->parent_ref.fs_id, sm_p->u.create_file.metafile_handle, smcb, &(s_op->ds_attr),
            0, js_p, &tmp_id, server_job_context);

        js_p->error_code = LOCAL_OPERATION;
        return (ret);
    }
    else /* remote metadata */
    {
        PINT_sm_msgpair_state *msg_p;

        gossip_debug(GOSSIP_CLIENT_DEBUG," create_file: posting setattr req\n");

        PINT_init_msgpair(s_op, msg_p);

        PINT_SERVREQ_SETATTR_FILL(
            msg_p->req,
            *sm_p->cred_p,
            sm_p->object_ref.fs_id,
            sm_p->u.create_file.metafile_handle,
            PVFS_TYPE_METAFILE,
            sm_p->u.create_file.sys_attr,
            PVFS_ATTR_META_ALL);

        msg_p->req.u.setattr.attr.u.meta.dfile_array =
            sm_p->u.create_file.datafile_handles;
        msg_p->req.u.setattr.attr.u.meta.dfile_count =
            sm_p->u.create_file.num_data_files;
        msg_p->req.u.setattr.attr.u.meta.dist =
            sm_p->u.create_file.dist;
        msg_p->req.u.setattr.attr.u.meta.dist_size =
            PINT_DIST_PACK_SIZE(sm_p->u.create_file.dist);

        msg_p->fs_id = sm_p->object_ref.fs_id;
        msg_p->handle = sm_p->u.create_file.metafile_handle;
        msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
        msg_p->comp_fn = create_setattr_comp_fn;

        ret = PINT_cached_config_map_to_server(&msg_p->svr_addr, 
            sm_p->u.create_file.meta_handle_extent_array.extent_array[0].first, sm_p->object_ref.fs_id);

        if (ret)
        {
            gossip_err("Failed to map meta server address\n");
            js_p->error_code = ret;
        }
        js_p->error_code = REMOTE_OPERATION;
        return SM_ACTION_COMPLETE;
    }
 
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_setattr_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int task_id;
    int error_code;

    assert(s_op);
    PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    free(s_op);
    js_p->error_code = error_code;
    js_p->error_code = 0;
 
    return SM_ACTION_COMPLETE;
}

/* setup and push a new frame for calling the nested crdirent state machine */
static PINT_sm_action create_file_crdirent_setup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *s_op = malloc(sizeof(struct PINT_server_op));
/*    job_id_t tmp_id;
    int ret = -PVFS_EINVAL; */

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "create state: crdirent_setup\n");

    if(!s_op)
    {
        return -PVFS_ENOMEM;
    }
    /* zero out all members */
    memset(s_op, 0, sizeof(struct PINT_server_op));
    PINT_sm_push_frame(smcb, 0, s_op);

    s_op->op = PVFS_SERV_CRDIRENT;
    memcpy(&s_op->attr, &sm_p->u.create_file.attr, sizeof(PVFS_object_attr));
/*    s_op->attr = sm_p->u.create_file.attr; */
    s_op->u.crdirent.name = sm_p->u.create_file.object_name;
    s_op->u.crdirent.new_handle = sm_p->u.create_file.metafile_handle;
    s_op->u.crdirent.parent_handle = sm_p->parent_ref.handle;
    s_op->u.crdirent.fs_id = sm_p->object_ref.fs_id;
    s_op->u.crdirent.dir_attr_update_required = 0;

    s_op->credentials.uid = sm_p->cred_p->uid;
    s_op->credentials.gid = sm_p->cred_p->gid;

    memcpy(&s_op->attr, &sm_p->u.create_file.saved_parent_attr, sizeof(PVFS_object_attr));

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_crdirent_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int task_id;
    int error_code;

    assert(s_op);
    PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    free(s_op);
    js_p->error_code = 0;
 
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action create_file_work_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_ref metafile_ref;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "create state: work_cleanup\n");

    /* this is in common/misc/pvfs2-util.c which is normally only in the
     * client.  They sys_attr is not a flat structure, thus there are
     * utils to copy and free them.  Either need to stick with the
     * format in the protocol (will come to us in the request) or add
     * this code into the server - not much else in it is useful to the
     * server, so I'm leaning to the former
     */
/*    PVFS_util_release_sys_attr(&sm_p->u.create_file.sys_attr); */

    PINT_SM_GETATTR_STATE_CLEAR(sm_p->getattr);

    sm_p->error_code = (sm_p->u.create_file.stored_error_code ?
                        sm_p->u.create_file.stored_error_code :
                        js_p->error_code);

    memset(&metafile_ref, 0, sizeof(metafile_ref));

    if (sm_p->error_code == 0)
    {
        metafile_ref.handle = sm_p->u.create_file.metafile_handle;
        metafile_ref.fs_id = sm_p->object_ref.fs_id;
    }
    else if ((PVFS_ERROR_CLASS(-sm_p->error_code) == PVFS_ERROR_BMI) &&
             (sm_p->u.create_file.retry_count < sm_p->msgarray_params.retry_limit))
    {
        sm_p->u.create_file.stored_error_code = 0;
        sm_p->u.create_file.retry_count++;

        gossip_debug(GOSSIP_CLIENT_DEBUG, "Retrying create operation "
                     "(attempt number %d)\n", sm_p->u.create_file.retry_count);

        js_p->error_code = CREATE_RETRY;
        return SM_ACTION_COMPLETE;
    }

    PINT_free_object_attr(&sm_p->u.create_file.cache_attr);

    if (sm_p->u.create_file.io_handle_extent_array)
    {
        free(sm_p->u.create_file.io_handle_extent_array);
        sm_p->u.create_file.io_handle_extent_array = NULL;
    }

    if (sm_p->u.create_file.data_server_addrs)
    {
        free(sm_p->u.create_file.data_server_addrs);
        sm_p->u.create_file.data_server_addrs = NULL;
    }

    if (sm_p->u.create_file.datafile_handles)
    {
        free(sm_p->u.create_file.datafile_handles);
        sm_p->u.create_file.datafile_handles = NULL;
    }

    if (sm_p->u.create_file.dist)
    {
        PINT_dist_free(sm_p->u.create_file.dist);
        sm_p->u.create_file.dist = NULL;
    }

#if 0
    if(sm_p->u.create_file.layout.algorithm == PVFS_SYS_LAYOUT_LIST)
    {
        free(sm_p->u.create_file.layout.server_list.servers);
    }
#endif

    if (sm_p->msgarray && sm_p->msgarray != &(sm_p->msgpair))
    {
        free(sm_p->msgarray);
        sm_p->msgarray = NULL;
    }

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

static int create_create_comp_fn(void *v_p,
                                 struct PVFS_server_resp *resp_p,
                                 int index)
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "create_create_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_CREATE);

    if (resp_p->status != 0)
    {
        return resp_p->status;
    }

    /* otherwise, just stash the newly created meta handle */
    sm_p->u.create_file.metafile_handle = resp_p->u.create_file.handle;

    gossip_debug(
        GOSSIP_CLIENT_DEBUG, "*** Got newly created handle %llu\n",
        llu(sm_p->u.create_file.metafile_handle));

    return 0;
}


static inline int PINT_get_object_ref_create_file(
    struct PVFS_server_req *req, PVFS_fs_id *fs_id, PVFS_handle *handle)
{
    *fs_id = req->u.create_file.fs_id;
    *handle = PVFS_HANDLE_NULL;
    return 0;
};

struct PINT_server_req_params pvfs2_create_file_params =
{
    .string_name = "create_file",
    .get_object_ref = PINT_get_object_ref_create_file,
    .perm = PINT_SERVER_CHECK_NONE,
    .access_type = PINT_server_req_modify,
    .state_machine = &pvfs2_create_file_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
