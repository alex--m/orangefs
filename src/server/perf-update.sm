/*
 * (C) 2001 Clemson University and The University of Chicago
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/time.h>

#include "pvfs2-server.h"
#include "pint-perf-counter.h"
#include "server-config.h"
#include "pint-event.h"
#include "perf-stat.h"

static int perf_update_do_work(PINT_server_op *s_op, job_status_s* js_p);
static int perf_update_error(PINT_server_op *s_op, job_status_s* js_p);



%%

machine pvfs2_perf_update_sm(do_work, error)
{
	state do_work
	{
		run perf_update_do_work;
		success => do_work;
		default => error;
	}

	state error
	{
		run perf_update_error;
		default => terminate;
	}
}

%%

/* perf_update_error()
 *
 * cleans up any resources consumed by this state machine and ends
 * execution of the machine
 */
static int perf_update_error(PINT_server_op *s_op, job_status_s* js_p)
{
    gossip_err("Error: stopping server performance monitoring.\n");

    PINT_perf_finalize(PINT_server_pc);

    return(server_state_machine_complete(s_op));
}

/* perf_update_do_work()
 *
 * resets counters, updates metrices, etc- this is intended to be called
 * repeatedly on a regular interval
 */
static int perf_update_do_work(PINT_server_op *s_op, job_status_s* js_p)
{
    job_id_t tmp_id;
    int i;
    uint64_t current_mask = 0;
    int current_debug_on = 0;
    struct server_configuration_s *user_opts = get_server_config_struct();

    static struct sstat * cursstat;
    static struct sstat * presstat; /* preserve values */
    static int first_run = 1;

    struct sstat devsstat;

    /* roll over to next set of statistics */
    PINT_perf_rollover(PINT_server_pc);

#if 0
    PINT_STATE_DEBUG("do_work");
#endif
    /*
     * Fill non setable values like load, cpu etc...
     */
    if (first_run)
    {
        cursstat = malloc(sizeof(struct sstat));
        presstat = malloc(sizeof(struct sstat));

        photosyst(cursstat);
    }
    else
    {
        static struct sstat * tmpstat;
        tmpstat = cursstat;
        cursstat = presstat;
        presstat = tmpstat;

        photosyst(cursstat);
        deviatsyst(cursstat, presstat, &devsstat);
    }

    if (! first_run)
    {
    for(i=0; i<PINT_server_pc->key_count; i++)
    {
        int j;
        uint64_t total = 0;
        switch(PINT_server_pc->key_array[i].key){
        case(PINT_PERF_LOAD):{
          /* get the current load */
#ifdef HAVE_SYSINFO
            struct sysinfo system_metrics;
            memset(&system_metrics, 0, sizeof(struct sysinfo));
            if (sysinfo(&system_metrics) == 0)
            {
                total = system_metrics.loads[0];
            }
#endif
            break;
        }
        case(PINT_PERF_CPU):{
            /* do not include wait_time and idle_time */
            total = devsstat.cpu.all.utime + devsstat.cpu.all.stime;
            break;
        }
        case(PINT_PERF_DISK_READ):{
            for(j=0; j < devsstat.xdsk.nrxdsk; j++)
            {
                total += devsstat.xdsk.xdsk[j].nrblk;
            }
            break;
        }
        case(PINT_PERF_DISK_WRITE):{
            for(j=0; j < devsstat.xdsk.nrxdsk; j++)
            {
                total += devsstat.xdsk.xdsk[j].nwblk;
            }
            break;
        }
        case(PINT_PERF_NETWORK_READ):{
            for(j=0; j < devsstat.intf.nrintf; j++)
            {
                total += devsstat.intf.intf[j].rbyte;
            }
            break;
        }
        case(PINT_PERF_NETWORK_WRITE):{
            for(j=0; j < devsstat.intf.nrintf; j++)
            {
                total += devsstat.intf.intf[j].sbyte;
            }
            break;
        }
        default:
            total = PINT_server_pc->value_matrix[i][1];
        }
        PINT_server_pc->value_matrix[i][1] = total;
    }

    gossip_get_debug_mask(&current_debug_on, &current_mask);
    /*
     * log values to event subsystem
     */
    for(i=0; i < PINT_server_pc->key_count; i++){
        if(current_debug_on)
        {
            int64_t val;
            /* always take values from LAST interval which data is fixated */
            if(PINT_server_pc->key_array[i].flag == PINT_PERF_PRESERVE){
                val = PINT_server_pc->value_matrix[i][1] -
                      PINT_server_pc->value_matrix[i][2];
            }else{
                val = PINT_server_pc->value_matrix[i][1];
            }
#if defined(HAVE_MPE)
           PINT_event_timestamp(PVFS_EVENT_API_PERFORMANCE_COUNTER, i,
                    val, 0,0);
#endif
           if(current_mask & GOSSIP_PERFCOUNTER_DEBUG)
           {
                fprintf(stderr, "perf-update-stat:%s val:%lld\n",
                    PINT_server_pc->key_array[i].key_name, val);
           }
        }
    }

    } /* end ! first_run */

    first_run = 0;


    /* post another timer */
    return(job_req_sched_post_timer(user_opts->perf_update_interval,
	s_op,
	0,
	js_p,
	&tmp_id,
	server_job_context));
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

