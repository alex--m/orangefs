/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/*
 *  PVFS2 server state machine for driving lock operations (acquire/release).
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-request.h"
#include "pint-distribution.h"
#include "pint-request.h"
#include "pvfs2-internal.h"
#include "lock-storage.h"

const char *PVFS_lock_type_mapping[] =
{                                       
    "PVFS_CLIENT_ACQUIRE_TWO_PHASE",    
    "PVFS_CLIENT_ACQUIRE_ONE_TRY",      
    "PVFS_CLIENT_ACQUIRE_ALT_TRY",      
    "PVFS_CLIENT_RELEASE",              
    "PVFS_SERVER_LOCK_INIT",            
    "PVFS_SERVER_ACQUIRE_NEW_NONBLOCK", 
    "PVFS_SERVER_ACQUIRE_NEW_BLOCK",    
    "PVFS_SERVER_ACQUIRE_NONBLOCK",     
    "PVFS_SERVER_ACQUIRE_BLOCK",        
    "PVFS_SERVER_RELEASE_SOME",         
    "PVFS_SERVER_RELEASE_ALL"           
};

static PINT_sm_action lock_change_lock(
    struct PINT_smcb *smcb, job_status_s* js_p);
static PINT_sm_action lock_cleanup(
    struct PINT_smcb *smcb, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];

%%

machine pvfs2_lock_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => change_lock;
        default => send_response;
    }

    state change_lock
    {
        run lock_change_lock;
        default => send_response;
    }

    state send_response
    {
	jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run lock_cleanup;
        default => terminate;
    }
}

%%

static PINT_sm_action lock_change_lock(
    struct PINT_smcb *smcb, job_status_s* js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    PVFS_object_ref object_ref;
    PINT_request_file_data fdata;
    memset(&s_op->resp.u.lock, 0, sizeof(struct PVFS_servresp_lock));

    /* Set some of the resp fields */
    s_op->resp.u.lock.lock_type = s_op->req->u.lock.lock_type;
    s_op->resp.u.lock.bstream_size = s_op->ds_attr.b_size;
    
    object_ref.fs_id = s_op->req->u.lock.fs_id;
    object_ref.handle = s_op->req->u.lock.handle;

    fdata.server_nr = s_op->req->u.lock.server_nr;
    fdata.server_ct = s_op->req->u.lock.server_ct;
    fdata.dist = s_op->req->u.lock.io_dist;
    fdata.fsize = s_op->ds_attr.b_size;
    fdata.extend_flag = 1;

    gossip_debug(GOSSIP_LOCK_DEBUG,
		 "Request %s received with final_offset %Ld\n", 
		 PVFS_lock_type_mapping[s_op->req->u.lock.lock_type],
		 s_op->req->u.lock.final_offset);

    if ((s_op->req->u.lock.lock_type != PVFS_SERVER_RELEASE_SOME) &&
	(s_op->req->u.lock.lock_type != PVFS_SERVER_RELEASE_ALL))
    {
	lock_req_t *lock_req_p;
	
	ret = add_lock_req(&object_ref,
			   s_op->req->u.lock.io_type,
			   s_op->req->u.lock.lock_type,
			   s_op->req->u.lock.lock_id,
			   &fdata,
			   s_op->req->u.lock.file_req,
			   s_op->req->u.lock.file_req_offset,
			   s_op->req->u.lock.final_offset,
			   s_op->req->u.lock.aggregate_size,		   
			   &(s_op->resp.u.lock),
			   &lock_req_p);
	/* Set this to NULL so that it isn't killed at the end of the
	 * operation for new operations.  It will be freed by the
	 * revise_lock_req() during the relase call */
	if ((s_op->req->u.lock.lock_type == 
	     PVFS_SERVER_ACQUIRE_NEW_NONBLOCK) ||
	    (s_op->req->u.lock.lock_type == 	      
	     PVFS_SERVER_ACQUIRE_NEW_BLOCK))
	    s_op->req->u.lock.file_req = NULL;

	if (ret == 0)
	{
	    int err = -1;
	    
	    gossip_debug(GOSSIP_LOCK_DEBUG, 
			 "lock_change_lock: starting job\n");
	    
	    err = job_lock_wait_block_bytes(smcb,
					    lock_req_p);
	    return err;
#if 0
	    print_lock_file_table_all_info();
#endif
	}
    }
    else
    {
	revise_lock_req(&object_ref,
			s_op->req->u.lock.lock_type,
			s_op->req->u.lock.lock_id,
			s_op->req->u.lock.final_offset,
			&(s_op->resp.u.lock),
			&(s_op->u.lock.lock_node_p));
    }
#if 0
    print_lock_file_table_all_info();
#endif
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action lock_cleanup(
    struct PINT_smcb *smcb, job_status_s* js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    /* Do the check after the message is sent so the client doesn't
     * have to wait excessively */
    if (((s_op->req->u.lock.lock_type == PVFS_SERVER_RELEASE_SOME) ||
	 (s_op->req->u.lock.lock_type == PVFS_SERVER_RELEASE_ALL)) &&
	(s_op->u.lock.lock_node_p != NULL))
    {
	check_lock_reqs(s_op->u.lock.lock_node_p);
    }

    return server_state_machine_complete(smcb);
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
