/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/* pvfs2_get_path_sm
 *
 * This state machine handles incoming server getpath operations.  These
 * are the operations sent by PVFS_sys_getpath().
 *
 * The pvfs2_prelude_sm is responsible for reading the actual metadata
 * to begin with, because it does this as part of the permission checking
 * process.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-types.h"
#include "pvfs2-util.h"
#include "pint-util.h"
#include "pint-perf-counter.h"
#include "pint-cached-config.h"
#include "dbpf-keyval.h"

#define NO_REMOTE 100
%%

machine pvfs2_get_path_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => setup_resp;
        default => final_response;
    }

    state setup_resp
    {
        run getpath_setup_resp;
        success => read_path;
        default => final_response;
    }

    state read_path
    {
        run getpath_read_path;
        success => get_parents;
        default => final_response;
    }

    state get_parents
    {
        run getpath_get_parents;
        NO_REMOTE => check_resp;
        success => call_msgpairarray;
        default => final_response;
    }

    state call_msgpairarray
    {
        jump pvfs2_msgpairarray_sm;
        success => check_resp;
        default => final_response;
    }
    state check_resp
    {
        run getpath_check_resp;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup   
    {
        run getpath_cleanup;
        default => terminate;
    }
}

%%

/*
 * getpath_setup_resp()
 * Set up the response - allocate needed resources
 */
static PINT_sm_action getpath_setup_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    int ret=0, i=0, meta_serv_num=0;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_setup_resp: enter\n");

    js_p->error_code = 0;
    ret = job_req_sched_post(s_op->op, s_op->target_fs_id, s_op->target_handle,
                             s_op->access_type, s_op->sched_policy,
                             smcb, 0, js_p, 
                             &(s_op->scheduled_id), server_job_context);
    PINT_perf_count(PINT_server_pc, PINT_PERF_REQSCHED, 1, PINT_PERF_ADD);

    PINT_cached_config_get_root_handle(s_op->req->u.getpath.fs_id, 
        &(s_op->u.getpath.root_handle));


    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: root handle is %llu\n", 
                 llu(s_op->u.getpath.root_handle));

    s_op->u.getpath.count = s_op->req->u.getpath.count;
    s_op->resp.u.getpath.count = s_op->req->u.getpath.count;
    s_op->u.getpath.dirent_p = s_op->req->u.getpath.dirent;
    if( (s_op->u.getpath.handle_p = calloc( s_op->req->u.getpath.count, 
                                            sizeof(PVFS_handle))) == 0 )
    {
        js_p->error_code = -TROVE_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    if( (s_op->resp.u.getpath.dirent = calloc( s_op->req->u.getpath.count, 
                                               sizeof(PVFS_dirent))) == 0)
    {
        js_p->error_code = -TROVE_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* allocate a per meta server dirent list */
    PINT_cached_config_get_num_meta( s_op->target_fs_id, &(meta_serv_num) );
    s_op->u.getpath.meta_num = meta_serv_num;

    if( (s_op->u.getpath.remote_dirent = calloc( meta_serv_num, 
        sizeof(PVFS_dirent *))) == 0 )
    {
        js_p->error_code = -TROVE_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    for( i = 0; i < meta_serv_num; i ++ )
    {
        if( (s_op->u.getpath.remote_dirent[i] = calloc( s_op->u.getpath.count,
             sizeof(PVFS_dirent))) == 0 )
        {
            js_p->error_code = -TROVE_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
    }

    /* allocate a per meta server remote_count array */
    if( (s_op->u.getpath.remote_count = calloc( meta_serv_num, 
        sizeof(uint32_t))) == 0 )
    {
        js_p->error_code = -TROVE_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    gossip_debug(GOSSIP_GETPATH_DEBUG,
                 "[GETPATH]: getpath: count: %u, dirent_p: %p, handle_p: %p\n",
                 s_op->req->u.getpath.count, s_op->u.getpath.dirent_p, 
                 s_op->u.getpath.handle_p );

    for( i=0; i <  s_op->req->u.getpath.count; i++ )
    {
        gossip_debug(GOSSIP_GETPATH_DEBUG,
                     "[GETPATH]: getpath request [%d]:[%llu]\n", 
                     i, llu(s_op->req->u.getpath.dirent[i].handle));
    }

    s_op->target_fs_id = s_op->req->u.getpath.fs_id;
    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_setup_resp: exit\n");
    return SM_ACTION_COMPLETE;
}

/*
 *
 */
static PINT_sm_action getpath_read_path(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
 
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t i;

    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_read_path: enter\n");
    js_p->error_code = 0;

    ret = job_trove_keyval_read_value_path(
        s_op->req->u.getpath.fs_id,
        s_op->u.getpath.count,
        s_op->u.getpath.dirent_p,
        s_op->u.getpath.handle_p,
        0,
        NULL,
        smcb,
        0,
        js_p,
        &i,
        server_job_context, s_op->req->hints);

    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_read_value: exit\n");

    return ret;
}

static PINT_sm_action getpath_get_parents(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    PINT_sm_msgpair_state *msg_p = NULL;
    int ret=0, i=0, j=0, k=0, meta_serv_num=0, no_remote=0, idx=0;
    PVFS_credentials creds;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *get_parent_s_op = PINT_sm_frame(smcb, 
        PINT_FRAME_CURRENT);
    struct server_configuration_s *user_opts = get_server_config_struct();

    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_get_parents: enter\n");

    /* iterate handles, any at root do not need to go on, count 'em */
    for( i = 0; i < s_op->u.getpath.count; i++ )
    {
        if( s_op->u.getpath.handle_p[i] != s_op->u.getpath.root_handle )
        {
            no_remote++;
        }
    }

    if( no_remote == 0 )
    {
        js_p->error_code = NO_REMOTE;
        return SM_ACTION_COMPLETE;
    }

    /* if the handle_p handle is same as dirent_p handle, no progress was
     * made locally to find it's parent handle, handle must go to all meta
     * servers. otherwise, look it up where the next handle is owned */

    /* get number of meta servers to size our calloc */
    PINT_cached_config_get_num_meta( s_op->target_fs_id, &(meta_serv_num) );
    if( (s_op->u.getpath.remote_addr = calloc(meta_serv_num, 
                                              sizeof(PVFS_BMI_addr_t))) == 0 )
    {
        gossip_err("get_path: failed to allocate remote_dirent_p\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* get the addresses of the meta servers to send to */
    ret = PINT_cached_config_get_server_array( s_op->req->u.getpath.fs_id,
        PINT_SERVER_TYPE_META, s_op->u.getpath.remote_addr, &(meta_serv_num));

    /* iterate over handles needing attention and add to appropriate meta
     * servers list(s) */
    for( i=0; i < s_op->u.getpath.count; i++ )
    {
        if( s_op->u.getpath.handle_p[i] != s_op->u.getpath.root_handle )
        {
            gossip_debug(GOSSIP_GETPATH_DEBUG,
                         "[GETPATH]: remote dirent entry [%s]:[%llu] "
                         "needing handle [%llu]\n", 
                         s_op->u.getpath.dirent_p[i].d_name, 
                         s_op->u.getpath.dirent_p[i].handle,
                         s_op->u.getpath.handle_p[i]);

            for( k = 0; k < meta_serv_num; k++ )
            {
                idx = s_op->u.getpath.remote_count[k];

                /* copy dirent to meta server's next free spot */
                memcpy( &(s_op->u.getpath.remote_dirent[k][idx]),
                        &(s_op->u.getpath.dirent_p[i]),
                        sizeof(PVFS_dirent) );

                s_op->u.getpath.remote_dirent[k][idx].handle = 
                    s_op->u.getpath.handle_p[i];
                s_op->u.getpath.remote_count[k]++;
            }
            gossip_debug(GOSSIP_GETPATH_DEBUG,
                         "[GETPATH]: Added handle (%llu) to "
                         "all meta data servers for (%llu)\n",
                         llu(s_op->u.getpath.handle_p[i].handle),
                         llu(s_op->u.getpath.dirent_p[i].handle));
        }
    }

    /* all handles needing path resolution now reside in each metadata's server
     * getpath.remote_dirent array. The number per metadata server is in
     * getpath.remote_count. */

    /* remove current host from array */
    for( i = 0, j=0; i < meta_serv_num; i++ )
    {
        BMI_addr_t h;
        ret = BMI_addr_lookup( &h, user_opts->host_id );
        if( ret != 0 )
        {
            gossip_err("get_path: failed to lookup address\n");
            js_p->error_code = -PVFS_EINVAL;
            return SM_ACTION_COMPLETE;
        }

        if( (memcmp(&h, &(s_op->u.getpath.remote_addr[i]), sizeof(BMI_addr_t)) 
            != 0) && (j<i) )
        {
            PVFS_dirent *tmp=NULL;
            memcpy( &(s_op->u.getpath.remote_addr[j]), 
                &(s_op->u.getpath.remote_addr[i]), sizeof(BMI_addr_t));
            tmp = s_op->u.getpath.remote_dirent[j];
            s_op->u.getpath.remote_dirent[j] = s_op->u.getpath.remote_dirent[i];
            s_op->u.getpath.remote_dirent[i] = tmp;
            j++;
            gossip_debug(GOSSIP_GETPATH_DEBUG, "[GETPATH]: Adding host "
                         "[%llu] to meta list\n", 
                         llu(s_op->u.getpath.remote_addr[i]) );
        }
        else
        {
            gossip_debug(GOSSIP_GETPATH_DEBUG, "[GETPATH]: Skipping item "
                         "%s [%llu] from meta list\n", user_opts->host_id,
                         llu(s_op->u.getpath.remote_addr[i]) );
        }
    }
    assert( (j <= meta_serv_num) );
   
    gossip_debug(GOSSIP_GETPATH_DEBUG, "[GETPATH]: Sending request to %d "
                 "hosts instead of %d\n", j, meta_serv_num);
    meta_serv_num = j;

    if( (s_op->u.getpath.remote_addr = realloc(s_op->u.getpath.remote_addr,
                                        meta_serv_num*sizeof(BMI_addr_t))) == 0)
    {
        gossip_err("getpath: realloc failed\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    ret = PINT_msgpairarray_init(&get_parent_s_op->msgarray_op, meta_serv_num);
    if (ret)
    {
        gossip_err("get_path: failed to allocate msgarray with %d msgs\n", 
            meta_serv_num);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* for each meta server, setup the message with the remaining handles */
    foreach_msgpair( &s_op->msgarray_op, msg_p, i )
    {

        s_op->msgarray_op.params.job_timeout = 
            user_opts->client_job_bmi_timeout;
        s_op->msgarray_op.params.retry_delay = user_opts->client_retry_delay_ms;
        s_op->msgarray_op.params.retry_limit = user_opts->client_retry_limit;
        s_op->msgarray_op.params.quiet_flag = 1;

        PINT_util_gen_credentials(&creds);
        PINT_SERVREQ_GETPATH_FILL(
            msg_p->req,
            s_op->req->credentials,
            s_op->target_fs_id,
            s_op->u.getpath.remote_count[i],
            s_op->u.getpath.remote_dirent[i],
            NULL);

        msg_p->fs_id = s_op->req->u.getpath.fs_id;
        msg_p->handle = s_op->u.getpath.root_handle;
        msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
        msg_p->comp_fn = NULL;
        memcpy( &(msg_p->svr_addr), &(s_op->u.getpath.remote_addr[i]), 
            sizeof(PVFS_BMI_addr_t));
        gossip_debug(GOSSIP_GETPATH_DEBUG, "[GETPATH]: setting msg %d to "
                     "%llu with %u handles\n", i, 
                     llu(s_op->u.getpath.remote_addr[i]), 
                     s_op->u.getpath.remote_count[i]);
    }

    PINT_sm_push_frame(smcb, 0, &s_op->msgarray_op);
    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_get_parents: exit\n");

    return SM_ACTION_COMPLETE;
}

/* getpath_check_resp()
 */
static PINT_sm_action getpath_check_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i=0, j=0;
    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_check_resp: enter\n");


    for( i=0; i < s_op->u.getpath.meta_num; i++ )
    {
        gossip_debug(GOSSIP_GETPATH_DEBUG, "[GETPATH]: meta %d\n", i);
        for( j=0; j < s_op->u.getpath.remote_count[i]; j++ )
        {
            gossip_debug(GOSSIP_GETPATH_DEBUG, "[GETPATH]:\t (%s)(%llu)\n",
                         s_op->u.getpath.remote_dirent[i][j].d_name,
                         s_op->u.getpath.remote_dirent[i][j].handle);
        }
    }

    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_check_resp: exit\n");
    return SM_ACTION_COMPLETE;
}

/* getpath_cleanup()
 * free resources alloc'd by state machine
 */
static PINT_sm_action getpath_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i = 0;
    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_cleanup: enter\n");

    for( i=0; i < s_op->u.getpath.meta_num; i++ )
    {
        if( s_op->u.getpath.remote_dirent[i] )
            free( s_op->u.getpath.remote_dirent[i] );
    }

    free(s_op->u.getpath.remote_dirent); 
    free(s_op->u.getpath.remote_addr); 
    free(s_op->u.getpath.remote_count); 
    free(s_op->u.getpath.handle_p); 
    free(s_op->resp.u.getpath.dirent); 
    
    gossip_debug(GOSSIP_GETPATH_DEBUG, 
                 "[GETPATH]: getpath_cleanup: exit\n");
    return(server_state_machine_complete(smcb));
}

PINT_GET_OBJECT_REF_DEFINE(getpath);

struct PINT_server_req_params pvfs2_get_path_params =
{
    .string_name = "getpath",
    .perm = PINT_SERVER_CHECK_READ,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .get_object_ref = PINT_get_object_ref_getpath,
    .state_machine = &pvfs2_get_path_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
