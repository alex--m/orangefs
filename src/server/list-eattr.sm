/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/* pvfs2_list_eattr_sm
 *
 * This state machine handles incoming server listxattr operations.  These
 * are the operations sent by PVFS_sys_listeattr() among others.
 *
 * The pvfs2_prelude_sm is responsible for reading the actual metadata
 * to begin with, because it does this as part of the permission checking
 * process.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-types.h"
#include "pvfs2-types-debug.h"
#include "pvfs2-util.h"
#include "pint-util.h"

static inline char *get_object_type(int objtype)
{
    static char *obj_types[] =
    {
         "NONE", "METAFILE", "DATAFILE",
         "DIRECTORY", "SYMLINK", "DIRDATA", "UNKNOWN"
    };
    switch(objtype)
    {
    case PVFS_TYPE_NONE:
         return obj_types[0];
    case PVFS_TYPE_METAFILE:
         return obj_types[1];
    case PVFS_TYPE_DATAFILE:
         return obj_types[2];
    case PVFS_TYPE_DIRECTORY:
         return obj_types[3];
    case PVFS_TYPE_SYMLINK:
         return obj_types[4];
    case PVFS_TYPE_DIRDATA:
         return obj_types[5];
    }
    return obj_types[6];
}

static int listeattr_setup_resp(
    PINT_server_op *s_op, job_status_s *js_p);
static int listeattr_list_eattrib(
    PINT_server_op *s_op, job_status_s *js_p);
static int listeattr_check_resp(
    PINT_server_op *s_op, job_status_s *js_p);
static int listeattr_cleanup(
    PINT_server_op *s_op, job_status_s *js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];

%%

machine pvfs2_list_eattr_sm(
    prelude,
    setup_resp,
    list_eattrib,
    check_resp,
    final_response,
    cleanup)
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => setup_resp;
        default => final_response;
    }

    state setup_resp
    {
        run listeattr_setup_resp;
        success => list_eattrib;
        default => final_response;
    }

    state list_eattrib
    {
        run listeattr_list_eattrib;
        default => check_resp;
    }

    state check_resp
    {
        run listeattr_check_resp;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run listeattr_cleanup;
        default => terminate;
    }
}

%%

/*
 * listeattr_setup_resp()
 * Set up the response - allocate needed resources
 */
static int listeattr_setup_resp(PINT_server_op *s_op, job_status_s *js_p)
{
    int i, tsz;
    PINT_STATE_DEBUG("setup_resp");
    gossip_debug(GOSSIP_LISTEATTR_DEBUG, "listeattr requesting %d keys\n",
            s_op->req->u.listeattr.nkey);
    s_op->resp.u.listeattr.key =
        malloc(s_op->req->u.listeattr.nkey * sizeof(PVFS_ds_keyval));
    if (!s_op->resp.u.listeattr.key)
        return -PVFS_ENOMEM;
    s_op->resp.u.listeattr.nkey = s_op->req->u.listeattr.nkey;
    for (i = 0, tsz = 0; i < s_op->req->u.listeattr.nkey; i++)
        tsz += s_op->req->u.listeattr.keysz[i];
    s_op->u.eattr.buffer = malloc(tsz);
    if (!s_op->u.eattr.buffer)
    {
        s_op->resp.u.listeattr.nkey = 0;
        free (s_op->resp.u.listeattr.key);
        return -PVFS_ENOMEM;
    }
    gossip_debug(GOSSIP_LISTEATTR_DEBUG,"listeattr buffer size %d bytes\n",
            tsz);
    for (i = 0, tsz = 0; i < s_op->req->u.listeattr.nkey; i++)
    {
        s_op->resp.u.listeattr.key[i].buffer_sz =
            s_op->req->u.listeattr.keysz[i];
        s_op->resp.u.listeattr.key[i].buffer =
            (char *)s_op->u.eattr.buffer + tsz;
        tsz += s_op->req->u.listeattr.keysz[i];
    }
    return 1;
}

/*
 * listeattr_list_eattrib()
 * Here is where the eattrib get listed.
 */
static int listeattr_list_eattrib(
    PINT_server_op *s_op, job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t i;

    PINT_STATE_DEBUG("list_eattrib");

    js_p->error_code = 0;

    ret = job_trove_keyval_iterate_keys(
        s_op->req->u.listeattr.fs_id,
        s_op->req->u.listeattr.handle,
        s_op->req->u.listeattr.token,
        s_op->resp.u.listeattr.key,
        s_op->req->u.listeattr.nkey,
        0,
        NULL,
        s_op,
        0,
        js_p,
        &i,
        server_job_context);

    return ret;
}

#if 0
static void print_string(char *buffer, size_t length)
{
    int i;
    if (length == 0 || buffer == NULL)
    {
        return;
    }
    for (i = 0; i < length; i++)
    {
        printf("%c", buffer[i]);
    }
    printf("\n");
    return;
}
#endif

/*
 * listeattr_check_resp()
 * Check the response - handle any errors
 * We also need to do filtering here to prevent TROVE_COMMON_KEYS from
 * being made visible to the users
 * Possibly others if we decide acl's should not be made visible...
 */
static int listeattr_check_resp(PINT_server_op *s_op, job_status_s *js_p)
{
    int k, count_valid = 0, error = 0, tmp_size = 0, *tmp_valid = NULL, orig_size = 0;
    char *tmp_buffer = NULL;
    PVFS_object_attr *a_p = NULL;

    PINT_STATE_DEBUG("check_resp");
    if (s_op->resp.u.listeattr.nkey > 0)
    {
        tmp_valid = (int *) calloc(1, s_op->resp.u.listeattr.nkey * sizeof(int));
        if (tmp_valid == NULL)
            js_p->error_code = -PVFS_ENOMEM;
    }
    a_p = &s_op->attr;
    gossip_debug(GOSSIP_LISTEATTR_DEBUG,"listeattr obtained %d instead of %d keys\n",
            js_p->count, s_op->resp.u.listeattr.nkey);
    /* put the returned read buffer size in buffer_sz */
    /* it is the only thing returned across the wire */
    gossip_debug(GOSSIP_LISTEATTR_DEBUG,"status %d error_code %d nkeys %d spare_buffer %p\n",
            s_op->resp.status, js_p->error_code, s_op->resp.u.listeattr.nkey, s_op->u.eattr.buffer);
    for (k = 0; k < s_op->resp.u.listeattr.nkey; k++)
    {
        orig_size += s_op->req->u.listeattr.keysz[k];
        if (js_p->error_code == 0)
        {
            gossip_debug(GOSSIP_LISTEATTR_DEBUG, "key[%d] = %p\n",
                             k, s_op->resp.u.listeattr.key[k].buffer);
            if (a_p->objtype == PVFS_TYPE_METAFILE)
            {
                /* dont even check these if they are not valid */
                if (k >= js_p->count)
                {
                    continue;
                }
                /* We dont wish to return these keys.. */
                if (!strncmp(s_op->resp.u.listeattr.key[k].buffer,
                    Trove_Common_Keys[METAFILE_HANDLES_KEY].key,
                    s_op->resp.u.listeattr.key[k].read_sz) ||
                    !strncmp(s_op->resp.u.listeattr.key[k].buffer,
                    Trove_Common_Keys[METAFILE_DIST_KEY].key,
                    s_op->resp.u.listeattr.key[k].read_sz))
                {
                    continue;
                }
            }
            else if (a_p->objtype == PVFS_TYPE_SYMLINK)
            {
                /* dont even check these if they are not valid */
                if (k >= js_p->count)
                {
                    continue;
                }
                if (!strncmp(s_op->resp.u.listeattr.key[k].buffer,
                    Trove_Common_Keys[SYMLINK_TARGET_KEY].key,
                    s_op->resp.u.listeattr.key[k].read_sz))
                {
                    continue;
                }
            }
            else if (a_p->objtype == PVFS_TYPE_DIRECTORY)
            {
                /* dont even check these if they are not valid */
                if (k >= js_p->count)
                {
                    continue;
                }
                if (!strncmp(s_op->resp.u.listeattr.key[k].buffer,
                    Trove_Common_Keys[DIR_ENT_KEY].key,
                    s_op->resp.u.listeattr.key[k].read_sz))
                {
                    continue;
                }
            }
            tmp_valid[k] = s_op->resp.u.listeattr.key[k].read_sz;
            count_valid++;
            tmp_size += s_op->resp.u.listeattr.key[k].read_sz;
            s_op->resp.u.listeattr.key[k].buffer_sz =
                s_op->resp.u.listeattr.key[k].read_sz;
        }
        /* in case of any errors, we initialize it to 0 */
        else {
            s_op->resp.u.listeattr.key[k].buffer_sz = 0;
            s_op->resp.u.listeattr.key[k].read_sz = 0;
            error = 1;
        }
    }
    /* On any errors, return */
    if (error) 
    {
        if (tmp_valid)
            free(tmp_valid);
        return 1;
    }
    /* Nothing was requested? then fill token to hold the max available keys */
    if (s_op->resp.u.listeattr.nkey == 0)
    {
        s_op->resp.u.listeattr.token = js_p->count;
        if (tmp_valid)
            free(tmp_valid);
        return 1;
    }
    s_op->resp.u.listeattr.token = js_p->position;
    /* if nothing has to be filtered, then return */
    if (count_valid == s_op->resp.u.listeattr.nkey)
    {
        if (tmp_valid)
            free(tmp_valid);
        return 1;
    }
    /* Allocate something large enough to hold the filtered set of keys */
    tmp_buffer = (char *) calloc(1, tmp_size);
    if (tmp_buffer == NULL)
    {
        if (tmp_valid)
            free(tmp_valid);
        js_p->error_code = -PVFS_ENOMEM;
        for (k = 0; k < s_op->resp.u.listeattr.nkey; k++)
        {
            s_op->resp.u.listeattr.key[k].buffer_sz = 0;
        }
        return 1;
    }
    gossip_debug(GOSSIP_LISTEATTR_DEBUG, "tmp_buffer (%p,%d) spare_buffer (%p,%d)\n", 
        tmp_buffer, tmp_size, s_op->u.eattr.buffer, orig_size);
    tmp_size = 0;
    count_valid = 0;
    for (k = 0; k <  s_op->resp.u.listeattr.nkey; k++)
    {
        if (tmp_valid[k] > 0)
        {
            gossip_debug(GOSSIP_LISTEATTR_DEBUG, "tmp_size = %d tmp_valid[%d] = %d buf = %s(%p)\n",
                    tmp_size, k, tmp_valid[k], (char *)s_op->resp.u.listeattr.key[k].buffer,
                    s_op->resp.u.listeattr.key[k].buffer);
            memcpy(tmp_buffer + tmp_size, s_op->resp.u.listeattr.key[k].buffer, tmp_valid[k]);
            s_op->resp.u.listeattr.key[count_valid].buffer = (char *) s_op->u.eattr.buffer + tmp_size; 
            gossip_debug(GOSSIP_LISTEATTR_DEBUG, "buf [%d] = %p\n", 
                    count_valid, s_op->resp.u.listeattr.key[count_valid].buffer);
            tmp_size += tmp_valid[k];
            s_op->resp.u.listeattr.key[count_valid].read_sz 
                     = s_op->resp.u.listeattr.key[count_valid].buffer_sz = tmp_valid[k];
            gossip_debug(GOSSIP_LISTEATTR_DEBUG, "k = %d read_sz: %d\n", k, tmp_valid[k]);
            count_valid++;
        }
    }
    /* Copy it to the scratch buffer */
    memcpy(s_op->u.eattr.buffer, tmp_buffer, tmp_size);
    for (k = 0; k < count_valid; k++)
    {
        gossip_debug(GOSSIP_LISTEATTR_DEBUG, "afterwards buf[%d] = %s (%p)\n", k,
                (char *) s_op->resp.u.listeattr.key[k].buffer, s_op->resp.u.listeattr.key[k].buffer);
    }
    s_op->resp.u.listeattr.nkey = count_valid;
    free(tmp_buffer);
    free(tmp_valid);
    gossip_debug(GOSSIP_LISTEATTR_DEBUG, "listeattr returning %d keys after filtering\n",
                    count_valid);
    return 1;
}

/* listeattr_cleanup()
 * free resources alloc'd by state machine
 */
static int listeattr_cleanup(PINT_server_op *s_op, job_status_s *js_p)
{
    PINT_STATE_DEBUG("listeattr_cleanup");
    if (s_op->resp.u.listeattr.key)
        free(s_op->resp.u.listeattr.key);
    if (s_op->u.eattr.buffer)
        free(s_op->u.eattr.buffer);
    return(server_state_machine_complete(s_op));
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

