/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <ctype.h>
#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-util.h"
#include "pvfs2-internal.h"

enum
{
    INVALID_OBJECT = 131,
    UPDATE_DIR_ATTR_REQUIRED
};

static int crdirent_setup_op(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_validate(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_read_directory_entry_handle(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_write_directory_entry(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_check_exist_directory_entry(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_create_dirdata_dspace(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_write_dirdata_handle(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_check_for_req_dir_update(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_update_directory_attr(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_cleanup(
    PINT_server_op *s_op, job_status_s *js_p);
static int crdirent_set_error_code(
    PINT_server_op *s_op, job_status_s *js_p);
static int validation_object_type_failure(
    PINT_server_op *s_op, job_status_s *js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];

%%

nested machine pvfs2_check_entry_not_exist_sm(
    validate,
    read_directory_entry_handle, 
    create_dirdata_dspace,
    write_dirdata_handle,
    check_exist_directory_entry,
    set_error_code,
    validation_object_type_failure)
{
    state validate
    {
        run crdirent_validate;
        success => read_directory_entry_handle;
        INVALID_OBJECT => validation_object_type_failure;
        default => return;
    }
        
    state read_directory_entry_handle
    {
        run crdirent_read_directory_entry_handle;
        success => check_exist_directory_entry;
        default => create_dirdata_dspace;
    }

    state check_exist_directory_entry
    {
        run crdirent_check_exist_directory_entry;
        default => set_error_code;
    }

    state set_error_code
    {
        run crdirent_set_error_code;
        default => return;
    }

    state validation_object_type_failure
    {
        run validation_object_type_failure;
        default => return;
    }

    state create_dirdata_dspace
    {
        run crdirent_create_dirdata_dspace;
        success => write_dirdata_handle;
        default => return;
    }

    state write_dirdata_handle
    {
        run crdirent_write_dirdata_handle;
        default => return;
    }
}

machine pvfs2_crdirent_sm(
    prelude,
    setup_op,
    check_not_exist,
    write_directory_entry,
    check_for_req_dir_update,
    update_directory_attr,
    cleanup,
    final_response)
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => setup_op;
        default => final_response;
    }

    state setup_op
    {
        run crdirent_setup_op;
        default => check_not_exist;
    }

    state check_not_exist
    {
        jump pvfs2_check_entry_not_exist_sm;
        success => write_directory_entry;
        default => final_response;
    }

    state write_directory_entry
    {
        run crdirent_write_directory_entry;
        default => check_for_req_dir_update;
    }

    state check_for_req_dir_update
    {
        run crdirent_check_for_req_dir_update;
        UPDATE_DIR_ATTR_REQUIRED => update_directory_attr;
        default => final_response;
    }

    state update_directory_attr
    {
        run crdirent_update_directory_attr;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run crdirent_cleanup;
        default => terminate;
    }
}

%%

/*
 * Function: crdirent_validate
 *
 * Synopsis: verifies that entry name and object type is valid
 */
static int crdirent_validate(PINT_server_op *s_op,
                             job_status_s *js_p)
{
    char *ptr = NULL;

    PINT_STATE_DEBUG("validate");

    if ((s_op->u.crdirent.name == NULL) ||
        (s_op->u.crdirent.parent_handle == PVFS_HANDLE_NULL))
    {
        js_p->error_code = -PVFS_EINVAL;
        return 1;
    }

    gossip_debug(GOSSIP_SERVER_DEBUG,
            "  got crdirent for %s (with handle %llu) in %llu\n",
            s_op->u.crdirent.name,
            llu(s_op->u.crdirent.new_handle),
            llu(s_op->u.crdirent.parent_handle));

    /* check for invalid characters in name */
    ptr = s_op->u.crdirent.name;
    while (*ptr != '\0' && *ptr != '/' ) ptr++;

    if (*ptr != '\0')
    {
        /* found an invalid character -- report it and send error response */
        gossip_lerr("crdirent: error: invalid character (%s)"
                "in name (%s); sending error response.\n",
                ptr, s_op->u.crdirent.name);
        /* for parity with linux VFS, allow any character except / in 
         * filenames.   */
        
        js_p->error_code = -PVFS_EINVAL;

         /* Do not zero the scheduled_id, as this operation was
          * scheduled before we checked the filename */
        return 1;
    }

    /* make sure we're dealing with a directory */
    if (!(s_op->attr.mask & PVFS_ATTR_COMMON_TYPE) ||
        !(s_op->attr.objtype == PVFS_TYPE_DIRECTORY))
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, " Cannot read dirent on "
                     "a non-directory!  Returning error.\n");

        js_p->error_code = INVALID_OBJECT;
        return 1;
    }

    js_p->error_code = 0;
    return 1;
}

/*
 * Function: crdirent_read_directory_entry_handle
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Pre:      s_op->u.crdirent.parent_handle is handle of directory
 *
 * Post:     s_op->val.buffer is the directory entry k/v space OR NULL
 *           if first entry
 *
 * Returns:  int
 *
 * Synopsis: Given a directory handle, look up the handle used to store
 * directory entries for this directory.
 *
 * Get the directory entry handle for the directory entry k/v space.
 * Recall that directories have two key-val spaces, one of which is
 * synonymous with files where the metadata is stored.  The other
 * space holds the filenames and their handles.  In this function, we
 * attempt to retrieve the handle for the filename/handle key/val
 * space and if it does not exist, we need to create it.
 *
 */
static int crdirent_read_directory_entry_handle(
    PINT_server_op *s_op, job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t i;

    PINT_STATE_DEBUG("read_directory_entry_handle");

    /* get the key and key size out of our list of common keys */
    s_op->key.buffer = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    /* store the handle in the crdirent-specific space in s_op */
    s_op->val.buffer = &s_op->u.crdirent.dirent_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    ret = job_trove_keyval_read(
        s_op->u.crdirent.fs_id,
        s_op->u.crdirent.parent_handle,
        &s_op->key,
        &s_op->val,
        0,
        NULL,
        s_op,
        0,
        js_p,
        &i,
        server_job_context);

    return ret;
}

static int validation_object_type_failure(
    PINT_server_op *s_op, job_status_s *js_p)
{
    gossip_debug(GOSSIP_SERVER_DEBUG, "crdirent: validation_object_"
                 "type_failure called\n");

    js_p->error_code = -PVFS_ENOTDIR;
    return 1;
}

/*
 * Function: crdirent_create_dirdata_dspace
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Pre:      js_p->handle = NULL
 *           js_p->error_code < 0
 *
 * Post:     js_p->handle contains a new handle for a k/v space
 *
 * Returns:  int
 *
 * Synopsis: If we execute this function, this directory does not have
 *           any entries in it.  So we need to create a key val space
 *           for these entries.  This is the first part, and we store
 *           it in part two.
 */
static int crdirent_create_dirdata_dspace(PINT_server_op *s_op,
                                          job_status_s *js_p)
{
    int ret = -PVFS_ENOMEM;
    job_id_t i;
    PVFS_handle_extent_array extent_array;
    struct server_configuration_s *user_opts = get_server_config_struct();

    PINT_STATE_DEBUG("create_dirdata_dspace");

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  creating dspace (coll_id = %d)\n",
        s_op->u.crdirent.fs_id);

    /* find our meta handle range for this create */
    ret = PINT_config_get_meta_handle_extent_array(
        user_opts, s_op->u.crdirent.fs_id, &extent_array);
    assert(ret == 0);
    assert(extent_array.extent_count > 0);

    gossip_debug(GOSSIP_SERVER_DEBUG, "  new handle should be in range "
                 "starting with %llu-%llu\n",
                 llu(extent_array.extent_array[0].first),
                 llu(extent_array.extent_array[0].last));

    ret = job_trove_dspace_create(
        s_op->u.crdirent.fs_id,
        &extent_array,
        PVFS_TYPE_DIRDATA,
        NULL,
        PINT_config_get_trove_meta_flags(
            user_opts, s_op->u.crdirent.fs_id),
        s_op,
        0,
        js_p,
        &i,
        server_job_context);

    free(extent_array.extent_array);
    extent_array.extent_array = NULL;

    return ret;
}

/*
 * Function: crdirent_write_dirdata_handle
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Pre:      js_p->handle is the new directory entry k/v space
 *
 * Post:     js_p->handle is stored in the original k/v space for the
 *           parent handle.
 *
 * Returns:  int
 *
 * Synopsis: We are storing the newly created k/v space for future
 *           directory entries.
 *           
 */
static int crdirent_write_dirdata_handle(PINT_server_op *s_op,
                                         job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t i;
    struct server_configuration_s *user_opts = get_server_config_struct();

    PINT_STATE_DEBUG("write_dirdata_handle");

    if (js_p->error_code)
    {
        return 1;
    }
    js_p->error_code = 0;

    /*
      the last state was create_dirdata_dspace, so handle is in
      js_p->handle. save it
    */
    s_op->u.crdirent.dirent_handle = js_p->handle;

    s_op->key.buffer = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    /* use the crdirent scratch space for the dest handle */
    s_op->val.buffer = &s_op->u.crdirent.dirent_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  writing dirdata handle (%llu) "
        "into parent directory keyval space (%llu)\n",
        llu(s_op->u.crdirent.dirent_handle),
        llu(s_op->u.crdirent.parent_handle));

    ret = job_trove_keyval_write(
        s_op->u.crdirent.fs_id,
        s_op->u.crdirent.parent_handle,
        &s_op->key,
        &s_op->val,
        PINT_config_get_trove_meta_flags(
            user_opts, s_op->u.crdirent.fs_id),
        NULL,
        s_op,
        0, 
        js_p,
        &i,
        server_job_context);

    return ret;
}

/*
 * Function: crdirent_write_directory_entry
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Pre:      s_op->u.crdirent.dirent_handle is the directory entry k/v space
 *           s_op->u.crdirent.name != NULL
 *           s_op->u.crdirent.new_handle != NULL
 *
 * Post:     key/val pair stored
 *
 * Returns:  int
 *
 * Synopsis: We are now ready to store the name/handle pair in the k/v
 *           space for directory handles.
 */
static int crdirent_write_directory_entry(PINT_server_op *s_op,
                                          job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t i;
    struct server_configuration_s *user_opts =
        get_server_config_struct();

    PINT_STATE_DEBUG("write_directory_entry");

    js_p->error_code = 0;

    /* This buffer came from one of two places, either phase two of
     * creating the directory space when we wrote the value back to
     * trove, or from the initial read from trove.
     */

    /* this is the name for the parent entry */
    s_op->key.buffer = s_op->u.crdirent.name;
    s_op->key.buffer_sz = strlen(s_op->u.crdirent.name) + 1;

    s_op->val.buffer = &s_op->u.crdirent.new_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(GOSSIP_SERVER_DEBUG, "  writing new directory entry "
                 "for %s (handle = %llu) to dirdata dspace %llu\n",
                 s_op->u.crdirent.name, llu(s_op->u.crdirent.new_handle),
                 llu(s_op->u.crdirent.dirent_handle));

    ret = job_trove_keyval_write(
        s_op->u.crdirent.fs_id, s_op->u.crdirent.dirent_handle,
        &s_op->key, &s_op->val, PINT_config_get_trove_meta_flags(
            user_opts, s_op->u.crdirent.fs_id),
        NULL, s_op, 0, js_p, &i, server_job_context);

    /*
      check if any attributes have changed on the parent that require
      an update; object times only are considered
    */
    if (s_op->req->u.crdirent.parent_atime ||
        s_op->req->u.crdirent.parent_mtime ||
        s_op->req->u.crdirent.parent_ctime)
    {
        s_op->u.crdirent.dir_attr_update_required = 1;
    }
    return ret;
}

static int crdirent_check_for_req_dir_update(
    PINT_server_op *s_op, job_status_s *js_p)
{
    if ((js_p->error_code == 0) &&
        (s_op->u.crdirent.dir_attr_update_required))
    {
        js_p->error_code = UPDATE_DIR_ATTR_REQUIRED;
    }
    return 1;
}

static int crdirent_update_directory_attr(
    PINT_server_op *s_op, job_status_s *js_p)
{
    int ret = -1;
    job_id_t j_id;
    PVFS_object_attr tmp_attr, *tmp_attr_ptr = &tmp_attr;
    PVFS_object_attr *dspace_attr = NULL;
    PVFS_ds_attributes *ds_attr = NULL;
    struct server_configuration_s *user_opts = get_server_config_struct();

    PINT_STATE_DEBUG("update_directory_entry");

    if (js_p->error_code != UPDATE_DIR_ATTR_REQUIRED)
    {
        PVFS_perror_gossip("previous keyval write failed",
                           js_p->error_code);
        return 1;
    }

    memset(&tmp_attr, 0, sizeof(PVFS_object_attr));
    dspace_attr = &s_op->attr;
    ds_attr = &(s_op->ds_attr);

    PVFS_object_attr_overwrite_setable(tmp_attr_ptr, dspace_attr);

    /* overwrite all non-null attribute time fields */
    if (s_op->req->u.crdirent.parent_atime)
    {
        tmp_attr_ptr->atime = s_op->req->u.crdirent.parent_atime;
    }

    if (s_op->req->u.crdirent.parent_mtime)
    {
        /*
          directory mtime is stored as a version, but converted to a
          normal mtime on getattr; the mtime version is passed back on
          readdir operations
        */
        gossip_debug(
            GOSSIP_SERVER_DEBUG, "updating parent dir version "
            "to %llu\n\tmtime is %llu\n",
            llu(PVFS_util_mktime_version(s_op->req->u.crdirent.parent_mtime)),
            llu(s_op->req->u.crdirent.parent_mtime));

        tmp_attr_ptr->mtime = PVFS_util_mktime_version(
                    s_op->req->u.crdirent.parent_mtime);
    }

    if (s_op->req->u.crdirent.parent_ctime)
    {
        tmp_attr_ptr->ctime = s_op->req->u.crdirent.parent_ctime;
    }

    ds_attr = &(s_op->ds_attr);
    PVFS_object_attr_to_ds_attr(tmp_attr_ptr, ds_attr);

    ret = job_trove_dspace_setattr(
        s_op->req->u.crdirent.fs_id, s_op->req->u.crdirent.parent_handle,
        ds_attr, PINT_config_get_trove_meta_flags(
            user_opts, s_op->req->u.crdirent.fs_id),
        s_op, 0, js_p, &j_id, server_job_context);

    return ret;
}

/*
 * Function: crdirent_check_exist_directory_entry
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Pre: s_op->u.crdirent.dirent_handle is the directory entry k/v space
 *      s_op->u.crdirent.name != NULL
 *      s_op->u.crdirent.new_handle != NULL
 *
 * Post: tries to read a directory entry, so that we can check to see
 * if it already exists or not
 *
 * Returns:  int
 *
 * Synopsis: We are now ready to store the name/handle pair in the k/v
 *           space for directory handles.
 */
static int crdirent_check_exist_directory_entry(PINT_server_op *s_op,
                                                job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t i = 0;

    PINT_STATE_DEBUG("check_exist_directory_entry");

    /* This buffer came from one of two places, either phase two of
     * creating the directory space when we wrote the value back to
     * trove, or from the initial read from trove.
     */

    /* this is the name for the parent entry */
    s_op->key.buffer = s_op->u.crdirent.name;
    s_op->key.buffer_sz = strlen(s_op->u.crdirent.name) + 1;

    s_op->val.buffer = &s_op->u.crdirent.new_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  checking existence of new directory "
        "entry for %s (handle = %llu) to dirdata dspace %llu\n",
        s_op->u.crdirent.name, llu(s_op->u.crdirent.new_handle),
        llu(s_op->u.crdirent.dirent_handle));

    ret = job_trove_keyval_read(
        s_op->u.crdirent.fs_id, s_op->u.crdirent.dirent_handle,
        &s_op->key, &s_op->val, 0, NULL, s_op, 0, js_p, &i,
        server_job_context);

    return ret;
}

static int crdirent_cleanup(PINT_server_op *s_op,
                            job_status_s *js_p)
{
    PINT_STATE_DEBUG("cleanup");
    return(server_state_machine_complete(s_op));
}

/* crdirent_set_error_code()
 *
 * used to interpret return value from trove operation that checks the
 * existance of a directory entry
 */
static int crdirent_set_error_code(
    PINT_server_op *s_op, job_status_s *js_p)
{
    /* the test to make sure that a file doesn't exist should be
     * "successful" if the entry was not found.
     */
    switch(js_p->error_code)
    {
        case -TROVE_ENOENT:
            js_p->error_code = 0;
            break;
        case 0:
            js_p->error_code = -PVFS_EEXIST;
            break;
        default:
            break;
    }
    return 1;
}

/* crdirent_setup_op()
 *
 * prepare some state machine fields for later processing; mainly just
 * storing request structure fields in state machine so that nested
 * machines are not dependent on request type
 */
static int crdirent_setup_op(
    PINT_server_op *s_op, job_status_s *js_p)
{
    PINT_STATE_DEBUG("setup_op");
    PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DEBUG, "crdirent entry: %s points to %llu\n",
        s_op->req->u.crdirent.name, llu(s_op->req->u.crdirent.new_handle));

    s_op->u.crdirent.name = s_op->req->u.crdirent.name;
    s_op->u.crdirent.new_handle = s_op->req->u.crdirent.new_handle;
    s_op->u.crdirent.parent_handle = s_op->req->u.crdirent.parent_handle;
    s_op->u.crdirent.fs_id = s_op->req->u.crdirent.fs_id;
    s_op->u.crdirent.dir_attr_update_required = 0;

    js_p->error_code = 0;
    return 1;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
