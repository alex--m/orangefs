/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <ctype.h>
#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"

static int crdirent_validate(
    PINT_server_op *s_op, job_status_s* js_p);
static int crdirent_read_directory_entry_handle(
    PINT_server_op *s_op, job_status_s* js_p);
static int crdirent_write_directory_entry(
    PINT_server_op *s_op, job_status_s* js_p);
static int crdirent_check_exist_directory_entry(
    PINT_server_op *s_op, job_status_s* js_p);
static int crdirent_create_dirdata_dspace(
    PINT_server_op *s_op, job_status_s* js_p);
static int crdirent_write_dirdata_handle(
    PINT_server_op *s_op, job_status_s* js_p);
static int crdirent_cleanup(
    PINT_server_op *s_op, job_status_s* js_p);
static int crdirent_set_error_code(
    PINT_server_op *s_op, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];

%%

nested machine pvfs2_check_entry_not_exist(validate,
    read_directory_entry_handle, 
    create_dirdata_dspace,
    write_dirdata_handle,
    check_exist_directory_entry,
    set_error_code)
{
	state validate
	{
		run crdirent_validate;
		success => read_directory_entry_handle;
		default => return;
	}
	
	state read_directory_entry_handle
	{
		run crdirent_read_directory_entry_handle;
		success => check_exist_directory_entry;
		default => create_dirdata_dspace;
	}

	state check_exist_directory_entry
	{
		run crdirent_check_exist_directory_entry;
		default => set_error_code;
	}

	state set_error_code
	{
		run crdirent_set_error_code;
		default => return;
	}
	
	state create_dirdata_dspace
	{
		run crdirent_create_dirdata_dspace;
		success => write_dirdata_handle;
		default => return;
	}

	state write_dirdata_handle
	{
		run crdirent_write_dirdata_handle;
		default => return;
	}
}

machine pvfs2_crdirent_sm(prelude,
			  check_not_exist,
			  write_directory_entry,
			  cleanup,
			  final_response)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		success => check_not_exist;
		default => final_response;
	}

	state check_not_exist
	{
		jump pvfs2_check_entry_not_exist;
		success => write_directory_entry;
		default => final_response;
	}

	state write_directory_entry
	{
		run crdirent_write_directory_entry;
		default => final_response;
	}

	state final_response
	{
		jump pvfs2_final_response_sm;
		default => cleanup;
	}

	state cleanup
	{
		run crdirent_cleanup;
		default => terminate;
	}
}

%%

/*
 * Function: crdirent_validate
 *
 * Synopsis: This function sets up the buffers in preparation for
 *           the trove operation to get the attribute structure
 *           used in check permissions.  Also runs the operation through
 *           the request scheduler for consistency.
 *
 */
static int crdirent_validate(PINT_server_op *s_op,
			 job_status_s* js_p)
{
    char *ptr;

    PINT_STATE_DEBUG("validate");

    /* verify input values -- some of this should be caught as
     * legitimate errors later! */
    assert(s_op->req->u.crdirent.name != NULL);
    assert(s_op->req->u.crdirent.new_handle != 0);
    assert(s_op->req->u.crdirent.parent_handle != 0);

    gossip_debug(GOSSIP_SERVER_DEBUG,
	    "  got crdirent for %s (with handle %Lu) in %Lu\n",
	    s_op->req->u.crdirent.name,
	    Lu(s_op->req->u.crdirent.new_handle),
	    Lu(s_op->req->u.crdirent.parent_handle));

    /* check for invalid characters in name */
    ptr = s_op->req->u.crdirent.name;
    while (*ptr != '\0' && *ptr != '/' && isprint(*ptr)) ptr++;

    if (*ptr != '\0')
    {
	/* found an invalid character -- report it and send error response */
	if (*ptr == '/')
        {
	    gossip_lerr("crdirent: error: invalid '/' character "
                        "in name (%s); sending error response.\n",
			s_op->req->u.crdirent.name);
	}
	else
        {
	    gossip_lerr("crdirent: error: invalid unprintable "
                        "character (value = 0x%x) in name; sending "
                        "error response.\n", (int) *ptr);
	}
	js_p->error_code = -PVFS_ENOENT;
	s_op->scheduled_id = 0;
	return 1;
    }

    js_p->error_code = 0;
    return(1);
}


/*
 * Function: crdirent_read_directory_entry_handle
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Pre:      s_op->u.crdirent.parent_handle is handle of directory
 *
 * Post:     s_op->val.buffer is the directory entry k/v space OR NULL
 *           if first entry
 *
 * Returns:  int
 *
 * Synopsis: Given a directory handle, look up the handle used to store
 * directory entries for this directory.
 *
 *           Get the directory entry handle for the directory entry k/v space.
 *           Recall that directories have two key-val spaces, one of which is 
 *           synonymous with files where the metadata is stored.  The other
 *           space holds the filenames and their handles.  In this function, 
 *           we attempt to retrieve the handle for the filename/handle key/val
 *           space and if it does not exist, we need to create it.
 *
 *           TODO: Semantics here of whether we want to create it here, or upon
 *                 the creation of the directory. 
 *           
 */
static int crdirent_read_directory_entry_handle(PINT_server_op *s_op,
						job_status_s* js_p)
{
    int ret;
    job_id_t i;

    PINT_STATE_DEBUG("read_directory_entry_handle");

    /* TODO: MAKE THIS AN ERROR CHECK INSTEAD LATER */
    assert(s_op->attr.mask & PVFS_ATTR_COMMON_TYPE);
    assert(s_op->attr.objtype == PVFS_TYPE_DIRECTORY);

    /* get the key and key size out of our list of common keys */
    s_op->key.buffer    = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    /* store the handle in the crdirent-specific space in s_op */
    s_op->val.buffer    = &s_op->u.crdirent.dirent_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    ret = job_trove_keyval_read(
        s_op->req->u.crdirent.fs_id,
        s_op->req->u.crdirent.parent_handle,
        &s_op->key,
        &s_op->val,
        0,
        NULL,
        s_op,
        0,
        js_p,
        &i,
        server_job_context);

    return ret;
}

/*
 * Function: crdirent_create_dirdata_dspace
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Pre:      js_p->handle = NULL
 *           js_p->error_code < 0
 *
 * Post:     js_p->handle contains a new handle for a k/v space
 *
 * Returns:  int
 *
 * Synopsis: If we execute this function, this directory does not have
 *           any entries in it.  So we need to create a key val space
 *           for these entries.  This is the first part, and we store
 *           it in part two.
 */
static int crdirent_create_dirdata_dspace(PINT_server_op *s_op,
					  job_status_s* js_p)
{
    int ret;
    job_id_t i;
    PVFS_handle_extent extent;
    PVFS_handle_extent_array extent_array;
    struct server_configuration_s *user_opts = get_server_config_struct();

    PINT_STATE_DEBUG("create_dirdata_dspace");

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  creating dspace (coll_id = %d)\n",
        s_op->req->u.crdirent.fs_id);

    /* FIXME: arbitrary handle here, or honor a range? */
    extent.first = extent.last = 0;
    extent_array.extent_count = 1;
    extent_array.extent_array = &extent;

    ret = job_trove_dspace_create(
        s_op->req->u.crdirent.fs_id,
        &extent_array,
        PVFS_TYPE_DIRDATA,
        NULL,
        PINT_config_get_trove_sync_mode(
            user_opts, s_op->req->u.crdirent.fs_id),
        s_op,
        0,
        js_p,
        &i,
        server_job_context);

    return ret;
}

/*
 * Function: crdirent_write_dirdata_handle
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Pre:      js_p->handle is the new directory entry k/v space
 *
 * Post:     js_p->handle is stored in the original k/v space for the
 *           parent handle.
 *
 * Returns:  int
 *
 * Synopsis: We are storing the newly created k/v space for future
 *           directory entries.
 *           
 */
static int crdirent_write_dirdata_handle(PINT_server_op *s_op,
					 job_status_s* js_p)
{
    int ret;
    job_id_t i;
    struct server_configuration_s *user_opts = get_server_config_struct();

    PINT_STATE_DEBUG("write_dirdata_handle");
 
    /* TODO CHECK ERROR CODE */

    /* get the key and key size out of our list of common keys */
    s_op->key.buffer    = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    /* the last state was create_dirdata_dspace, so handle is in
     * js_p->handle. save it. */
    s_op->u.crdirent.dirent_handle = js_p->handle;

    /* get the handle out of the crdirent scratch space */
    s_op->val.buffer    = &s_op->u.crdirent.dirent_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  writing dirdata handle (%Lu) "
        "into parent directory keyval space (%Lu)\n",
        Lu(s_op->u.crdirent.dirent_handle),
        Lu(s_op->req->u.crdirent.parent_handle));

    ret = job_trove_keyval_write(
        s_op->req->u.crdirent.fs_id,
        s_op->req->u.crdirent.parent_handle,
        &s_op->key,
        &s_op->val,
        PINT_config_get_trove_sync_mode(
            user_opts, s_op->req->u.crdirent.fs_id),
        NULL,
        s_op,
        0, 
        js_p,
        &i,
        server_job_context);

    return ret;
}


/*
 * Function: crdirent_write_directory_entry
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Pre:      s_op->u.crdirent.dirent_handle is the directory entry k/v space
 *           s_op->req->u.crdirent.name != NULL
 *           s_op->req->u.crdirent.new_handle != NULL
 *           ADD ASSERTS FOR THESE!
 *
 * Post:     key/val pair stored
 *
 * Returns:  int
 *
 * Synopsis: We are now ready to store the name/handle pair in the k/v
 *           space for directory handles.
 */
static int crdirent_write_directory_entry(PINT_server_op *s_op,
					  job_status_s* js_p)
{
    int ret;
    job_id_t i;
    struct server_configuration_s *user_opts = get_server_config_struct();

    PINT_STATE_DEBUG("write_directory_entry");

    /* This buffer came from one of two places, either phase two of
     * creating the directory space when we wrote the value back to
     * trove, or from the initial read from trove.
     */

    /* this is the name for the parent entry */
    s_op->key.buffer    = s_op->req->u.crdirent.name;
    s_op->key.buffer_sz = strlen(s_op->req->u.crdirent.name) + 1;

    s_op->val.buffer    = &s_op->req->u.crdirent.new_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  writing new directory entry "
        "for %s (handle = %Lu) to dirdata dspace %Lu\n",
        s_op->req->u.crdirent.name,
        Lu(s_op->req->u.crdirent.new_handle),
        Lu(s_op->u.crdirent.dirent_handle));

    ret = job_trove_keyval_write(
        s_op->req->u.crdirent.fs_id,
        s_op->u.crdirent.dirent_handle,
        &s_op->key,
        &s_op->val,
        PINT_config_get_trove_sync_mode(
            user_opts, s_op->req->u.crdirent.fs_id),
        NULL,
        s_op,
        0,
        js_p,
        &i,
        server_job_context);

    return ret;
}

/*
 * Function: crdirent_check_exist_directory_entry
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Pre: s_op->u.crdirent.dirent_handle is the directory entry k/v space
 *      s_op->req->u.crdirent.name != NULL
 *      s_op->req->u.crdirent.new_handle != NULL
 *
 * Post: tries to read a directory entry, so that we can check to see
 * if it already exists or not
 *
 * Returns:  int
 *
 * Synopsis: We are now ready to store the name/handle pair in the k/v
 *           space for directory handles.
 */

static int crdirent_check_exist_directory_entry(PINT_server_op *s_op,
                                                job_status_s* js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t i = 0;

    PINT_STATE_DEBUG("check_exist_directory_entry");

    /* This buffer came from one of two places, either phase two of
     * creating the directory space when we wrote the value back to
     * trove, or from the initial read from trove.
     */

    /* this is the name for the parent entry */
    s_op->key.buffer    = s_op->req->u.crdirent.name;
    s_op->key.buffer_sz = strlen(s_op->req->u.crdirent.name) + 1;

    s_op->val.buffer    = &s_op->req->u.crdirent.new_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  checking existence of new directory "
        "entry for %s (handle = %Lu) to dirdata dspace %Lu\n",
        s_op->req->u.crdirent.name,
        Lu(s_op->req->u.crdirent.new_handle),
        Lu(s_op->u.crdirent.dirent_handle));

    ret = job_trove_keyval_read(
        s_op->req->u.crdirent.fs_id,
        s_op->u.crdirent.dirent_handle,
        &s_op->key,
        &s_op->val,
        0,
        NULL,
        s_op,
        0,
        js_p,
        &i,
        server_job_context);

    return ret;
}

/* crdirent_cleanup()
 *
 * cleans up any resources that were allocated and exits the state machine
 */
static int crdirent_cleanup(PINT_server_op *s_op,
			    job_status_s* js_p)
{
    PINT_STATE_DEBUG("cleanup");
    return(server_state_machine_complete(s_op));
}

/* crdirent_set_error_code()
 *
 * used to interpret return value from trove operation that checks the
 * existance of a directory entry
 */
static int crdirent_set_error_code(
    PINT_server_op *s_op, job_status_s* js_p)
{
    /* the test to make sure that a file doesn't exist should be
     * "successful" if the entry was not found.
     */
    switch(js_p->error_code)
    {
	case -TROVE_ENOENT:
	    js_p->error_code = 0;
	    break;
	case 0:
	    js_p->error_code = -PVFS_EEXIST;
	    break;
	default:
	    break;
    }
    return(1);
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */


