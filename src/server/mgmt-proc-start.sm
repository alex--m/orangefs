/*
 * Copyright 2013 Omnibond Systems LLC.
 * See COPYING in top-level directory.
 */

#include <stdio.h>
#include <sys/wait.h>

#include "pvfs2-server.h"
#include "pvfs2-internal.h"

%%

machine pvfs2_mgmt_proc_start_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        default => do_work;
    }
    state do_work
    {
        run mgmt_proc_start_do_work;
        default => final_response;
    }
    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }
    state cleanup
    {
        run mgmt_proc_start_cleanup;
        default => terminate;
    }
}

%%

extern int monfd;

static PINT_sm_action mgmt_proc_start_do_work(struct PINT_smcb *smcb,
                                              job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    s_op->resp.u.mgmt_proc_start.status = 0;
    write(monfd, s_op->req->u.mgmt_proc_start.process, strlen(s_op->req->u.mgmt_proc_start.process));
    write(monfd, "\n", 1);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_proc_start_cleanup(struct PINT_smcb *smcb,
                                              job_status_s *js_p)
{
/*  struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);*/
    return server_state_machine_complete(smcb);
}

struct PINT_server_req_params pvfs2_mgmt_proc_start_params =
{
    .string_name = "mgmt_proc_start",
    .state_machine = &pvfs2_mgmt_proc_start_sm
};
