/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/time.h>
#include <assert.h>

#include "pvfs2-server.h"
#include "pint-perf-counter.h"
#include "server-config.h"
#include "pint-util.h"

/* TODO: make this bigger and not hard coded */
#define POOL_BATCH_SIZE 128
/* TODO: make this bigger and not hard coded */
#define POOL_THRESHOLD 512

static int batch_create_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);

%%

machine pvfs2_precreate_pool_refiller_sm
{
        state setup
        {
                run setup_fn;
                success => wait_for_threshold;
                default => error;
        }

	state wait_for_threshold 
	{
		run wait_for_threshold_fn;
		success => setup_batch_create;
		default => error;
	}

	state setup_batch_create 
	{
		run setup_batch_create_fn;
		success => msgpair_xfer_batch_create;
		default => error;
	}

        state msgpair_xfer_batch_create
        {
                jump pvfs2_msgpairarray_sm;
                success => store_handles;
                default => error;
        }

        state store_handles
        {
                run store_handles_fn;
                success => wait_for_threshold;
                default => error;
        }

        state error
        {
                run error_fn;
                default => terminate;
        }
}

%%

/* wait_for_threshold_fn()
 *
 * waits until the pool count has dropped below a low threshold before
 * proceeding
 */
static PINT_sm_action wait_for_threshold_fn(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t tmp_id;

    return(job_precreate_pool_check_level(
        s_op->u.precreate_pool_refiller.pool_handle,
        s_op->u.precreate_pool_refiller.fsid,
        POOL_THRESHOLD,
	smcb,
	0,
	js_p,
	&tmp_id,
	server_job_context));
}

 /* store_handles_fn()
  *
  * stores a set of precreated handles persistently within precreate pools
  */
static PINT_sm_action store_handles_fn(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t tmp_id;

    return(job_precreate_pool_fill(
        s_op->u.precreate_pool_refiller.pool_handle,
        s_op->u.precreate_pool_refiller.fsid,
        s_op->u.precreate_pool_refiller.precreate_handle_array,
        POOL_BATCH_SIZE,
	smcb,
	0,
	js_p,
	&tmp_id,
	server_job_context));
}


/* setup_batch_create_fn()
 *
 * prepares a req/resp pair to another server to precreate a batch of
 * handles
 */
static PINT_sm_action setup_batch_create_fn(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_credentials creds;
    struct server_configuration_s *user_opts = get_server_config_struct();

    gossip_debug(GOSSIP_SERVER_DEBUG, "setting up msgpair to get precreated handles from %s and put store them in %llu.\n", 
        s_op->u.precreate_pool_refiller.host,
        s_op->u.precreate_pool_refiller.pool_handle);

    PINT_init_msgpair(s_op, msg_p);

    /* note: we are acting like a client in this case, so use client timeout
     * and delay values
     */
    s_op->msgarray_params.job_timeout = user_opts->client_job_bmi_timeout;
    s_op->msgarray_params.retry_delay = user_opts->client_retry_delay_ms;

    /* we want to retry forever, though; servers may not be started at the
     * same time
     */
    s_op->msgarray_params.retry_limit = INT_MAX;
    s_op->msgarray_params.quiet_flag = 1;

    msg_p->svr_addr = s_op->u.precreate_pool_refiller.host_addr;
    PINT_util_gen_credentials(&creds);

    PINT_SERVREQ_BATCH_CREATE_FILL(
        msg_p->req,
        creds,
        s_op->u.precreate_pool_refiller.fsid,
        PVFS_TYPE_DATAFILE,
        POOL_BATCH_SIZE,
        s_op->u.precreate_pool_refiller.data_handle_extent_array);

    msg_p->fs_id = s_op->u.precreate_pool_refiller.fsid;
    msg_p->handle = s_op->u.precreate_pool_refiller.data_handle_extent_array.extent_array[0].first;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = batch_create_comp_fn;

    js_p->error_code = 0;
    return(SM_ACTION_COMPLETE);
}


/* setup_fn()
 *
 * initial state to allocate memory for use through the remainder of the
 * state machine's life
 */
static PINT_sm_action setup_fn(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
        
    s_op->u.precreate_pool_refiller.precreate_handle_array = 
        malloc(POOL_BATCH_SIZE * sizeof(PVFS_handle));
    if(!s_op->u.precreate_pool_refiller.precreate_handle_array)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return(SM_ACTION_COMPLETE);
    }

    js_p->error_code = 0;
    return(SM_ACTION_COMPLETE);
}


/* error_fn()
 *
 * handles error transitions
 */
static PINT_sm_action error_fn(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_err("Error: precreate_pool_refiller for %s exiting.\n",
        s_op->u.precreate_pool_refiller.host);
        
    if(s_op->u.precreate_pool_refiller.precreate_handle_array)
    {
        free(s_op->u.precreate_pool_refiller.precreate_handle_array);
    }

    return (server_state_machine_complete(smcb));
}


/* batch_create_comp_fn()
 *
 * msgpair completion function to handle processing batch create response i
 * from another server
 */
static int batch_create_comp_fn(void *v_p,
                                 struct PVFS_server_resp *resp_p,
                                 int index)
{
    PINT_smcb *smcb = v_p;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i;
    
    gossip_debug(GOSSIP_SERVER_DEBUG, "batch_create_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_BATCH_CREATE);

    if (resp_p->status != 0)
    {
        /* TODO: do something useful here */
        PVFS_perror_gossip("batch_create request got", resp_p->status);
	return resp_p->status;
    }

    for(i = 0; i<resp_p->u.batch_create.handle_count; i++)
    {
        s_op->u.precreate_pool_refiller.precreate_handle_array[i] = 
            resp_p->u.batch_create.handle_array[i];

        gossip_debug(GOSSIP_SERVER_DEBUG,
            "Got batch created handle: %llu from: %s\n",
            llu(resp_p->u.batch_create.handle_array[i]),
            s_op->u.precreate_pool_refiller.host);
    }

    return 0;
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

