/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/* pvfs2_get_value_sm
 *
 * This state machine handles incoming server getvalue operations.  These
 * are the operations sent by PVFS_sys_getvalue().
 *
 * The pvfs2_prelude_sm is responsible for reading the actual metadata
 * to begin with, because it does this as part of the permission checking
 * process.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-types.h"
#include "pvfs2-util.h"
#include "pint-util.h"
#include "pint-perf-counter.h"
#include "dbpf-keyval.h"

#define FAILED_PERMS 100
#define EMPTY_RESULT 101

%%

machine pvfs2_get_value_sm
{
    state setup_resp
    {
        run getvalue_setup_resp;
        success => read_value;
        default => final_response;
    }

    state read_value
    {
        run getvalue_read_value;
        success => assign_target;
        default => final_response;
    }

    state assign_target
    {
        run getvalue_assign_target;
        EMPTY_RESULT => check_resp;
        default => perms;
    }

    state perms
    {
        jump pvfs2_prelude_attr_sm;
        default => check_resp;
    }

    state check_resp
    {
        run getvalue_check_resp;
        FAILED_PERMS => setup_resp;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup   
    {
        run getvalue_cleanup;
        default => terminate;
    }
}

%%

/*
 * getvalue_setup_resp()
 * Set up the response - allocate needed resources
 */
static PINT_sm_action getvalue_setup_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    int ret=0;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_GETVALUE_DEBUG, "[GETVALUE]: getvalue_setup_resp: "
                 "enter\n");

    js_p->error_code = 0;

    ret = job_req_sched_post(s_op->op, s_op->target_fs_id, s_op->target_handle,
                             s_op->access_type, s_op->sched_policy,
                             smcb, 0, js_p, 
                             &(s_op->scheduled_id), server_job_context);
    PINT_perf_count(PINT_server_pc, PINT_PERF_REQSCHED, 1, PINT_PERF_ADD);

    if( (s_op->u.getvalue.key.buffer = malloc( PVFS_NAME_MAX )) == 0 )
    {
        return TROVE_ENOMEM;
    }
    memset(s_op->u.getvalue.key.buffer, 0, PVFS_NAME_MAX);
    s_op->u.getvalue.key.buffer_sz = PVFS_NAME_MAX;
    s_op->u.getvalue.key.read_sz = s_op->req->u.getvalue.key.read_sz;
    memcpy(s_op->u.getvalue.key.buffer, s_op->req->u.getvalue.key.buffer, 
           s_op->req->u.getvalue.key.buffer_sz);

    if( (s_op->u.getvalue.val.buffer = 
        malloc(s_op->req->u.getvalue.val.buffer_sz) ) == 0 ) 
    {
        return TROVE_ENOMEM;
    }
    memset(s_op->u.getvalue.val.buffer, 0, s_op->req->u.getvalue.val.buffer_sz);
    s_op->u.getvalue.val.buffer_sz = s_op->req->u.getvalue.val.buffer_sz;
    s_op->u.getvalue.val.read_sz = s_op->req->u.getvalue.val.read_sz;
    memcpy(s_op->u.getvalue.val.buffer, s_op->req->u.getvalue.val.buffer, 
           s_op->req->u.getvalue.val.buffer_sz);

    s_op->u.getvalue.token = s_op->req->u.getvalue.token;

    memset(&(s_op->u.getvalue.dirent), 0, sizeof(PVFS_dirent));

    gossip_debug(GOSSIP_GETVALUE_DEBUG, "[GETVALUE]: getvalue_setup_resp: "
                 "exit\n");
    return SM_ACTION_COMPLETE;
}

/*
 *
 */
static PINT_sm_action getvalue_read_value(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t i;

    js_p->error_code = 0;

    gossip_debug(GOSSIP_GETVALUE_DEBUG, "[GETVALUE]: getvalue_read_value: "
                 "enter, fs_id: %d, dirent: %p, key: %p, val: %p, "
                 "key.buffer: %s, key.buffer_sz: %d, val.buffer: %s\n",
                 s_op->req->u.getvalue.fs_id,
                 &(s_op->u.getvalue.dirent),
                 &(s_op->u.getvalue.key),
                 &(s_op->u.getvalue.val),
                 (char *)s_op->u.getvalue.key.buffer,
                 s_op->u.getvalue.key.buffer_sz,
                 (char *)s_op->u.getvalue.val.buffer);

    ret = job_trove_keyval_read_value(
        s_op->req->u.getvalue.fs_id,
        s_op->u.getvalue.token,
        &(s_op->u.getvalue.dirent),
        &(s_op->u.getvalue.key),
        &(s_op->u.getvalue.val),
        0,
        NULL,
        smcb,
        0,
        js_p,
        &i,
        server_job_context, s_op->req->hints);

    gossip_debug(GOSSIP_GETVALUE_DEBUG, 
                 "[GETVALUE]: getvalue_read_value: exit\n");
    return ret;
}

static PINT_sm_action getvalue_assign_target(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    s_op->target_handle = s_op->u.getvalue.dirent.handle;
    s_op->target_fs_id = s_op->req->u.getvalue.fs_id;
    s_op->resp.u.getvalue.token = js_p->position;
    s_op->req->u.getvalue.token = js_p->position;

    js_p->error_code = 0;
    if( (js_p->position == TROVE_ITERATE_END) && 
        (s_op->u.getvalue.key.buffer_sz == 0) )
    {
        gossip_debug(GOSSIP_GETVALUE_DEBUG, 
                     "[GETVALUE]: TROVE_ITERATE_END, returning EMPTY_RESULT\n");
        js_p->error_code = EMPTY_RESULT;
    }

    return SM_ACTION_COMPLETE;
}

/* getvalue_check_resp()
 */
static PINT_sm_action getvalue_check_resp(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_GETVALUE_DEBUG, 
                 "[GETVALUE]: getvalue_check_resp: enter: token: %llu, "
                 "handle: %llu, path: %s, key: %s, value: %s\n", 
                 s_op->req->u.getvalue.token, 
                 s_op->u.getvalue.dirent.handle,
                 s_op->u.getvalue.dirent.d_name,
                 (char *)s_op->u.getvalue.key.buffer+sizeof(TROVE_handle), 
                 (char *)s_op->u.getvalue.val.buffer);

    if( js_p->error_code == EMPTY_RESULT )
    {
        gossip_debug(GOSSIP_GETVALUE_DEBUG, "[GETVALUE]: empty result\n");
        memset(s_op->resp.u.getvalue.key.buffer, 0, 
            s_op->u.getvalue.key.buffer_sz);
        memset(s_op->resp.u.getvalue.val.buffer, 0, 
            s_op->u.getvalue.val.buffer_sz);
        memset(&(s_op->resp.u.getvalue.dirent), 0, sizeof(PVFS_dirent));
        js_p->error_code = 0;
    }
    else if( js_p->error_code != 0 )
    {
        js_p->error_code =  FAILED_PERMS;
    }
    else
    {
        /* point malloc'd buffer to response structs */
        s_op->resp.u.getvalue.key.read_sz = s_op->u.getvalue.key.buffer_sz;
        s_op->resp.u.getvalue.key.buffer_sz = s_op->u.getvalue.key.buffer_sz;
        s_op->resp.u.getvalue.key.buffer = s_op->u.getvalue.key.buffer;
    
        s_op->resp.u.getvalue.val.read_sz = s_op->u.getvalue.val.buffer_sz;
        s_op->resp.u.getvalue.val.buffer_sz = s_op->u.getvalue.val.buffer_sz;
        s_op->resp.u.getvalue.val.buffer = s_op->u.getvalue.val.buffer;
    
        memcpy(&(s_op->resp.u.getvalue.dirent), &(s_op->u.getvalue.dirent), 
            sizeof(PVFS_dirent));
        gossip_debug(GOSSIP_GETVALUE_DEBUG, 
                     "[GETVALUE]: RESPONSE: token: %llu, path: %s (%llu), "
                     "key: %s, value: %s\n",
                     s_op->resp.u.getvalue.token,
                     s_op->resp.u.getvalue.dirent.d_name,
                     llu(s_op->resp.u.getvalue.dirent.handle),
                     (char *)
                     s_op->resp.u.getvalue.key.buffer+sizeof(TROVE_handle),
                     (char *)s_op->resp.u.getvalue.val.buffer);
    
        gossip_debug(GOSSIP_GETVALUE_DEBUG, 
                     "[GETVALUE]: getvalue_check_resp: exit, token: %llu\n",
                     s_op->resp.u.getvalue.token);
        js_p->error_code = 0;
    }
    return SM_ACTION_COMPLETE;
}

/* getvalue_cleanup()
 * free resources alloc'd by state machine
 */
static PINT_sm_action getvalue_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_GETVALUE_DEBUG, 
                 "[GETVALUE]: getvalue_cleanup: enter\n");

    free(s_op->u.getvalue.key.buffer);
    free(s_op->u.getvalue.val.buffer);

    gossip_debug(GOSSIP_GETVALUE_DEBUG, 
                 "[GETVALUE]: getvalue_cleanup: exit\n");
    return(server_state_machine_complete(smcb));
}

PINT_GET_OBJECT_REF_DEFINE(getvalue);

struct PINT_server_req_params pvfs2_get_value_params =
{
    .string_name = "getvalue",
    .perm = PINT_SERVER_CHECK_READ,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .get_object_ref = PINT_get_object_ref_getvalue,
    .state_machine = &pvfs2_get_value_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

