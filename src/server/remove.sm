/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-storage.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-internal.h"

/* Implementation notes
 *
 * This is a complicated machine.  It is capable of removing the three
 * externally visible PVFS2 object types: datafiles, metafiles, and
 * directories.
 *
 * For a datafile, the path through the state machine looks like:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) remove_dspace
 * 5) final_response
 * 6) cleanup
 *
 * For metafiles and symlinks, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) remove_keyvals
 * 5) remove_dspace
 * 6) final_response
 * 7) cleanup
 *
 * For a directory that has (or at one time had) entries, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) try_to_read_dirdata_handle
 * 5) remove_dirdata_keyvals
 * 6) remove_dirdata_dspace
 * 7) remove_keyvals
 * 8) remove_dspace
 * 9) final_response
 * 10) cleanup
 *
 * A directory that never had entries will skip step (5), as there
 * would be no dirdata dspace.
 */

#define PVFS_REMOVE_ITERATE_MAXCOUNT 100

enum
{
    STATE_TYPE_DIRECTORY = 1,
    STATE_TYPE_DATAFILE = 2,
};

enum
{
    REMOVE_KEYVALS_GET_MORE_KEYS = 1,
    REMOVE_KEYVALS_REMOVE_NEXT_KEY = 2,
    REMOVE_KEYVALS_DONE = 3
};

static int remove_check_object_type(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_verify_object_metadata(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_cleanup(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_remove_keyvals(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_remove_dspace(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_read_dirdata_handle(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_get_dirent_count(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_check_dirdata_entries(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_remove_dirdata_keyvals(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_remove_dirdata_dspace(
    PINT_server_op *s_op, job_status_s *js_p);
static int remove_setup_work(
    PINT_server_op *s_op, job_status_s *js_p);
extern PINT_server_trove_keys_s Trove_Common_Keys[];

/* helper functions */

static int do_remove_keyvals_state(PINT_server_op *s_op,
                                   job_status_s *js_p,
                                   PVFS_handle handle);

static int remove_key_array_init(
    PVFS_ds_keyval **keyval_array);

%%

nested machine pvfs2_remove_work_sm(
    check_object_type,
    verify_object_metadata,
    remove_keyvals,
    remove_dspace,
    read_dirdata_handle,
    getattr_of_dirdata_handle,
    check_dirdata_entries,
    remove_dirdata_keyvals,
    remove_dirdata_dspace)
{

    state check_object_type
    {
        run remove_check_object_type;
        success => verify_object_metadata;
        STATE_TYPE_DATAFILE => remove_dspace;
        default => return;
    }

    state verify_object_metadata
    {
        run remove_verify_object_metadata;
        STATE_TYPE_DIRECTORY => read_dirdata_handle;
        success => remove_keyvals;
        default => return;
    }

    state remove_dspace
    {
        run remove_remove_dspace;
        default => return;
    }

    state remove_keyvals
    {
        run remove_remove_keyvals;
        REMOVE_KEYVALS_DONE => remove_dspace;
        success => remove_keyvals;
        default => return;
    }

    state read_dirdata_handle
    {
        run remove_read_dirdata_handle;
        success => getattr_of_dirdata_handle;
        default => remove_keyvals;
    }

    state getattr_of_dirdata_handle
    {
        run remove_get_dirent_count;
        success => check_dirdata_entries;
        default => return;
    }

    state check_dirdata_entries
    {
        run remove_check_dirdata_entries;
        success => remove_dirdata_keyvals;
        default => return;
    }

    state remove_dirdata_dspace
    {
        run remove_remove_dirdata_dspace;
        success => remove_keyvals;
        default => return;
    }

    state remove_dirdata_keyvals
    {
        run remove_remove_dirdata_keyvals;
        REMOVE_KEYVALS_DONE => remove_dirdata_dspace;
        success => remove_dirdata_keyvals;
        default => return;
    }
}

machine pvfs2_remove_sm(
    prelude,
    setup_work,
    work,
    final_response,
    cleanup)
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => setup_work;
        default => final_response;
    }

    state setup_work
    {   
        run remove_setup_work;
        default => work;
    }

    state work
    {
        jump pvfs2_remove_work_sm;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run remove_cleanup;
        default => terminate;
    }
}

%%

/*
 * Function: remove_check_object_type
 *
 * decides whether to follow the path for datafile removal or
 * non-datafile removal, based on whether we were able to successfully
 * retrive object attributes earlier
 *
 */
static int remove_check_object_type(PINT_server_op *s_op,
                                    job_status_s *js_p)
{
    PINT_STATE_DEBUG("check_object_type");

    if(s_op->attr.objtype == PVFS_TYPE_DATAFILE)
    {
	/* it must be a datafile, transition to try reading datafile 
	 * attribs with dspace_getattr()
	 */
	js_p->error_code = STATE_TYPE_DATAFILE;
	return(1);
    }

    js_p->error_code = 0;
    return(1);
}

/*
 * Function: remove_verify_object_metadata
 *
 * Verifies that the user has permission to access the file (not yet
 * implemented).  Also directs removal of dirdata dspace in the case
 * of a directory.
 *
 * This state has changed some over time; it might need a new name.
 *
 * Note: errors from the previous state are redirected elsewhere, so
 * we know that we have metadata if we make it here.
 */
static int remove_verify_object_metadata(PINT_server_op *s_op,
					 job_status_s *js_p)
{
    PVFS_object_attr *a_p;

    PINT_STATE_DEBUG("verify_object_metadata");

    a_p = &s_op->attr;

    js_p->error_code = 0;
    
    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "  attrs read from keyval = (owner = %d, "
                 "group = %d, perms = %o, type = %d)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype);

    if (a_p->objtype == PVFS_TYPE_DIRECTORY)
    {
	js_p->error_code = STATE_TYPE_DIRECTORY;

	gossip_debug(
            GOSSIP_SERVER_DEBUG, "  type is directory; removing "
            "dirdata object before removing directory itself.\n");
    }

    /* setup position for next state (remove[_dirdata]_keyvals) */
    s_op->u.remove.pos = PVFS_ITERATE_START;
 
    return 1;
}

static int remove_read_dirdata_handle(PINT_server_op *s_op,
                                      job_status_s *js_p)
{
    int ret;
    job_id_t j_id;

    PINT_STATE_DEBUG("read_dirdata_handle");

    /* set up key and value structures for reading the dirdata handle */
    s_op->key.buffer = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    s_op->val.buffer = &s_op->u.remove.dirdata_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "  trying to read dirdata handle (coll_id = %d, "
                 "handle = %llu, key = %s (%d), val_buf = %p (%d))\n",
		 s_op->u.remove.fs_id, llu(s_op->u.remove.handle),
		 (char *)s_op->key.buffer, s_op->key.buffer_sz,
		 s_op->val.buffer, s_op->val.buffer_sz);

    ret = job_trove_keyval_read(
        s_op->u.remove.fs_id, s_op->u.remove.handle,
        &s_op->key, &s_op->val, 
        TROVE_COMMON_NAME_KEY, NULL, s_op, 0, js_p,
        &j_id, server_job_context);

    return ret;
}

static int remove_get_dirent_count(
    PINT_server_op *s_op, job_status_s *js_p)
{
    int ret;
    job_id_t tmp_id;

    PINT_STATE_DEBUG("remove_get_dirent_count");

    if (js_p->error_code)
    {
        return 1;
    }
    js_p->error_code = 0;

    s_op->key.buffer = Trove_Common_Keys[DIRDATA_SIZE_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIRDATA_SIZE_KEY].size;
    s_op->val.buffer = &s_op->u.remove.dirent_count;
    s_op->val.buffer_sz = sizeof(PVFS_size);

    ret = job_trove_keyval_read(
        s_op->u.remove.fs_id,
        s_op->u.remove.handle,
        &s_op->key,
        &s_op->val,
        TROVE_COMMON_NAME_KEY,
        NULL,
        s_op,
        0,
        js_p,
        &tmp_id,
        server_job_context);

    return ret;
}

static int remove_check_dirdata_entries(
    PINT_server_op *s_op, job_status_s *js_p)
{
    if (js_p->error_code == 0)
    {
        if (s_op->u.remove.dirent_count > 0)
        {
            gossip_debug(GOSSIP_SERVER_DEBUG, 
                         " detected non-empty "
                         "directory (fsid: %u, handle: %llu, size %llu) "
                         "-- returning error\n",
                         s_op->u.remove.fs_id,
                         s_op->u.remove.handle,
                         s_op->u.remove.dirent_count);
            js_p->error_code = -PVFS_ENOTEMPTY;
        }
    }

    /* setup position for next state (remove[_dirdata]_keyvals) */
    s_op->u.remove.pos = PVFS_ITERATE_START;
     return 1;
}

/*
 * Function: remove_remove_dirdata_dspace
 *
 * Remove the dirdata dspace using the handle that we ready in the
 * read_dirdata_handle state.
 */
static int remove_remove_dirdata_dspace(PINT_server_op *s_op,
					job_status_s *js_p)
{
    int ret;
    job_id_t j_id;
    struct server_configuration_s *user_opts = get_server_config_struct();

    PINT_STATE_DEBUG("remove_dirdata_dspace");

    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "  removing dirdata dspace %llu\n",
		 llu(s_op->u.remove.dirdata_handle));

    ret = job_trove_dspace_remove(
        s_op->u.remove.fs_id,
        s_op->u.remove.dirdata_handle,
        PINT_config_get_trove_sync_meta(
            user_opts, s_op->u.remove.fs_id),
        s_op,
        0,
        js_p,
        &j_id,
        server_job_context);

    /* setup position for next state (get_keyvals) */
    s_op->u.remove.pos = PVFS_ITERATE_START;

    return ret;
}

static int do_remove_keyvals_state(PINT_server_op *s_op,
                                   job_status_s *js_p,
                                   PVFS_handle handle)
{
    int ret;
    job_id_t tmp_id;
    
    switch(s_op->u.remove.remove_keyvals_state)
    {
        case REMOVE_KEYVALS_GET_MORE_KEYS:
 
            s_op->u.remove.remove_keyvals_state = REMOVE_KEYVALS_REMOVE_NEXT_KEY;
            if(!s_op->u.remove.key_array)
            {
                ret = remove_key_array_init(&s_op->u.remove.key_array);
                if(ret != 0)
                {
                    js_p->error_code = ret;
                    return 1;
                }
            }
            s_op->u.remove.index = 0;

            ret = job_trove_keyval_iterate_keys(
                s_op->u.remove.fs_id,
                handle,
                s_op->u.remove.pos,
                s_op->u.remove.key_array,
                PVFS_REMOVE_ITERATE_MAXCOUNT,
                0, /* allow for all key types */
                NULL,
                s_op,
                0,
                js_p,
                &tmp_id,
                server_job_context);
            if(ret < 0)
            {
                js_p->error_code = ret;
                return 1;
            }
            return 0;

        case REMOVE_KEYVALS_REMOVE_NEXT_KEY:

            if(s_op->u.remove.index == 0)
            {
                /* must be first remove after get */
                s_op->u.remove.key_count = js_p->count;
                s_op->u.remove.pos = js_p->position;
            }

            if(s_op->u.remove.key_count == 0)
            {
                s_op->u.remove.remove_keyvals_state = REMOVE_KEYVALS_DONE;
                return 1;
            }

            if(s_op->u.remove.index < s_op->u.remove.key_count)
            {
                gossip_debug(
                    GOSSIP_SERVER_DEBUG,
                    "  removing keyval: handle %llu, key: %*s\n",
                    llu(handle),
                    s_op->u.remove.key_array[s_op->u.remove.index].read_sz,
                    (char *)s_op->u.remove.key_array[
                                    s_op->u.remove.index].buffer);

                s_op->u.remove.key_array[s_op->u.remove.index].buffer_sz = 
                    s_op->u.remove.key_array[s_op->u.remove.index].read_sz;
                ret = job_trove_keyval_remove(
                    s_op->u.remove.fs_id,
                    handle,
                    &s_op->u.remove.key_array[s_op->u.remove.index],
                    TROVE_KEYVAL_TYPES,
                    NULL,
                    s_op,
                    0,
                    js_p,
                    &tmp_id,
                    server_job_context);
                if(ret < 0)
                {
                    js_p->error_code = ret;
                    return 1;
                }

                s_op->u.remove.index++;
            }

            if(s_op->u.remove.index == s_op->u.remove.key_count)
            {
                if(s_op->u.remove.pos != PVFS_ITERATE_END)
                {
                    s_op->u.remove.remove_keyvals_state = 
                        REMOVE_KEYVALS_GET_MORE_KEYS;
                }
                else
                {
                    s_op->u.remove.remove_keyvals_state = REMOVE_KEYVALS_DONE;
                }
            }
                    
            /* wait for remove to complete */
            return 0;

        case REMOVE_KEYVALS_DONE:
            
            s_op->u.remove.remove_keyvals_state = REMOVE_KEYVALS_GET_MORE_KEYS;
            js_p->error_code = REMOVE_KEYVALS_DONE;
            return 1;
        
        default:
            /* should never reach here */
            gossip_lerr("Program error: remove.sm: invalid state reached\n");
    }

    /* avoid compiler warning */
    return 1;
}

static int remove_remove_keyvals(PINT_server_op *s_op,
                                 job_status_s *js_p)
{

    PINT_STATE_DEBUG("remove_remove_keyval");

    if(s_op->attr.objtype == PVFS_TYPE_DATAFILE)
    {
        /* skip keyvals (datafiles don't have any) 
         * and go right to remove_dspace */
        js_p->error_code = REMOVE_KEYVALS_DONE;
        return 1;
    }
    
    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "removing dir_ent keyvals %llu\n",
		 llu(s_op->u.remove.handle));

    if(js_p->error_code)
    {
        return 1;
    }

    return do_remove_keyvals_state(s_op, js_p, s_op->u.remove.handle);
}


static int remove_remove_dirdata_keyvals(PINT_server_op *s_op,
                                         job_status_s *js_p)
{
    PINT_STATE_DEBUG("remove_remove_dirdata_keyvals");

    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "removing dir_data keyvals %llu\n",
		 llu(s_op->u.remove.dirdata_handle));

    if(js_p->error_code)
    {
        return 1;
    }

    return do_remove_keyvals_state(s_op, js_p, s_op->u.remove.dirdata_handle);
}

/*
 * Function: remove_remove_dspace
 *
 * Remove the dspace using the handle from the incoming request
 * (which was verified in previous states).
 */
static int remove_remove_dspace(PINT_server_op *s_op,
				job_status_s *js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t j_id;
    struct server_configuration_s *user_opts = get_server_config_struct();

    PINT_STATE_DEBUG("remove_dspace");

    gossip_debug(GOSSIP_SERVER_DEBUG, "(%p) remove: removing dspace "
                 "object %llu,%d\n", s_op, llu(s_op->u.remove.handle),
                 s_op->u.remove.fs_id);

    ret = job_trove_dspace_remove(
        s_op->u.remove.fs_id, s_op->u.remove.handle,
        PINT_config_get_trove_sync_meta(
            user_opts, s_op->u.remove.fs_id), s_op, 0, js_p,
        &j_id, server_job_context);

    return ret;
}

/*
 * Function: remove_cleanup
 *
 * Free all memory associated with this request and return 0, indicating
 * we're done processing.
 */
static int remove_cleanup(PINT_server_op *s_op,
			  job_status_s *js_p)
{
    PINT_STATE_DEBUG("cleanup");

    if(s_op->u.remove.key_array)
    {
        free(s_op->u.remove.key_array);
    }

    return(server_state_machine_complete(s_op));
}

static int remove_setup_work(
    PINT_server_op *s_op, job_status_s *js_p)
{
    PINT_STATE_DEBUG("setup_work");

    s_op->u.remove.handle = s_op->req->u.remove.handle;
    s_op->u.remove.fs_id = s_op->req->u.remove.fs_id;
    s_op->u.remove.key_count = 0;
    s_op->u.remove.key_array = NULL;
    s_op->u.remove.remove_keyvals_state = REMOVE_KEYVALS_GET_MORE_KEYS;

    js_p->error_code = 0;
    return 1;
}

static int remove_key_array_init(
    PVFS_ds_keyval **keyval_array)
{
    PVFS_ds_keyval *array;
    int i = 0;
    char * membuffer;
    
    membuffer = malloc(
        (sizeof(PVFS_ds_keyval) + PVFS_NAME_MAX) * 
        PVFS_REMOVE_ITERATE_MAXCOUNT);
    if(!membuffer)
    {
        return -PVFS_ENOMEM;
    }

    array = (PVFS_ds_keyval *)membuffer;
    membuffer += (sizeof(PVFS_ds_keyval) * PVFS_REMOVE_ITERATE_MAXCOUNT);

    for(; i < PVFS_REMOVE_ITERATE_MAXCOUNT; ++i)
    {
        array[i].buffer = membuffer;
        membuffer += PVFS_NAME_MAX;
        array[i].buffer_sz = PVFS_NAME_MAX;
        array[i].read_sz = 0;
    }

    *keyval_array = array;
    return 0;
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
