/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-storage.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"

/* Implementation notes
 *
 * This is a complicated machine.  It is capable of removing the three externally visible
 * PVFS2 object types: datafiles, metafiles, and directories.
 *
 * For a datafile, the path through the state machine looks like:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) remove_dspace
 * 5) final_response
 * 6) cleanup
 *
 * For metafiles and symlinks, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) remove_dspace
 * 5) final_response
 * 6) cleanup
 *
 * For a directory that has (or at one time had) entries, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) try_to_read_dirdata_handle
 * 5) remove_dirdata_dspace
 * 6) remove_dspace
 * 7) final_response
 * 8) cleanup
 *
 * A directory that never had entries will skip step (5), as there would be no
 * dirdata dspace.
 *
 * Hopefully this will help in understanding all that goes on here... -- Rob
 */

/* TODO: this could be organized better now, probably */

enum {
    STATE_TYPE_DIRECTORY = 1,
    STATE_TYPE_DATAFILE = 2
};

static int remove_check_object_type(PINT_server_op *s_op, job_status_s* js_p);
static int remove_verify_object_metadata(PINT_server_op *s_op, job_status_s* js_p);
static int remove_cleanup(PINT_server_op *s_op, job_status_s* js_p);
static int remove_remove_dspace(PINT_server_op *s_op, job_status_s* js_p);
static int remove_try_to_read_dirdata_handle(PINT_server_op *s_op, job_status_s* js_p);
static int remove_remove_dirdata_dspace(PINT_server_op *s_op, job_status_s* js_p);

extern PINT_server_trove_keys_s Trove_Common_Keys[];

%%

machine pvfs2_remove_sm(prelude,
			check_object_type,
			verify_object_metadata,
			remove_dspace,
			try_to_read_dirdata_handle,
			remove_dirdata_dspace,
			final_response,
			cleanup)
{
	state prelude
	{
		jump pvfs2_prelude_sm;
		success => check_object_type;
		default => final_response;
	}

	state check_object_type
	{
		run remove_check_object_type;
		success => verify_object_metadata;
		STATE_TYPE_DATAFILE => remove_dspace;
		default => final_response;
	}

        state verify_object_metadata
	{
            run remove_verify_object_metadata;
            STATE_TYPE_DIRECTORY => try_to_read_dirdata_handle;
            success => remove_dspace;
            default => final_response;
	}

	state remove_dspace
	{
            run remove_remove_dspace;
            default => final_response;
	}

	state try_to_read_dirdata_handle
	{
            run remove_try_to_read_dirdata_handle;
            success => remove_dirdata_dspace;
            default => remove_dspace;
        }

	state remove_dirdata_dspace
        {
            run remove_remove_dirdata_dspace;
            success => remove_dspace;
            default => final_response;
        }

	state final_response
	{
            jump pvfs2_final_response_sm;
            default => cleanup;
	}

	state cleanup
	{
            run remove_cleanup;
            default => prelude;
	}
}

%%

/*
 * Function: remove_check_object_type
 *
 * decides whether to follow the path for datafile removal or non-datafile
 * removal, based on whether we were able to successfully retrive object
 * attributes earlier
 *
 */
static int remove_check_object_type(PINT_server_op *s_op,
				       job_status_s* js_p)
{
    PINT_STATE_DEBUG("check_object_type");

    if(s_op->attr.mask == 0)
    {
	/* it must be a datafile, transition to try reading datafile 
	 * attribs with dspace_getattr()
	 */
	js_p->error_code = STATE_TYPE_DATAFILE;
	return(1);
    }

    js_p->error_code = 0;
    return(1);
}

/*
 * Function: remove_verify_object_metadata
 *
 * Verifies that the user has permission to access the file
 * (not yet implemented).
 * Also directs removal of dirdata dspace in the case of a directory.
 *
 * This state has changed some over time; it might need a new name.
 *
 * Note: errors from the previous state are redirected elsewhere, so we
 * know that we have metadata if we make it here.
 */
static int remove_verify_object_metadata(PINT_server_op *s_op,
					 job_status_s* js_p)
{
    PVFS_object_attr *a_p;

    PINT_STATE_DEBUG("verify_object_metadata");

    a_p = &s_op->attr;
    
    gossip_debug(SERVER_DEBUG,
		 "  attrs read from keyval = (owner = %d, "
                 "group = %d, perms = %o, type = %d)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype);

    if (a_p->objtype == PVFS_TYPE_DIRECTORY)
    {
	js_p->error_code = STATE_TYPE_DIRECTORY;

	gossip_debug(
            SERVER_DEBUG, "  type is directory; removing "
            "dirdata object before removing directory itself.\n");
    }
    else
    {
	js_p->error_code = 0;
    }
    return 1;
}

/* Function: remove_try_to_read_dirdata_handle
 *
 * Note: this is "try to read" because the dirdata handle is dropped in lazily.
 * so, the dirdata object might not exist (in the case of a directory that never
 * had an object placed in it, for example).
 *
 */
static int remove_try_to_read_dirdata_handle(PINT_server_op *s_op,
					     job_status_s* js_p)
{
    int ret;
    job_id_t j_id;

    PINT_STATE_DEBUG("try_to_read_dirdata_handle");

    /* set up key and value structures for reading the dirdata handle */
    s_op->key.buffer    = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;

    s_op->val.buffer    = &s_op->u.remove.dirdata_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    gossip_debug(SERVER_DEBUG,
		 "  trying to read dirdata handle (coll_id = 0x%x, "
                 "handle = %Lu, key = %s (%d), val_buf = %p (%d))\n",
		 s_op->req->u.remove.fs_id,
		 Lu(s_op->req->u.remove.handle),
		 (char *) s_op->key.buffer,
		 s_op->key.buffer_sz,
		 s_op->val.buffer,
		 s_op->val.buffer_sz);

    ret = job_trove_keyval_read(s_op->req->u.remove.fs_id,
					 s_op->req->u.remove.handle,
					 &s_op->key,
					 &s_op->val,
					 0,
					 NULL,
					 s_op,
					 0,
					 js_p,
					 &j_id,
					 server_job_context);
    return ret;
}

/*
 * Function: remove_remove_dirdata_dspace
 *
 * Remove the dirdata dspace using the handle that we ready in the 
 * read_dirdata_handle state.
 */
static int remove_remove_dirdata_dspace(PINT_server_op *s_op,
					job_status_s* js_p)
{
    int ret;
    job_id_t j_id;

    PINT_STATE_DEBUG("remove_dirdata_dspace");

    gossip_debug(SERVER_DEBUG,
		 "  removing dirdata dspace %Lu\n",
		 Lu(s_op->u.remove.dirdata_handle));

    ret = job_trove_dspace_remove(s_op->req->u.remove.fs_id,
					   s_op->u.remove.dirdata_handle,
					   s_op,
					   0,
					   js_p,
					   &j_id,
					   server_job_context);
    return ret;
}

/*
 * Function: remove_remove_dspace
 *
 * Remove the dspace using the handle from the incoming request
 * (which was verified in previous states).
 */
static int remove_remove_dspace(PINT_server_op *s_op,
				job_status_s* js_p)
{
    int ret;
    job_id_t j_id;

    PINT_STATE_DEBUG("remove_dspace");

    ret = job_trove_dspace_remove(s_op->req->u.remove.fs_id,
					   s_op->req->u.remove.handle,
					   s_op,
					   0,
					   js_p,
					   &j_id,
					   server_job_context);
    return ret;
}


/*
 * Function: remove_cleanup
 *
 * Free all memory associated with this request and return 0, indicating
 * we're done processing.
 */
static int remove_cleanup(PINT_server_op *s_op,
			  job_status_s* js_p)
{
    PINT_STATE_DEBUG("cleanup");

    return(server_state_machine_complete(s_op));
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 noexpandtab
 */
