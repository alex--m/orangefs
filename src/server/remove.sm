/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-storage.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-internal.h"
#include "pint-cached-config.h"
#include "pint-util.h"

/* Implementation notes
 *
 * This is a complicated machine.  It is capable of removing the three
 * externally visible PVFS2 object types: datafiles, metafiles, and
 * directories.
 *
 * For a datafile, the path through the state machine looks like:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) remove_dspace
 * 5) final_response
 * 6) cleanup
 *
 * For metafiles and symlinks, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) remove_dspace
 * 5) final_response
 * 6) cleanup
 *
 * For a directory that has (or at one time had) entries, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) try_to_read_dirdata_handle
 * 5) remove_dirdata_keyvals
 * 6) remove_dirdata_dspace
 * 7) remove_dspace
 * 8) final_response
 * 9) cleanup
 *
 * A directory that never had entries will skip step (5), as there
 * would be no dirdata dspace.
 */

#define PVFS_REMOVE_ITERATE_MAXCOUNT 100

static int remove_get_dirent_count_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);
static int remove_remove_dirdata_handles_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);

enum
{
    STATE_TYPE_DIRECTORY = 1,
    STATE_TYPE_DATAFILE = 2,
    STATE_TYPE_DIRDATA = 3,
};

%%
nested machine pvfs2_remove_dirdata_handles_work_sm
{
    state get_dist_dir_attr
    {
        run remove_get_dist_dir_attr;
        success => get_dirdata_handles;
        default => return;
    }

    state get_dirdata_handles
    {
        run remove_get_dirdata_handles;
        success => get_dirent_count_setup_msgpair_array;
        default => return;
    }

    state get_dirent_count_setup_msgpair_array
    {
        run remove_get_dirent_count_setup_msgpair_array;
        success => get_dirent_count_xfer_msgpair_array;
        default => remove_dirdata_handles_cleanup;
    }

    state get_dirent_count_xfer_msgpair_array
    {
        jump pvfs2_msgpairarray_sm;
        success => remove_dirdata_handles_setup_msgpair_array;
        default => remove_dirdata_handles_cleanup;
    }

    state remove_dirdata_handles_setup_msgpair_array
    {
        run remove_remove_dirdata_handles_setup_msgpair_array;
        success => remove_dirdata_handles_xfer_msgpair_array;
        default => remove_dirdata_handles_cleanup;
    }

    state remove_dirdata_handles_xfer_msgpair_array
    {
        jump pvfs2_msgpairarray_sm;
/* later ...
        default => rebuild_dirdata_handles_setup_msgpair_array;
        success => remove_dirdata_handles_cleanup;
*/
        default => remove_dirdata_handles_cleanup;
    }

    state remove_dirdata_handles_cleanup
    {
        run remove_remove_dirdata_handles_cleanup;
        default => return;
    }
}

nested machine pvfs2_remove_work_sm
{
    state check_object_type
    {
        run remove_check_object_type;
        success => verify_object_metadata;
        STATE_TYPE_DATAFILE => remove_dspace;
        STATE_TYPE_DIRDATA => getattr_of_dirdata_handle;
        default => return;
    }

    state verify_object_metadata
    {
        run remove_verify_object_metadata;
        STATE_TYPE_DIRECTORY => remove_dirdata_handles;
        success => remove_dspace;
        default => return;
    }

    state remove_dspace
    {
        run remove_remove_dspace;
        default => return;
    }

    state getattr_of_dirdata_handle
    {
        run remove_get_dirent_count;
        default => check_dirdata_entries;
    }

    state check_dirdata_entries
    {
        run remove_check_dirdata_entries;
        success => remove_dspace;
        default => return;
    }

    state remove_dirdata_handles
    {
        jump pvfs2_remove_dirdata_handles_work_sm;
        success => remove_dspace;
        default => return;
    }

}

nested machine pvfs2_remove_with_prelude_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => do_work;
        default => return;
    }

    state do_work
    {
        jump pvfs2_remove_work_sm;
        default => return;
    }
}

machine pvfs2_remove_sm
{
    state work
    {
        jump pvfs2_remove_with_prelude_sm;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run remove_cleanup;
        default => terminate;
    }
}

%%

/*
 * Function: remove_check_object_type
 *
 * decides whether to follow the path for datafile removal or
 * non-datafile removal, based on whether we were able to successfully
 * retrive object attributes earlier
 *
 */
static PINT_sm_action remove_check_object_type(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if(s_op->attr.objtype == PVFS_TYPE_DATAFILE)
    {
	/* it must be a datafile, transition to try reading datafile 
	 * attribs with dspace_getattr()
	 */
	js_p->error_code = STATE_TYPE_DATAFILE;
	return SM_ACTION_COMPLETE;
    }

    if (s_op->attr.objtype == PVFS_TYPE_DIRDATA)
    {
	js_p->error_code = STATE_TYPE_DIRDATA;

	gossip_debug(
            GOSSIP_SERVER_DEBUG, "  type is dirdata; checking "
            "dirent_count before removing dirdata itself.\n");
	return SM_ACTION_COMPLETE;
    }

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

/*
 * Function: remove_verify_object_metadata
 *
 * Verifies that the user has permission to access the file (not yet
 * implemented).  Also directs removal of dirdata dspace in the case
 * of a directory.
 *
 * This state has changed some over time; it might need a new name.
 *
 * Note: errors from the previous state are redirected elsewhere, so
 * we know that we have metadata if we make it here.
 */
static PINT_sm_action remove_verify_object_metadata(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *a_p;

    a_p = &s_op->attr;

    js_p->error_code = 0;
    
    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "  attrs read from keyval = (owner = %d, "
                 "group = %d, perms = %o, type = %d)\n",
		 a_p->owner,
		 a_p->group,
		 a_p->perms,
		 a_p->objtype);

    if (a_p->objtype == PVFS_TYPE_DIRECTORY)
    {
	js_p->error_code = STATE_TYPE_DIRECTORY;

	gossip_debug(
            GOSSIP_SERVER_DEBUG, "  type is directory; removing "
            "dirdata object before removing directory itself.\n");
    }

    return SM_ACTION_COMPLETE;
}


static PINT_sm_action remove_get_dirent_count(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret;
    job_id_t tmp_id;

    if (js_p->error_code < 0)
    {
        return SM_ACTION_COMPLETE;
    }
    js_p->error_code = 0;

    gossip_debug(
            GOSSIP_SERVER_DEBUG, 
            "remove: getting dirdata dirent_count...\n");

    ret = job_trove_keyval_iterate_keys(
        s_op->req->u.remove.fs_id,
        s_op->req->u.remove.handle, /* it's a dirdata handle */
        PVFS_ITERATE_START,
        &s_op->u.remove.key,
        1,
        0,
        NULL,
        smcb,
        0,
        js_p,
        &tmp_id,
        server_job_context, s_op->req->hints);

    return ret;
}

static PINT_sm_action remove_check_dirdata_entries(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op __attribute__((unused)) =
        PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(
            GOSSIP_SERVER_DEBUG, 
            "remove: dirdata returning error_code = %d, count = %d\n",
            js_p->error_code, js_p->count);

    if (js_p->error_code == 0)
    {
        if(js_p->count > 0)
        {
            gossip_debug(GOSSIP_SERVER_DEBUG, 
                         " detected non-empty "
                         "directory (fsid: %u, handle: %llu) "
                         "-- returning error\n",
                         s_op->req->u.remove.fs_id,
                         llu(s_op->req->u.remove.handle));
            js_p->error_code = -PVFS_ENOTEMPTY;
        }
    }
    else if(js_p->error_code == -TROVE_ENOENT)
    {
        /* no entries because count is 0 */
        js_p->error_code = 0;
    }

    /* setup position for next state (remove[_dirdata]_keyvals) */
    return SM_ACTION_COMPLETE;
}



static PINT_sm_action remove_get_dist_dir_attr(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret;
    job_id_t j_id;

    /* set up key and value structures for reading the dist_dir_attr */
    s_op->key.buffer = Trove_Common_Keys[DIST_DIR_ATTR_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIST_DIR_ATTR_KEY].size;
    if(s_op->free_val)
    {
        free(s_op->val.buffer);
    }

    s_op->val.buffer = &s_op->attr.u.dir.dist_dir_attr;
    s_op->val.buffer_sz = sizeof(PVFS_dist_dir_attr);
    s_op->free_val = 0;

    js_p->error_code = 0;
    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "  trying to read dist_dir_attr (coll_id = %d, "
                 "handle = %llu, key = %s (%d), val_buf = %p (%d))\n",
		 s_op->req->u.remove.fs_id, llu(s_op->req->u.remove.handle),
		 (char *)s_op->key.buffer, s_op->key.buffer_sz,
		 s_op->val.buffer, s_op->val.buffer_sz);

    ret = job_trove_keyval_read(
        s_op->req->u.remove.fs_id, s_op->req->u.remove.handle,
        &s_op->key, &s_op->val,
        0,
        NULL, smcb, 0, js_p,
        &j_id, server_job_context, s_op->req->hints);

    return ret;
}


static PINT_sm_action remove_get_dirdata_handles(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret;
    PVFS_object_attr *attr_p;
    job_id_t j_id;

    attr_p = &s_op->attr;

    if(js_p->error_code == -TROVE_ENOENT)
    {
        gossip_debug(GOSSIP_GETATTR_DEBUG, "remove: no DIST_DIR_ATTR key present in directory meta handle!!\n");
        attr_p->u.dir.dist_dir_bitmap = NULL;
        attr_p->u.dir.dirdata_handles = NULL;
        return SM_ACTION_COMPLETE;
    }

    assert(attr_p->u.dir.dist_dir_attr.num_servers > 0);
    
    gossip_debug(GOSSIP_GETATTR_DEBUG, 
            "remove: get dist-dir-attr for dir meta handle %llu "
            "with tree_height=%d, num_servers=%d, bitmap_size=%d, "
            "split_size=%d, server_no=%d and branch_level=%d\n",
            llu(s_op->u.remove.handle),
            attr_p->u.dir.dist_dir_attr.tree_height,
            attr_p->u.dir.dist_dir_attr.num_servers,
            attr_p->u.dir.dist_dir_attr.bitmap_size,
            attr_p->u.dir.dist_dir_attr.split_size,
            attr_p->u.dir.dist_dir_attr.server_no,
            attr_p->u.dir.dist_dir_attr.branch_level);

    /* allocate space for dirdata handles */
    attr_p->u.dir.dist_dir_bitmap = NULL;
    attr_p->u.dir.dirdata_handles = 
        malloc(attr_p->u.dir.dist_dir_attr.num_servers *
                sizeof(PVFS_handle));
    if(!attr_p->u.dir.dirdata_handles)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* set up key and value structures for reading dirdata handles */
    s_op->key.buffer = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].size;
    if(s_op->free_val)
    {
        free(s_op->val.buffer);
    }

    s_op->val.buffer = attr_p->u.dir.dirdata_handles;
    s_op->val.buffer_sz = attr_p->u.dir.dist_dir_attr.num_servers *
                sizeof(PVFS_handle);
    s_op->free_val = 0; /* will be freed in PINT_free_object_attr*/

    js_p->error_code = 0;
    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "  trying to read dirdata handles (coll_id = %d, "
                 "handle = %llu, key = %s (%d), val_buf = %p (%d))\n",
		 s_op->req->u.remove.fs_id, llu(s_op->req->u.remove.handle),
		 (char *)s_op->key.buffer, s_op->key.buffer_sz,
		 s_op->val.buffer, s_op->val.buffer_sz);

    ret = job_trove_keyval_read(
        s_op->req->u.remove.fs_id, s_op->req->u.remove.handle,
        &s_op->key, &s_op->val,
        0,
        NULL, smcb, 0, js_p,
        &j_id, server_job_context, s_op->req->hints);

    return ret;
}



static PINT_sm_action remove_get_dirent_count_setup_msgpair_array(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    int i = 0;
    PVFS_object_attr *attr_p = NULL;
    PINT_sm_msgpair_state *msg_p = NULL;

    js_p->error_code = 0;

    attr_p = &s_op->attr;
    assert(attr_p);

    /* initialize msgpair array */
    ret = PINT_msgpairarray_init(&s_op->msgarray_op, 
            attr_p->u.dir.dist_dir_attr.num_servers);
    if(ret != 0)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    /* prepare to post the getattr send/recv pairs for all dirdata*/
    foreach_msgpair(&s_op->msgarray_op, msg_p, i)
    {

        gossip_debug(GOSSIP_SERVER_DEBUG,
                     "remove: posting dirdata getattr[%d] (%lld,%d)\n",
                     i, llu(attr_p->u.dir.dirdata_handles[i]),
                     s_op->req->u.remove.fs_id);

        PINT_SERVREQ_GETATTR_FILL(
            msg_p->req,
            s_op->req->credentials,
            s_op->req->u.remove.fs_id,
            attr_p->u.dir.dirdata_handles[i],
            PVFS_ATTR_DIR_DIRENT_COUNT, /* only interested in dirent_count */
            NULL);

        /* fill in msgpair structure components */
        msg_p->fs_id = s_op->req->u.remove.fs_id;
        msg_p->handle = attr_p->u.dir.dirdata_handles[i];
        msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
        msg_p->comp_fn = remove_get_dirent_count_comp_fn;

        ret = PINT_cached_config_map_to_server(
            &msg_p->svr_addr, msg_p->handle, msg_p->fs_id);

        if (ret)
        {
            gossip_err("Failed to map meta server address\n");
            js_p->error_code = ret;
            break;
        }
    }

    PINT_sm_push_frame(smcb, 0, &s_op->msgarray_op);
    return SM_ACTION_COMPLETE;

}


static int remove_get_dirent_count_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index)
{
 
    gossip_debug(
            GOSSIP_SERVER_DEBUG, "  remove_get_dirent_count_comp_fn: "
            "response from dirdata[%d].\n",
            index);

    assert(resp_p->op == PVFS_SERV_GETATTR);

    if (resp_p->status)
    {   
        return resp_p->status;
    }

    if (resp_p->u.getattr.attr.u.dir.dirent_count == 0)
    {
        gossip_debug(
                GOSSIP_SERVER_DEBUG, "  dirent_count = 0. returning 0.\n ");
        return 0;
    }

    gossip_debug(
            GOSSIP_SERVER_DEBUG, "  dirent_count = %llu. returning -PVFS_ENOTEMPTY.\n ",
            llu(resp_p->u.getattr.attr.u.dir.dirent_count));

    return -PVFS_ENOTEMPTY;
}



static PINT_sm_action remove_remove_dirdata_handles_setup_msgpair_array(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    int i = 0;
    PVFS_object_attr *attr_p = NULL;
    PINT_sm_msgpair_state *msg_p = NULL;

    js_p->error_code = 0;

    attr_p = &s_op->attr;
    assert(attr_p);

    /* cleanup previous msgpair array */
    PINT_msgpairarray_destroy(&s_op->msgarray_op);
    /* initialize msgpair array */
    ret = PINT_msgpairarray_init(&s_op->msgarray_op, 
            attr_p->u.dir.dist_dir_attr.num_servers);
    if(ret != 0)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    /* prepare to post the remove send/recv pairs for all dirdata handles*/
    foreach_msgpair(&s_op->msgarray_op, msg_p, i)
    {

        gossip_debug(GOSSIP_SERVER_DEBUG,
                     "remove: posting dirdata handles remove[%d] (%lld,%d)\n",
                     i, llu(attr_p->u.dir.dirdata_handles[i]),
                     s_op->req->u.remove.fs_id);

        PINT_SERVREQ_REMOVE_FILL(
            msg_p->req,
            s_op->req->credentials,
            s_op->req->u.remove.fs_id,
            attr_p->u.dir.dirdata_handles[i],
            NULL);

        /* fill in msgpair structure components */
        msg_p->fs_id = s_op->req->u.remove.fs_id;
        msg_p->handle = attr_p->u.dir.dirdata_handles[i];
        msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
        msg_p->comp_fn = remove_remove_dirdata_handles_comp_fn;

        ret = PINT_cached_config_map_to_server(
            &msg_p->svr_addr, msg_p->handle, msg_p->fs_id);

        if (ret)
        {
            gossip_err("Failed to map meta server address\n");
            js_p->error_code = ret;
            break;
        }
    }

    PINT_sm_push_frame(smcb, 0, &s_op->msgarray_op);
    return SM_ACTION_COMPLETE;

}


static int remove_remove_dirdata_handles_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index)
{
    gossip_debug(
            GOSSIP_SERVER_DEBUG, "  remove_remove_dirdata_handles_comp_fn: "
            "response from dirdata[%d]: %d.\n",
            index, resp_p->status);

    assert(resp_p->op == PVFS_SERV_REMOVE);

    return resp_p->status;
}


static PINT_sm_action remove_remove_dirdata_handles_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_msgpairarray_destroy(&s_op->msgarray_op);

    return SM_ACTION_COMPLETE;
}

/*
 * Function: remove_remove_dspace
 *
 * Remove the dspace using the handle from the incoming request
 * (which was verified in previous states).
 */
static PINT_sm_action remove_remove_dspace(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t j_id;
    gossip_debug(GOSSIP_SERVER_DEBUG, "(%p) remove: removing dspace "
                 "object %llu,%d\n", s_op, llu(s_op->req->u.remove.handle),
                 s_op->req->u.remove.fs_id);

    ret = job_trove_dspace_remove(
        s_op->req->u.remove.fs_id, s_op->req->u.remove.handle,
        TROVE_SYNC,
        smcb, 0, js_p,
        &j_id, server_job_context, s_op->req->hints);

    return ret;
}

/*
 * Function: remove_cleanup
 *
 * Free all memory associated with this request and return 0, indicating
 * we're done processing.
 */
static PINT_sm_action remove_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_free_object_attr(&s_op->attr);
    return(server_state_machine_complete(smcb));
}

PINT_GET_OBJECT_REF_DEFINE(remove);

struct PINT_server_req_params pvfs2_remove_params =
{
    .string_name = "remove",
    .get_object_ref = PINT_get_object_ref_remove,
    .perm = PINT_SERVER_CHECK_NONE,
    .access_type = PINT_server_req_modify,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .state_machine = &pvfs2_remove_sm
};


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
