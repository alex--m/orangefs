/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <stddef.h>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#endif

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "str-utils.h"
#include "pint-util.h"
#include "pvfs2-internal.h"
#include "pint-security.h"

enum 
{
    STATE_ENOTDIR = 22,
    STATE_NOMORESEGS = 23,
};

%%

machine pvfs2_lookup_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => init;
        default => final_response;
    }

    state init
    {
        run lookup_init;
        default => read_directory_entry_handle;
    }

    state read_directory_entry_handle
    {
        run lookup_read_directory_entry_handle;
        success => read_directory_entry;
        default => final_response;
    }
    
    state read_directory_entry
    {
        run lookup_read_directory_entry;
        default => final_response;
    }

    state final_response 
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run lookup_cleanup;
        default => terminate;
    }
}

%%

/*
 * Function: lookup_init
 *
 * Synopsis: initializes internal structures and posts job to request
 * scheduler.
 *
 * Assumes req structure holds a valid path.
 *
 */
static PINT_sm_action lookup_init(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    /* fill in the lookup portion of the PINT_server_op */
    s_op->u.lookup.segp = NULL;

    gossip_debug(GOSSIP_SERVER_DEBUG, " STARTING LOOKUP REQUEST "
                     "(path:%s)(fs_id:%d)(handle:%llu)(attrmask:%u)\n",
                     s_op->req->u.lookup_path.path,
                     s_op->req->u.lookup_path.fs_id,
                     llu(s_op->req->u.lookup_path.handle),
                     s_op->req->u.lookup_path.attrmask);

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

/*
 * Function: lookup_read_directory_entry_handle
 *
 * Synopsis: Given a directory handle, look up the handle used to
 * store directory entries for this directory.
 *
 * Initializes key and value structures to direct handle into
 * s_op->u.lookup.dirent_handle, which is where we always store the
 * handle used to read directory entries.
 *
 * Posts the keyval read to trove.
 */
static PINT_sm_action lookup_read_directory_entry_handle(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PVFS_handle handle = PVFS_HANDLE_NULL;
    job_id_t j_id;

    handle = s_op->req->u.lookup_path.handle;
    
    gossip_debug(GOSSIP_SERVER_DEBUG,
		 "  reading dirent handle value from handle %llu\n",
		 llu(handle));

    s_op->key.buffer = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;
    s_op->val.buffer = &s_op->u.lookup.dirent_handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    ret = job_trove_keyval_read(
        s_op->req->u.lookup_path.fs_id, handle, &s_op->key, &s_op->val,
        0, 
        NULL, smcb, 0, js_p, &j_id, server_job_context, s_op->req->hints);

    return ret;
}

/*
 * Function: lookup_read_directory_entry
 *
 * Synopsis: Given a handle for a dspace holding directory entries,
 * look up the current segment and obtain its handle.
 */
static PINT_sm_action lookup_read_directory_entry(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t j_id;
    
    /* find the segment that we should look up in the directory */
    ret = PINT_string_next_segment(
        s_op->req->u.lookup_path.path, &s_op->u.lookup.segp,
        &s_op->u.lookup.segstate);
    if(ret != 0)
    {
        gossip_err("PINT_string_next_segment failed: path: %s\n",
            s_op->req->u.lookup_path.path);
    }
    assert(ret == 0);

    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  reading from dirent handle = "
        "%llu, segment = %s (len=%d)\n", llu(s_op->u.lookup.dirent_handle),
        s_op->u.lookup.segp, (int) strlen(s_op->u.lookup.segp));

    s_op->key.buffer = s_op->u.lookup.segp;
    s_op->key.buffer_sz = strlen(s_op->u.lookup.segp) + 1;
    s_op->val.buffer = &s_op->resp.u.lookup_path.handle;
    s_op->val.buffer_sz = sizeof(PVFS_handle);

    ret = job_trove_keyval_read(
        s_op->req->u.lookup_path.fs_id, s_op->u.lookup.dirent_handle,
        &s_op->key, &s_op->val, 
        0, 
        NULL, smcb, 0, js_p, &j_id,
        server_job_context, s_op->req->hints);

    return ret;
}


static PINT_sm_action lookup_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    return(server_state_machine_complete(smcb));
}

static int perm_lookup(PINT_server_op *s_op)
{
    int ret;

    if (s_op->req->capability.op_mask & PINT_CAP_EXEC)
    {
        ret = 0;
    }
    else
    {
        ret = -PVFS_EACCES;
    }

    return ret;
}

PINT_GET_OBJECT_REF_DEFINE(lookup_path);

struct PINT_server_req_params pvfs2_lookup_params =
{
    .string_name = "lookup_path",
    .perm = perm_lookup,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .get_object_ref = PINT_get_object_ref_lookup_path,
    .state_machine = &pvfs2_lookup_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
