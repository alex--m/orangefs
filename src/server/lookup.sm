/*
 * Copyright 2011 Clemson University
 *
 * See COPYING in top-level directory.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "server-config.h"
#include "pvfs2-types.h"
#include "pvfs2-server.h"
#include "state-machine.h"
#include "job.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-storage.h"
#include "pvfs2-internal.h"

%%

machine pvfs2_lookup_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => init;
        default => final_response;
    }

    state init
    {
        run lookup_init;
        success => read_directory_entry_handle;
        default => final_response;
    }

    state read_directory_entry_handle
    {
        run lookup_read_directory_entry_handle;
        success => read_directory_entry;
        default => final_response;
    }

    state read_directory_entry
    {
        run lookup_read_directory_entry;
        success => read_object_metadata;
        default => final_response;
    }

    state read_object_metadata
    {
        run lookup_read_object_metadata;
        default => setup_resp;
    }

    state setup_resp
    {
        run lookup_setup_resp;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run lookup_cleanup;
        default => terminate;
    }
}

%%

/*
 *  lookup_init
 *
 */
static PINT_sm_action lookup_init(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_SERVER_DEBUG, " STARTING LOOKUP REQUEST "
                 "(name:%s)(fs_id:%d)(handle:%llu)(attrmask:%u)\n",
                 s_op->req->u.lookup.name, s_op->target_fs_id,
                 llu(s_op->target_handle), s_op->req->u.lookup.attrmask);

    if (!(s_op->target_object_attr->objtype & PVFS_TYPE_DIRECTORY))
    {
        gossip_debug(GOSSIP_SERVER_DEBUG,
                     "  invalid parent directory; sending error response\n");
        js_p->error_code = -PVFS_ENOTDIR;
    }
    else
    {
        js_p->error_code = 0;
    }

    return SM_ACTION_COMPLETE;
}

/*
 *  lookup_read_directory_entry_handle
 *
 */
static PINT_sm_action lookup_read_directory_entry_handle(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t j_id;
    int ret = -PVFS_EINVAL;

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "  reading dirent handle value from handle %llu\n",
                 llu(s_op->target_handle));

    s_op->key.buffer = Trove_Common_Keys[DIR_ENT_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIR_ENT_KEY].size;
    s_op->val.buffer = &s_op->u.lookup.dirent_handle;
    s_op->val.buffer_sz = sizeof(s_op->u.lookup.dirent_handle);

    ret = job_trove_keyval_read(s_op->target_fs_id, s_op->target_handle,
                                &s_op->key, &s_op->val, 0, NULL, smcb, 0, js_p,
                                &j_id, server_job_context, s_op->req->hints);

    return ret;
}

/*
 *  lookup_read_directory_entry
 */
static PINT_sm_action lookup_read_directory_entry(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t j_id;
    int ret = -PVFS_EINVAL;

    gossip_debug(GOSSIP_SERVER_DEBUG, "  reading from dirent handle = %llu, "
                 "name = %s\n", llu(s_op->u.lookup.dirent_handle),
                 s_op->req->u.lookup.name);

    s_op->key.buffer = s_op->req->u.lookup.name;
    s_op->key.buffer_sz = strlen(s_op->req->u.lookup.name) + 1;
    s_op->val.buffer = &s_op->u.lookup.handle;
    s_op->val.buffer_sz = sizeof(s_op->u.lookup.handle);

    ret = job_trove_keyval_read(
        s_op->target_fs_id, s_op->u.lookup.dirent_handle, &s_op->key,
        &s_op->val, 0, NULL, smcb, 0, js_p, &j_id, server_job_context,
        s_op->req->hints);

    return ret;
}

/*
 *  lookup_read_object_metadata
 */
static PINT_sm_action lookup_read_object_metadata(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t j_id;
    int ret = -PVFS_EINVAL;

    ret = job_trove_dspace_getattr(
        s_op->target_fs_id, s_op->u.lookup.handle, smcb,
        &s_op->u.lookup.ds_attr, 0, js_p, &j_id, server_job_context,
        s_op->req->hints);

    return ret;
}

/*
 *  lookup_setup_resp
 */
static PINT_sm_action lookup_setup_resp(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    s_op->resp.u.lookup.handle = s_op->u.lookup.handle;

    if (js_p->error_code)
    {
        s_op->resp.u.lookup.attr.objtype = PVFS_TYPE_NONE;
        s_op->resp.u.lookup.attr.mask = 0;
    }
    else
    {
        PVFS_ds_attr_to_object_attr(
            &s_op->u.lookup.ds_attr, &s_op->resp.u.lookup.attr);
    }

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

/*
 *  lookup_cleanup
 */
static PINT_sm_action lookup_cleanup(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    return (server_state_machine_complete(smcb));
}


static int perm_lookup(PINT_server_op *s_op)
{
    int ret;

    if (s_op->req->capability.op_mask & PINT_CAP_EXEC)
    {
        ret = 0;
    }
    else
    {
        ret = -PVFS_EACCES;
    }

    return ret;
}

PINT_GET_OBJECT_REF_DEFINE(lookup);

struct PINT_server_req_params pvfs2_lookup_params = 
{
    .string_name = "lookup",
    .perm = perm_lookup,
    .access_type = PINT_server_req_readonly,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .get_object_ref = PINT_get_object_ref_lookup,
    .state_machine = &pvfs2_lookup_sm
};


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
