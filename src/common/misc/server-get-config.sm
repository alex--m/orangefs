/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>
#ifndef WIN32
#include <unistd.h>
#endif

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "pvfs2-util.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "security-util.h"
#include "sid.h"

extern job_context_id pint_client_sm_context;

static int server_parse_config(struct server_configuration_s *config,
                               char *fs_config_buf,
                               uint32_t fs_config_buf_size);

static int server_get_config_comp_fn(void *v_p,
                                     struct PVFS_server_resp *resp_p,
                                     int i);

%%

nested machine pvfs2_server_get_config_nested_sm
{
    state setup_msgpair
    {
        run server_get_config_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => parse;
        default => cleanup;
    }

    state parse
    {
        run server_get_config_parse;
        default => cleanup;
    }

    state cleanup
    {
        run server_get_config_cleanup;
        default => return;
    }
}

machine pvfs2_server_get_config_sm
{
    state run_nested 
    {
        jump pvfs2_server_get_config_nested_sm;
        default => parent_cleanup;
    }

    state parent_cleanup
    {
        run server_get_config_parent_cleanup;
        default => terminate;
    }
}

%%

/* <====================== HELPER FUNCTIONS =====================> */

#ifdef WIN32
static int server_parse_config(struct server_configuration_s *config,
                               char *fs_config_buf,
                               uint32_t fs_config_buf_size)
{
    int ret = 1, template_index = 1;
    char temp_path[MAX_PATH], temp_file[MAX_PATH];
    char *server_alias = NULL;
    DWORD rc = 1, error, use_temp_path, bytes;
    HANDLE hFile;

    if (config == NULL)
    {
        return ret;
    }

    assert(fs_config_buf);

    /* get the path to the TEMP directory */
    use_temp_path = GetTempPath(MAX_PATH, temp_path);
    if (use_temp_path)
    {
        /* get temporary file name in TEMP directory */
        use_temp_path = GetTempFileName(temp_path, 
                                        "__pvfs_fs_config", 0, temp_file);
    }

    if (!use_temp_path)
    {
        /* get temporary file name in current directory */
        rc = GetTempFileName(".", "__pvfs_fs_config", 0, temp_file);
    }

    if (!rc)
    {
        gossip_err("Error: Cannot create temporary "
                   "configuration files!\n");
        return ret;
    }

    hFile = CreateFile(temp_file, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,
                       FILE_ATTRIBUTE_NORMAL, NULL);

    if (hFile == INVALID_HANDLE_VALUE)
    {
        gossip_err("Error: Cannot create temporary "
                   "configuration files!\n");
        return ret;
    }

    assert(!fs_config_buf[fs_config_buf_size - 1]);

    rc = WriteFile(hFile, fs_config_buf, fs_config_buf_size - 1, &bytes, NULL);
    error = GetLastError();
    
    CloseHandle(hFile);
    
    if (rc && (bytes == fs_config_buf_size - 1))
    {
        server_alias = PINT_util_guess_alias();
        ret = PINT_parse_config(config, temp_file, server_alias, 0);
    }
    else
    {
        gossip_err("Failed to write fs.conf buffer to temp file: %s: %d\n",
                   temp_file, error);
    }    

    DeleteFile(temp_file);

    return ret;
}
#else
static int server_parse_config(struct server_configuration_s *config,
                               char *fs_config_buf,
                               uint32_t fs_config_buf_size)
{
    int ret = 1, template_index = 1;
    int fs_fd = 0;
    char *server_alias = NULL;
    char fs_template_array[2][64] =
    {
        ".__pvfs_fs_configXXXXXX",
        "/tmp/.__pvfs_fs_configXXXXXX"
    };
    char *fs_template = NULL;

    if (config)
    {
        assert(fs_config_buf);

        while(1)
        {
            assert(template_index > -1);
            fs_template = fs_template_array[template_index];

            fs_fd = mkstemp(fs_template);
            if (fs_fd != -1)
            {
                break;
            }
            else if ((--template_index) < 0)
            {
                gossip_err("Error: Cannot create temporary "
                           "configuration files!\n");
                return ret;
            }
        }

        assert(!fs_config_buf[fs_config_buf_size - 1]);

        if (write(fs_fd,fs_config_buf, (fs_config_buf_size - 1)) ==
            (fs_config_buf_size - 1))
        {
            server_alias = PINT_util_guess_alias();
            ret = PINT_parse_config(config, fs_template, server_alias, 0);
        }
        else
        {
            gossip_err("Failed to write fs.conf buffer to temp file: %s: %s\n",
                       fs_template, strerror(errno));
        }
    
        close(fs_fd);

        remove(fs_template);
    }
    return ret;
}
#endif

/* <=================== COMPLETION FUNCTIONS ==================> */

static int server_get_config_comp_fn(void *v_p,
                                     struct PVFS_server_resp *resp_p,
                                     int i)
{
    PINT_smcb *smcb = v_p;
    PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM);

    /* only posted one msgpair */
    assert(i==0);

    /* if this particular request was successful, then store the server
     * response and let the caller sort it out */

    if (sm_p->msgarray_op.msgarray[i].op_status == 0)
    {
	sm_p->u.get_config.fs_config_buf = 
		strdup(resp_p->u.getconfig.fs_config_buf);
	sm_p->u.get_config.fs_config_buf_size = 
		resp_p->u.getconfig.fs_config_buf_size;
    }

    /* if this is the last response, check all of the status values
     * and return error code if any requests failed
     */
    if (i == (sm_p->msgarray_op.count -1))
    {
        return PINT_msgarray_status(&sm_p->msgarray_op);
    }
    return 0;
}

/* <================== STATE ACTION FUNCTIONS =================> */

static PINT_sm_action server_get_config_setup_msgpair(struct PINT_smcb *smcb,
                                                      job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_capability capability;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "get_config state: server_get_config_setup_msgpair\n");
    
    PINT_null_capability(&capability);

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    if (ENCODING_IS_VALID(sm_p->u.get_config.mntent->encoding))
    {
        msg_p->enc_type = sm_p->u.get_config.mntent->encoding;
    }

    PINT_SERVREQ_GETCONFIG_FILL(msg_p->req, capability, sm_p->hints);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_READ;
    msg_p->fs_id = PVFS_FS_ID_NULL;
    msg_p->handle = PVFS_HANDLE_NULL;
    /* V3 not sure what to do with this - eventually we should have
     * multiple SIDs so we can fail over but that will require some
     * changes to set that up - then we reflect that here.
     */
    msg_p->sid_count = 1;
    msg_p->sid_index = 0;
    msg_p->sid_array = NULL;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = server_get_config_comp_fn;

    /* V3 check on this - do we need to modify it for sids? */
    ret = BMI_addr_lookup(&msg_p->svr_addr,
                          sm_p->u.get_config.mntent->the_pvfs_config_server);
    if (ret < 0)
    {
        gossip_lerr("Failed to resolve BMI address %s\n",
                    sm_p->u.get_config.mntent->the_pvfs_config_server);
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action server_get_config_cleanup(struct PINT_smcb *smcb,
                                                job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if (sm_p && !sm_p->u.get_config.persist_config_buffers)
    {
	free(sm_p->u.get_config.fs_config_buf);
        sm_p->u.get_config.fs_config_buf = NULL;
    }

    /* preserve js_p->error_code */

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action server_get_config_parse(struct PINT_smcb *smcb,
                                              job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    struct filesystem_configuration_s* cur_fs = NULL;

    if(sm_p->u.get_config.config)
    {
        ret = server_parse_config(sm_p->u.get_config.config,
                                  sm_p->u.get_config.fs_config_buf,
                                  sm_p->u.get_config.fs_config_buf_size);
        if (ret)
        {
            gossip_err("Failed to get_config from host %s\n",
                       sm_p->u.get_config.mntent->the_pvfs_config_server); 
            js_p->error_code = ret;
            return SM_ACTION_COMPLETE;
        }
    }

    if(sm_p->u.get_config.mntent->fs_id == PVFS_FS_ID_NULL)
    {
        cur_fs = PINT_config_find_fs_name(
                                sm_p->u.get_config.config, 
                                sm_p->u.get_config.mntent->pvfs_fs_name);
        if (!cur_fs)
        {
            gossip_err("Warning:\n Cannot retrieve information about "
                    "filesystem %s at tab entry: %s\n",
                    sm_p->u.get_config.mntent->pvfs_fs_name,
                    sm_p->u.get_config.mntent->the_pvfs_config_server);

            /*
              if the device has no space left on it, we can't save
              the config file for parsing and get a failure; make
              a note of that possibility here
            */ 
            gossip_err("\nHINTS: If you're sure that your pvfstab file "
                       "contains valid information,\n please make sure "
                       "that you are not out of disk space and that you "
                       "have\n write permissions in the current "
                       "directory or in the /tmp directory\n\n");

            js_p->error_code = -PVFS_ENODEV;
            return SM_ACTION_COMPLETE;
        }

        sm_p->u.get_config.mntent->fs_id = cur_fs->coll_id;
        cur_fs->flowproto = sm_p->u.get_config.mntent->flowproto;
        cur_fs->encoding = sm_p->u.get_config.mntent->encoding;
    }

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action server_get_config_parent_cleanup(
                                         struct PINT_smcb *smcb,
                                         job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    sm_p->error_code  = js_p->error_code;
    PINT_SET_OP_COMPLETE;

    return SM_ACTION_DEFERRED;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
