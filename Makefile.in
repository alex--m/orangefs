srcdir = @srcdir@
VPATH = $(srcdir)
SHELL = @SHELL@
INSTALL = @INSTALL@

.SUFFIXES:
.PHONY: all clean tests distclean tmp_server_objs docs docsclean

# main source subdirectories
#
# To build up our MODULES line, we search the build tree for
# the module.mk files that were created by configure.
#
MODULES := $(shell find . -iname "*.mk" | sed -e 's/^.\///;s/module.mk//')

# TODO: fix this up later.  Maybe it should be LEX and YACC, but we
# don't really support those...
BISON = bison
FLEX = flex

CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
LD = gcc
CFLAGS +=\
 -D__STATIC_METHOD_BMI_TCP__\
 -D__STATIC_FLOWPROTO_TEMPLATE__\
 -D__STATIC_FLOWPROTO_BMI_TROVE__\
 -DUSE_BMI_MSGS=1\
 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE\
 -Wconversion -Wall -Wstrict-prototypes -pipe -I $(srcdir)/include\
 -I src/common/statecomp
LDFLAGS += -L lib
LIBS += -lpvfs2
# here we differentiate cflags between some components
LIBCFLAGS = -D__GEN_NULL_LOCKING__
SERVERCFLAGS = -D__GEN_POSIX_LOCKING__
# add all module directories into include path
CFLAGS += $(patsubst %, -I $(srcdir)/%, $(MODULES))


#
# SRCFILES is a list of source files that need to be generated
# before we get going.  This is kind of a hack, and we should
# try to find a better way to take care of it.
#
SRCFILES := src/io/trove/trove-autogen.c
#
# CLEANFILES is a list of generated files that need to be removed at
# "make clean" time.  This is just for special case files that aren't
# cleaned up by our normal rules.
#
CLEANFILES :=\
 src/common/statecomp/statecomp\
 src/common/statecomp/*.o \
 src/common/statecomp/scanner.c \
 src/common/statecomp/parser.c \
 src/common/statecomp/parser.h 

LIBRARIES := lib/libpvfs2.a
TESTSRC :=
LIBSRC :=
SERVERSRC :=
MISCSRC := 
DOCSRC :=

all: $(LIBRARIES) tests tmp_server_objs

include $(patsubst %, %/module.mk, $(MODULES))

LIBOBJS := $(patsubst %.c,%.o, $(filter %.c,$(LIBSRC)))
LIBDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(LIBSRC)))

TESTOBJS := $(patsubst %.c,%.o, $(filter %.c,$(TESTSRC)))
TESTS := $(patsubst %.c,%, $(filter %.c, $(TESTSRC)))
TESTDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(TESTSRC)))

SERVEROBJS := $(patsubst %.c,%-server.o, $(filter %.c,$(SERVERSRC)))
SERVERDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(SERVERSRC)))

# MISC objs don't belong in the client library, or the server, nor
# are they test programs.  This is where you can put other random
# things that need to be built, such as helper objects for test
# programs
MISCOBJS := $(patsubst %.c,%.o, $(filter %.c,$(MISCSRC)))
MISCDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(MISCSRC)))

DOCSPDF := $(patsubst %.tex,%.pdf, $(filter %.tex,$(DOCSRC)))
DOCSPS := $(patsubst %.tex,%.ps, $(filter %.tex,$(DOCSRC)))
# find all of the intermediate files that latex creates
DOCSCRUFT := $(patsubst %.tex,%.aux, $(filter %.tex,$(DOCSRC)))
DOCSCRUFT += $(patsubst %.tex,%.dvi, $(filter %.tex,$(DOCSRC)))
DOCSCRUFT += $(patsubst %.tex,%.log, $(filter %.tex,$(DOCSRC)))
DOCSCRUFT += $(patsubst %.tex,%.toc, $(filter %.tex,$(DOCSRC)))

# we don't really care if the dependencies are sorted; 
# this is just a trick to remove duplicate entries
DEPENDS := $(sort $(LIBDEPENDS) $(TESTDEPENDS) $(SERVERDEPENDS) $(MISCDEPENDS))

tests: $(TESTS)

# TODO: this rule is temporary to force the building of objects to
# be used in the server until we have a server target; remove this
# later
tmp_server_objs: $(SERVEROBJS)

lib/libpvfs2.a: $(LIBOBJS)
	$(INSTALL) -d lib
	ar rcs $@ $(LIBOBJS)

# NEW DEFAULT RULE FOR BUILDING EXECUTABLES FROM .O FILES
%: %.o $(LIBRARIES)
	$(LD) $(LDFLAGS) $< $(LIBS) -o $@

#
# NOTE: NOT SURE IF IT IS IMPORTANT FOR THIS RULE TO BE
# FIRST OR NOT...SHOULD LEARN THE MATCHING RULES BETTER.
#
%-server.o: %.c
	$(CC) $(SERVERCFLAGS) $(CFLAGS) $< -c -o $@

%.o: %.c
	$(CC) $(LIBCFLAGS) $(CFLAGS) $< -c -o $@

$(TESTS): %: %.o $(LIBRARIES)

docs: $(DOCSPS) $(DOCSPDF)

docsclean: 
	rm -f $(DOCSPS) $(DOCSPDF) $(DOCSCRUFT)

clean: docsclean
	rm -f $(LIBOBJS) $(TESTOBJS) $(SERVEROBJS) $(MISCOBJS) $(TESTS)\
		$(LIBRARIES) $(DEPENDS) $(CLEANFILES)

distclean: clean
	find . -name "module.mk" -exec rm \{\} \;
	rm -f $(SRCFILES) Makefile
	rm -f config.log config.status pvfs2-config.h

# we don't want to include dependencies in the makefile if we are just
# running make clean or make distclean
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
ifneq ($(MAKECMDGOALS),docs)
-include $(DEPENDS)
endif
endif
endif

# @ suppresses output from the depend shell script.
%.d: %.c $(SRCFILES)
	@echo generating dependency file $@.
	@$(srcdir)/maint/depend.sh `dirname $*` $(CFLAGS) $< > $@

# TODO: this is all broken; I'm just commenting it out for now...
# default rules for building documents in .tex format:
#%.dvi: %.tex
#	cd $(@D); latex $(srcdir)/doc/coding/$(<F); latex $(srcdir)/doc/coding/$(<F)
#
#%.ps: %.dvi
#	dvips -t letter $< -o $@
#
#%.pdf: %.tex
#	cd $(@D); pdflatex $(srcdir)/doc/coding/$(<F); pdflatex $(srcdir)/doc/coding/$(<F)
#
