# Top level makefile for pvfs2

###############################################################
# LIST OF TARGETS WHICH MAY BE USED WHEN RUNNING MAKE:
#
# all        default rule; builds libs, server, and test programs
# clean      cleans up files
# distclean  _really_ cleans up; returns to pristine tree
# docs       builds documentation in docs subdirectory
# docsclean  cleans up documentation files
# tests      builds test programs
# admintools builds admin tools
# statecomp  builds only the statecomp component
# cscope     generates information for cscope utility
# codecheck  checks source code for nonconformance to our std.
# mpitests   builds test programs that use mpi
# 
# NOTE: you can also specify any single object or executable to
#    build by providing its name (including the relative path) as the
#    make target
#

###############################################################
# General documentation
#
# This is a single makefile that runs the entire pvfs2 build
# process.  There are no makefiles in subdirectories.  For a
# general introduction to this approach, please read this document
# by Peter Miller:
#
# http://www.tip.net.au/~millerp/rmch/recu-make-cons-harm.html
#
# Each subdirectory contains a module.mk file that gets included
# when make is executed.  These module.mk files tell make about the
# files in each subdirectory that must be built, including any
# special case rules.  Make uses this information to generate a
# sinle dependency graph and orchestrate the build process from this
# top level directory.
#
# We categorize our source depending on what it will be used for.
# For example, there are lists of source files for building the
# server, building the library, building documentation, etc.
#

###############################################################
# Generic makefile setup 

# define a few generic variables that we need to use
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

VPATH = $(srcdir)
SHELL = @SHELL@
INSTALL = @INSTALL@
# TODO: should probably check for bison and flex in configure
BISON = bison
FLEX = flex
BUILD_GM = @BUILD_GM@
BUILD_MPI = @BUILD_MPI@
MPICC = @MPICC@
QUIET_COMPILE = @QUIET_COMPILE@

# Eliminate all default suffixes.  We want explicit control.
.SUFFIXES:

# PHONEY targets are targets that do not result in the generation
#    of a file that has the same name as the target.  Listing them
#    here keeps make from accidentally doing too much work (see GNU
#    make manual).
.PHONY: all clean tests distclean docs docsclean cscope codecheck statecomp admintools

################################################################
# Find project subdirectories

# MODULES is a list of subdirectories that we wish to operate on.
#    They are identified by the presence of module.mk files (makefile
#    includes).
MODULES := $(shell find . -name "*.mk" | sed -e 's/^.\///;s/module.mk//')

#################################################################
# Setup global flags

# These should all be self explanatory; they are standard flags
# for compiling and linking unless otherwise noted
CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
LD = gcc
LDFLAGS += -L lib
LIBS += @LIBS@ -lpvfs2
# for Solaris:
# LIBS += -lsocket -lnsl
  # enable BMI TCP module
CFLAGS += -D__STATIC_METHOD_BMI_TCP__
  # enable Flow debugging protocol
#CFLAGS += -D__STATIC_FLOWPROTO_DUMP_OFFSETS__
  # enable Flow BMI/Trove protocol
CFLAGS += -D__STATIC_FLOWPROTO_BMI_TROVE__
  # flags used by request encoding test harness
CFLAGS += -DUSE_BMI_MSGS=1
  # turn on large file support by default
CFLAGS += -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE
  # include current directory (for pvfs2-config.h)
CFLAGS += -I .
  # setup general warning levels and gcc options
CFLAGS += -Wall -Wstrict-prototypes -pipe -I $(srcdir)/include
  # add all module directories into include path
CFLAGS += $(patsubst %, -I $(srcdir)/%, $(MODULES))

################################################################
# Setup component specific flags

# the server will use a threaded job library 
SERVERCFLAGS = -D__GEN_POSIX_LOCKING__ -D__PVFS2_JOB_THREADED__ \
-D__PVFS2_TROVE_THREADED__ @MISC_TROVE_FLAGS@ \
-D__PVFS2_TROVE_SUPPORT__
SERVERLIBS = @LIBS@ -ldb -lrt -lpthread -lpvfs2-server
# the client libraries are not threaded (at the moment at least)
#    and therefore can disable locking in the I/O subsystems
LIBCFLAGS = -D__GEN_NULL_LOCKING__

################################################################
# enable GM if configure detected it

ifdef BUILD_GM
	CFLAGS += -I @GM_HOME@/include
	CFLAGS += -D__STATIC_METHOD_BMI_GM__
	# TODO: later on we will want the ability to modify this at configure
	# time
	CFLAGS += -DENABLE_GM_BUFPOOL
	LDFLAGS += -L @GM_HOME@/lib
	LIBS += -lgm
	SERVERLIBS += -lgm
endif


#################################################################
# Starter variables 

# NOTES: These variables are used to categorize the various source
#    files.  We let the makefile includes append to them so that we
#    gradually build up a list of source files without having to
#    list them all at the top level.

# ADMINSRC is source code for administrative programs
ADMINSRC :=
# ADMINSRC_SERVER special version of ADMINSRC for tools that need server 
# library
ADMINSRC_SERVER :=
# TESTSRC is source code for test programs
TESTSRC :=
# LIBSRC is source code for libpvfs2
LIBSRC :=
# SERVERSRC is souce code for the pvfs2 server
SERVERSRC :=
# DOCSRC is source code for documentation
DOCSRC :=
# MISCSRC is a grab bag of other sources that must be built into
#    object form (for example, shared test components)
MISCSRC := 
# MPITESTSRC is the source code for test programs that must be compiled
#    with MPI
MPITESTSRC :=
# MPIMISCSRC is a collection of sources that must be built into
#    object form using MPI
MPIMISCSRC :=

################################################################
# Top level (default) targets

# SERVER is the pvfs2 server
SERVER := src/server/pvfs2-server
# LIBRARIES is a list of the pvfs2 client libraries
LIBRARIES := lib/libpvfs2.a
# default rule builds server, library, and test programs
all: $(SERVER) $(LIBRARIES) tests admintools

################################################################
# Makefile includes

# this is how we pull build information from all of the project
#    subdirectories
include $(patsubst %, %/module.mk, $(MODULES))

################################################################
# Derived file lists

# NOTES: At this point, the subdirectory makefile includes have informed
#    us what the source files are.  Now we want to generate some
#    other lists (such as objects, executables, and dependency files)
#    by manipulating the lists of source files

# LIBOBJS is a list of objects to put in the client lib
LIBOBJS := $(patsubst %.c,%.o, $(filter %.c,$(LIBSRC)))
# LIBDEPENDS is a list of dependency files for the client lib
LIBDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(LIBSRC)))

# ADMINOBJS is a list of admin program objects
ADMINOBJS := $(patsubst %.c,%.o, $(filter %.c,$(ADMINSRC)))
ADMINOBJS_SERVER := $(patsubst %.c,%.o, $(filter %.c,$(ADMINSRC_SERVER)))
# ADMINTOOLS is a list of admin program executables
ADMINTOOLS := $(patsubst %.c,%, $(filter %.c, $(ADMINSRC)))
ADMINTOOLS_SERVER := $(patsubst %.c,%, $(filter %.c, $(ADMINSRC_SERVER)))
# ADMINDEPENDS is a list of dependency files for admin programs
ADMINDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(ADMINSRC)))
ADMINDEPENDS_SERVER := $(patsubst %.c,%.d, $(filter %.c,$(ADMINSRC_SERVER)))

# TESTOBJS is a list of test program objects
TESTOBJS := $(patsubst %.c,%.o, $(filter %.c,$(TESTSRC)))
# TESTS is a list of test program executables
TESTS := $(patsubst %.c,%, $(filter %.c, $(TESTSRC)))
# TESTDEPENDS is a list of dependency files for test programs
TESTDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(TESTSRC)))

# SERVEROBJS is a list of objects to put into the server
SERVEROBJS := $(patsubst %.c,%-server.o, $(filter %.c,$(SERVERSRC)))
# SERVERDEPENDS is a list of dependency files for the server
SERVERDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(SERVERSRC)))

# MISCOBJS is a list of misc. objects not in the above categories
MISCOBJS := $(patsubst %.c,%.o, $(filter %.c,$(MISCSRC)))
# MISCDEPENDS is a list of dependency files for misc. objects
MISCDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(MISCSRC)))

# MPIMISCOBJS is a list of misc. MPI objects not in the above categories
MPIMISCOBJS := $(patsubst %.c,%.o, $(filter %.c,$(MPIMISCSRC)))
# MPIMISCDEPENDS is a list of dependency files for MPI misc. objects
MPIMISCDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(MPIMISCSRC)))

# MPITESTOBJS is a list of MPI test program objects
MPITESTOBJS := $(patsubst %.c,%.o, $(filter %.c,$(MPITESTSRC)))
# MPITESTS is a list of MPI test program executables
MPITESTS := $(patsubst %.c,%, $(filter %.c, $(MPITESTSRC)))
# TESTDEPENDS is a list of dependency files for MPI test programs
MPITESTDEPENDS := $(patsubst %.c,%.d, $(filter %.c,$(MPITESTSRC)))


# DOCSPDF and DOCSPS are lists of documentation files generated from
#    latex
DOCSPDF := $(patsubst %.tex,%.pdf, $(filter %.tex,$(DOCSRC)))
DOCSPS := $(patsubst %.tex,%.ps, $(filter %.tex,$(DOCSRC)))

# DOCSCRUFT is a list of intermediate files generated by latex
DOCSCRUFT := $(patsubst %.tex,%.aux, $(filter %.tex,$(DOCSRC)))
DOCSCRUFT += $(patsubst %.tex,%.dvi, $(filter %.tex,$(DOCSRC)))
DOCSCRUFT += $(patsubst %.tex,%.log, $(filter %.tex,$(DOCSRC)))
DOCSCRUFT += $(patsubst %.tex,%.toc, $(filter %.tex,$(DOCSRC)))

# DEPENDS is a global list of all of our dependency files.  
# NOTE: sort is just a trick to remove duplicates; the order
#   doesn't matter at all.
DEPENDS := $(sort $(LIBDEPENDS) $(TESTDEPENDS) $(SERVERDEPENDS) $(MISCDEPENDS) $(ADMINDEPENDS) $(ADMINDEPENDS_SERVER)) 
ifdef BUILD_MPI
DEPENDS += $(MPITESTDEPENDS) $(MPIMISCDEPENDS)
endif

# CLEANFILES is a list of generated files that need to be removed at
#    "make clean" time.  This is just for special case files that aren't
#    cleaned up by our normal rules.
# NOTE: This doesn't include automatically generated source code.
#    Automatically generate source code is only removed during
#    distclean
CLEANFILES :=\
 src/common/statecomp/statecomp\
 src/common/statecomp/*.o \
 src/common/statecomp/scanner.c \
 src/common/statecomp/parser.c \
 src/common/statecomp/parser.h 

####################################################################
# Rules and dependencies

# target for building admin tools
admintools: $(ADMINTOOLS) $(ADMINTOOLS_SERVER)

# target for building the test program executables
tests: $(TESTS)

# target for building MPI test program executables
mpitests: $(MPITESTS)
ifdef BUILD_MPI
# add MPI programs to default rule
all: mpitests
endif

# note: this will look better if you use two tabs instead of spaces between
# SHORT_NAME and the object

# rule for building the pvfs2 server
$(SERVER): src/server/pvfs2-server-server.o lib/libpvfs2-server.a 
ifdef QUIET_COMPILE
	@echo "  LD		$@"
	@$(LD) $(LDFLAGS) $(SERVERLIBS) $^ -o $@
else
	$(LD) $(LDFLAGS) $(SERVERLIBS) $^ -o $@
endif

# special rules for admin tools which also require server components
$(ADMINTOOLS_SERVER): %: %.o
ifdef QUIET_COMPILE
	@echo "  LD		$@"
	@$(LD) $< $(LDFLAGS) $(SERVERLIBS) -o $@
else
	$(LD) $< $(LDFLAGS) $(SERVERLIBS) -o $@
endif

# rule for building the pvfs2 library
lib/libpvfs2.a: $(LIBOBJS)
ifdef QUIET_COMPILE
	@echo "  RANLIB	$@"
	@$(INSTALL) -d lib
	@ar rcs $@ $(LIBOBJS)
else
	$(INSTALL) -d lib
	ar rcs $@ $(LIBOBJS)
endif

# rule for building the pvfs2 server library
lib/libpvfs2-server.a: $(SERVEROBJS)
ifdef QUIET_COMPILE
	@echo "  RANLIB	$@"
	@$(INSTALL) -d lib
	@ar rcs $@ $(SERVEROBJS)
else
	$(INSTALL) -d lib
	ar rcs $@ $(SERVEROBJS)
endif


# rule for building MPI objects
$(MPITESTOBJS): %.o: %.c
ifdef BUILD_MPI
ifdef QUIET_COMPILE
	@echo "  MPICC		$@"
	@$(MPICC) $(LIBCFLAGS) $(CFLAGS) $< -c -o $@
else
	$(MPICC) $(LIBCFLAGS) $(CFLAGS) $< -c -o $@
endif
else
	@echo Error: You must specify --with-mpi=dir at configure time 
	@echo   in order to enable compilation of MPI programs.
	@false
endif

# rule for building MPI misc. objects
$(MPIMISCOBJS): %.o: %.c
ifdef BUILD_MPI
ifdef QUIET_COMPILE
	@echo "  MPICC		$@"
	@$(MPICC) $(LIBCFLAGS) $(CFLAGS) $< -c -o $@
else
	$(MPICC) $(LIBCFLAGS) $(CFLAGS) $< -c -o $@
endif
else
	@echo Error: You must specify --with-mpi=dir at configure time 
	@echo   in order to enable compilation of MPI programs.
	@false
endif

# rule for building MPI executables from object files
# $(MPITESTS): %: %.o $(LIBRARIES)
#	$(MPICC) $(LDFLAGS) $< $(LIBS) -o $@

# default rule for building executables from object files
%: %.o $(LIBRARIES)
ifdef QUIET_COMPILE
	@echo "  LD		$@"
	@$(LD) $(LDFLAGS) $< $(LIBS) -o $@
else
	$(LD) $(LDFLAGS) $< $(LIBS) -o $@
endif

# rule for building server objects
%-server.o: %.c
ifdef QUIET_COMPILE
	@echo "  CC		$@"
	@$(CC) $(SERVERCFLAGS) $(CFLAGS) $< -c -o $@
else
	$(CC) $(SERVERCFLAGS) $(CFLAGS) $< -c -o $@
endif

# default rule for building objects 
%.o: %.c
ifdef QUIET_COMPILE
	@echo "  CC		$@"
	@$(CC) $(LIBCFLAGS) $(CFLAGS) $< -c -o $@
else
	$(CC) $(LIBCFLAGS) $(CFLAGS) $< -c -o $@
endif

# all test programs depend on the pvfs2 library
$(TESTS): %: %.o $(LIBRARIES)

$(ADMINTOOLS): %: %.o $(LIBRARIES)
$(ADMINTOOLS_SERVER): %: %.o $(LIBRARIES) lib/libpvfs2-server.a

# target for building _just_ the statecomp tool
statecomp: src/common/statecomp/statecomp
	
# rule for generating cscope information
cscope:
	find $(srcdir) -iname "*.[ch]" -o -iname "*.sm"> $(srcdir)/cscope.files
	( cd $(srcdir); cscope -be -i $(srcdir)/cscope.files )

# rule for running code check
codecheck:
	find $(srcdir) -iname "*.[ch]" | xargs -n 1 $(srcdir)/maint/pvfs2codecheck.pl

# target for building documentation
docs: $(DOCSPS) $(DOCSPDF)

# rule for cleaning up documentation
docsclean: 
	rm -f $(DOCSPS) $(DOCSPDF) $(DOCSCRUFT)

# top rule for cleaning up tree
clean: docsclean
	rm -f $(LIBOBJS) $(TESTOBJS) $(SERVEROBJS) $(MISCOBJS) $(TESTS)\
		$(LIBRARIES) $(DEPENDS) $(CLEANFILES)  $(SERVER) $(MPIMISCOBJS)\
		$(MPITESTS) $(MPITESTOBJS) $(MPITESTDEPENDS) $(MPIMISCDEPENDS) \
		$(ADMINOBJS) $(ADMINTOOLS) lib/libpvfs2-server.a

# _really_ clean the tree; should go back to pristine state
distclean: clean
	find . -name "module.mk" -exec rm \{\} \;
	rm -f Makefile config.log config.status pvfs2-config.h
	rm -f src/io/trove/autogen.c
	rm -f $(SERVERGENSRC)

# this is where we include all of our automatic dependencies.
# NOTE: we wrap this in ifneq's in order to prevent the
#    dependencies from being generated for special targets that don't 
#    require them
ifneq ($(MAKECMDGOALS),statecomp)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
ifneq ($(MAKECMDGOALS),docs)
ifneq ($(MAKECMDGOALS),cscope)
-include $(DEPENDS)
endif
endif
endif
endif
endif

# rule for generating dependency files for MPI code
#
# note: mpi-depend.sh is automatically generated, so it is in
#       the build directory already.
$(MPITESTDEPENDS): %.d: %.c
ifdef QUIET_COMPILE
	@echo "  DEP		$@"
else
	@echo generating dependency file $@.
endif
	@sh ./maint/mpi-depend.sh `dirname $*` $(CFLAGS) $< > $@

$(MPIMISCDEPENDS): %.d: %.c
ifdef QUIET_COMPILE
	@echo "  DEP		$@"
else
	@echo generating dependency file $@.
endif
	@sh ./maint/mpi-depend.sh `dirname $*` $(CFLAGS) $< > $@

# default rule for generating dependency files
%.d: %.c
ifdef QUIET_COMPILE
	@echo "  DEP		$@"
else
	@echo generating dependency file $@.
endif
	@$(srcdir)/maint/depend.sh `dirname $*` $(CFLAGS) $< > $@

# default rules for building documents in .tex format:
# TODO: these documentation rules are a big hack!
%.dvi: %.tex
	$(srcdir)/maint/pvfs2latexwrapper.pl -i $< -o $@
%.ps: %.dvi
	( cd $(@D); dvips -t letter $(<F) -o $(@F) )
%.pdf: %.dvi
	( cd $(@D); dvipdf $(<F) $(@F) )

# rule for automatically generated source files
%.c: %.sm src/common/statecomp/statecomp
ifdef QUIET_COMPILE
	@echo "  SMC		$@"
	@src/common/statecomp/statecomp $< $@
else
	src/common/statecomp/statecomp $< $@
endif

install:
	install -d $(prefix)/include
	install -m 644 $(srcdir)/include/pvfs2.h $(prefix)/include
	install -m 644 $(srcdir)/include/pvfs2-request.h $(prefix)/include
	install -m 644 $(srcdir)/include/pvfs2-debug.h $(prefix)/include
	install -m 644 $(srcdir)/include/pvfs2-sysint.h $(prefix)/include
	install -m 644 $(srcdir)/include/pvfs2-mgmt.h $(prefix)/include
	install -m 644 $(srcdir)/include/pvfs2-types.h $(prefix)/include
	install -m 644 $(srcdir)/include/pvfs2-util.h $(prefix)/include

	install -d $(prefix)/lib
	install -m 755 $(LIBRARIES) $(prefix)/lib

	install -d $(prefix)/bin
	install -m 755 $(ADMINTOOLS) $(prefix)/bin
	install -m 755 $(ADMINTOOLS_SERVER) $(prefix)/bin

	install -d $(prefix)/sbin
	install -m 755 $(SERVER) $(prefix)/sbin

install_tests:
	install -d $(prefix)/bin
	for f in test/client/sysint/{create,mkdir,readdir,remove,find,io-test}; do \
		install -m 755 $$f $(prefix)/bin/ ; done
