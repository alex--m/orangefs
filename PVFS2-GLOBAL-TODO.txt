####################################################################
# TODO list for pvfs2 project as a whole
# 
#

server operations:
====================================================================
- not started:
  - eattrib (set/get)
  
- unfinished:
  - general error handling
  - performance monitoring (need more metrics)

general server functionality:
====================================================================
- attributes (permissions, etc.) on datafiles
- defining "on disk" format for metadata
  - short term goal of using dspace attribs for storing pvfs2 object attribs
- getting multiple servers working (io + metadata)
- finishing file system semantics documentation
- don't forget to define semantics for access times
- access control, general security model
- testing multiple meta servers
- add a workaround for thread problems on redhat 9
- better signal handling, mechanisms for shutting down or restarting 
  cleanly

request scheduler:
====================================================================
- more generic implementation
- smarter concurrency rules

system interface functionality:
====================================================================
- env variable to control gossip
- not started:
  - eattrib (set/get)?

- unfinished:
  - thread safety
  - statfs
  - way to pass in consistency semantics (timeout values, etc.)
  - state machine implementations for all functions

- finish converting to state machines
- define how configuration info should be passed in
  (how to do paths, fstab, url stuff, whatever)
- define how to pass in distribution and number of datafiles for 
  cases in which the caller wants to override the defaults

kernel/vfs interface
====================================================================
- 2.4.x pvfs-kernel implementation
  - quick modification of existing pvfs-kernel and/or full rewrite
- 2.6.x pvfs2-kernel implementation
  - add ability to mount multiple file systems
  - get fsid/root handle information at mount time
  - use /etc/fstab mount interface for volume info
  - nfs exporting

performance tuning:
====================================================================
- instrumenting
- steal what we can from mpich2
- architecture specific locking, etc.
- thread tuning
- memory allocation cache
- do some benchmarking of thread context switches to help decide
  how trove/job/flow interfaces should interact
- figure out how to make i/o faster

request encoding:
====================================================================
- finish "real" wire encoding scheme
- come up with a mechanism for handling requests that go beyond
  the BMI defined limit for unexpected messages (mainly an issue
  on read/write with complex datatypes, but also potentially a 
  problem on setattr)

error codes:
====================================================================
- converting to new error code format (everywhere)
- documenting valid error codes from functions

I/O path:
====================================================================
- buffer cache on top of trove
- optimizing small reads and writes (packing data into req/ack messages)
- native GM flowprotocol
- general optimizations (lock granularity, immediate completion, etc.)
- ability to unpost, correct use of timeouts, preposting operations
- semantics of short read and write operations
- bmi_tcp scalability and robustness
- immediate completion in trove
- ability to toggle synch behavior in trove
- use better buffer size in default flow protocol
- bmi shmem implementation
- many items in BMI and flow TODO files

I/O description:
====================================================================
- how to encode io descriptions and dist for wire protocol
- use new methods for copying and freeing requests and distributions

correctness/performance testing
====================================================================
- a comprehensive test suite of the system interface API
- more pts tests
- profiling code paths
- eliminate memory leaks
- handle server or client failures in a reasonable way (log and exit instead
  of segfault, perhaps)

system management utilities
====================================================================
- decide what we want/need here?
  - health monitoring
  - system recovery
  - system statistics (raid stat, mem used, etc.)
  - etc.
- performance monitoring:
  - more metrics
  - more viz tools
- end user documentation
- better logging systems
- maybe make pvfs2-ping compute a cksum on the fs.conf from all
  servers and issue a warning if they don't all match?

documentation:
====================================================================
- pvfs2-users list
- pvfs2 web site
- status document
- API terminology
- general file system terminology
- mechanism for exporting to html
- update all design docs!
- review

code cleanup:
====================================================================
- rename all gossip masks to GOSSIP_xxx
- audit code to make sure that all error paths are handled when
  assertions are turned off
- maybe make a checklist for each pvfs2 component to use as we clean 
  up each section of the code?  (items to check for each component
  could include stuff like symbol names, PVFS_error code usage,
  properly error handling when assertions are off, etc.)
- consistent formatting
- consistent function naming
- consistent header file inclusion
- use TROVE_HANDLE_NULL in more places instead of "0"
- come up with more named values like TROVE_HANDLE_NULL to use in 
  other parts of the code
- try to clean up flow / I/O path some, in particular so we don't have
  to do so much mallocing to set up from client side
  - maybe do things like embed file_data struct in flow desc.
- make permission checking in prelude.sm neater, maybe assert on 
  unkown op types so we don't forget to add new ones here

fault tolerance:
=====================================================================
- what does the API look like
- data redundancy
- failover

testing:
=====================================================================
- run common test programs and benchmarks, like:
  - flash
  - iozone
  - dbench
  - ior
  - bonnie
  - make kernel
  - mpiiotest
  - John May's tests?
  - piobench
- more pts tests
- more datatype testing
  - remember example of ub < lb
