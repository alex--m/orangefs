####################################################################
# TODO list for pvfs2 project as a whole
# 
# note: high priority areas have been marked with "****"
#

server operations:
====================================================================
- not started:
  - noop
  - eattrib (set/get)
  - truncate
  - statfs
  
- unfinished:
  - general error handling

general server functionality:
====================================================================
- attributes (permissions, etc.) on datafiles
- defining "on disk" format for metadata
  - short term goal of using dspace attribs for storing pvfs2 object attribs
- getting multiple servers working (io + metadata)
- finishing file system semantics documentation
- don't forget to define semantics for access times
- access control, general security model
- better error handling when unsupported request received
- making server run as background daemon
- testing multiple meta servers
- more config file options:
  - bmi, trove, and flow methods
  - encoding type
  - etc.
- memory datatype processing

request scheduler:
====================================================================
- more generic implementation
- smarter concurrency rules

system interface functionality:
====================================================================
- not started:
  - eattrib (set/get)?
  - statfs

- unfinished:
  - thread safety
  - way to pass in consistency semantics (timeout values, etc.)
  - state machine implementations for all functions

- define how configuration info should be passed in
  (how to do paths, fstab, url stuff, whatever)

user interfaces:
====================================================================
- ROMIO module
- pvfs_XXX interface?

kernel/vfs interface
====================================================================
- 2.4.x pvfs-kernel implementation
  - quick modification of existing pvfs-kernel and/or full rewrite
- 2.6.x pvfs2-kernel implementation
  - add ability to mount multiple file systems
  - properly handle vfs interruption cases (signals)
  - get fsid/root handle information at mount time
  - use /etc/fstab mount interface for volume info
  - auto generate makefile for module to get srcdir right

system installation:
====================================================================
- make install target
- reducing number of headers required for installation
- creating pvfs2.h
- reducing number of libraries needed by libpvfs2.a
- quickstart guide

performance tuning:
====================================================================
- instrumenting
- steal what we can from mpich2
- architecture specific locking, etc.
- thread tuning
- memory allocation cache
- do some benchmarking of thread context switches to help decide
  how trove/job/flow interfaces should interact
- figure out how to make i/o faster

request encoding:
====================================================================
- finish "real" wire encoding scheme

error codes:
====================================================================
- converting to new error code format (everywhere)
- documenting valid error codes from functions

I/O path:
====================================================================
- buffer cache on top of trove
- optimizing small reads and writes (packing data into req/ack messages)
- native GM flowprotocol
- threads in trove?
- general optimizations (lock granularity, immediate completion, etc.)
- ability to unpost, correct use of timeouts, preposting operations
- semantics of short read and write operations
- bmi_tcp scalability and robustness
- improve job thread layout
- add functionality to the job interface that lets you submit a 
  null job and have it pop out some specific amount of time later; to be
  used by a state machine to periodically gather statistics

I/O description:
====================================================================
- how to free request descriptions and distribution structures
- how to copy dist information
- how to encode io descriptions and dist for wire protocol

correctness/performance testing
====================================================================
- a comprehensive test suite of the system interface API
- more pts tests
- profiling code paths
- eliminate memory leaks

system management utilities
====================================================================
- decide what we want/need here?
  - performance monitoring
  - health monitoring
  - system recovery
  - etc.
- end user documentation
- better logging systems
- more tools like pvfs2-ls, pvfs2-import, etc.

documentation:
====================================================================
- consider automated tools like doxygen
- update all design docs!
- review

code cleanup:
====================================================================
- consistent formatting
- consistent function naming
- consistent header file inclusion
- use TROVE_HANDLE_NULL in more places instead of "0"
- come up with more named values like TROVE_HANDLE_NULL to use in 
  other parts of the code
- try to clean up flow / I/O path some, in particular so we don't have
  to do so much mallocing to set up from client side
  - maybe do things like embed file_data struct in flow desc.
- make permission checking in prelude.sm neater, maybe assert on 
  unkown op types so we don't forget to add new ones here

fault tolerance:
=====================================================================
- what does the API look like
- data redundancy
- failover
